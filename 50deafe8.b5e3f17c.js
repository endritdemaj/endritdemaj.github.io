(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{66:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return d}));var a=t(2),r=t(6),i=(t(0),t(89)),o={id:"dockercheatsheet",title:"Docker Cheatsheat",sidebar_label:"Docker Cheatsheat"},c={unversionedId:"documentation/dockercheatsheet",id:"documentation/dockercheatsheet",isDocsHomePage:!1,title:"Docker Cheatsheat",description:"You can write content using GitHub-flavored Markdown syntax.",source:"@site/docs/documentation/dockercheatsheet.md",permalink:"/endritdemaj.github.io/docs/documentation/dockercheatsheet",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/documentation/dockercheatsheet.md",sidebar_label:"Docker Cheatsheat",sidebar:"someSidebar",previous:{title:"Linux Cheatsheat",permalink:"/endritdemaj.github.io/docs/documentation/linuxcheatsheet"},next:{title:"IBM Tivoli Storage Manager (TSM) Cheatsheat",permalink:"/endritdemaj.github.io/docs/documentation/tivolicheatsheet"}},s=[{value:"Docker Editions",id:"docker-editions",children:[]},{value:"General",id:"general",children:[]},{value:"Intro",id:"intro",children:[]},{value:"General",id:"general-1",children:[]},{value:"Networking",id:"networking",children:[{value:"Docker Networks: DNS",id:"docker-networks-dns",children:[]},{value:"Docker Images",id:"docker-images",children:[]}]}],l={rightToc:s};function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"You can write content using ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.github.com/gfm/"}),"GitHub-flavored Markdown syntax"),"."),Object(i.b)("h2",{id:"docker-editions"},"Docker Editions"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},'Docker is no longer just a "Container runtime"'),Object(i.b)("li",{parentName:"ul"},"Dokcer moves fast, it mattes how you install it"),Object(i.b)("li",{parentName:"ul"},"Docker CE (Community Edtion)"),Object(i.b)("li",{parentName:"ul"},"Three major types of instlals: Direct, Mac/Win, Cloud"),Object(i.b)("li",{parentName:"ul"},"Linux(different per distro) (don't use default package)")),Object(i.b)("h2",{id:"general"},"General"),Object(i.b)("p",null,"Image is all the binaries of a container, scripts sources and so on\nA Container is a running instance of that image"),Object(i.b)("h2",{id:"intro"},"Intro"),Object(i.b)("p",null,"what is happening in 'docker container run' "),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Looks for that image locally in image chache, doesnt find anything"),Object(i.b)("li",{parentName:"ol"},"then looks in remote image repository"),Object(i.b)("li",{parentName:"ol"},"downloads the latest version"),Object(i.b)("li",{parentName:"ol"},"creates new container absed on that images"),Object(i.b)("li",{parentName:"ol"},"gices it a virtual IP on a pricate network inside a container"),Object(i.b)("li",{parentName:"ol"},"opens up port 80 on host and forward to port 80 in contianer"),Object(i.b)("li",{parentName:"ol"},"starts container by using CMD in dockerfile")),Object(i.b)("h1",{id:"cheatsheet"},"Cheatsheet"),Object(i.b)("h2",{id:"general-1"},"General"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker version                                      #shows the version of docker client(CLI) and docker engine (systemd-deamon)\ndocker info                                         #general info expanded e.g running contianers etc.\ndocker <managemend command> <command>               #docker cointainer run\ndocke ps                                            #list all running container. -a list all containers\ndocker top <container id>                           #list processes inside a running container\nps aux                                              #show processer running inside a docker container too without hiding it\ndocker container inspect                            #details of the container\ndocker container stats                              #stats of all container\n")),Object(i.b)("h2",{id:"networking"},"Networking"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"<bridge(docker0)>")," is the default network that routes to the Host Network Interface",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("inlineCode",{parentName:"p"},"<host>")," it gains performance by skipping virutal networks but sacrifices security of container model. Basically it is direkt on the Host",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("inlineCode",{parentName:"p"},"<none>")," is not atached to anything"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker network ls                                   #List all docker networks\ndocker network inspect                              #inspect what we are doing\ndocker network create --driver                      #create a new network\ndocker network connect                              #atach a network to a container\ndocker network disconnect                           #detach a network from a container\n")),Object(i.b)("p",null,"Create a new Network using the default ",Object(i.b)("inlineCode",{parentName:"p"},"<bridge>")," driver. If we need another driver, we have to specify it with ",Object(i.b)("inlineCode",{parentName:"p"},"<--driver>")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$docker network create my_app_net^C\n#list them\n$docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\n8d2dc7348d3d        bridge              bridge              local\n9afc2ba4f278        host                host                local\ncd18d7f432a3        my_app_net          bridge              local\na0c8590e5ace        none                null                local\n\n$docker network inspect my_app_net \n[\n    {\n        "Name": "my_app_net",\n        "Id": "cd18d7f432a34a979e9f4ae81b5c0be389cd65760fec4168f32c778ff05594ad",\n        "Created": "2020-08-23T19:59:17.646091944+02:00",\n        "Scope": "local",\n        "Driver": "bridge",\n        "EnableIPv6": false,\n        "IPAM": {\n            "Driver": "default",\n            "Options": {},\n            "Config": [\n                {\n                    "Subnet": "172.18.0.0/16",\n                    "Gateway": "172.18.0.1"\n                }\n            ]\n        },\n        "Internal": false,\n        "Attachable": false,\n        "Ingress": false,\n        "ConfigFrom": {\n            "Network": ""\n        },\n        "ConfigOnly": false,\n        "Containers": {},\n        "Options": {},\n        "Labels": {}\n    }\n]\n')),Object(i.b)("p",null,"To run  a container on a specific network we can do this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$docker container run -d --name new_nginx --network my_app_net nginx\n444869e57cfbd60d237d7c6e5ce792dfa78626d41546e6528c6c4b9460b05e53\n")),Object(i.b)("p",null,"If we inspect our network, we can see this: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$docker network inspect my_app_net \n[\n    {\n        "Name": "my_app_net",\n        "Id": "cd18d7f432a34a979e9f4ae81b5c0be389cd65760fec4168f32c778ff05594ad",\n        "Created": "2020-08-23T19:59:17.646091944+02:00",\n        "Scope": "local",\n        "Driver": "bridge",\n        "EnableIPv6": false,\n        "IPAM": {\n            "Driver": "default",\n            "Options": {},\n            "Config": [\n                {\n                    "Subnet": "172.18.0.0/16",\n                    "Gateway": "172.18.0.1"\n                }\n            ]\n        },\n        "Internal": false,\n        "Attachable": false,\n        "Ingress": false,\n        "ConfigFrom": {\n            "Network": ""\n        },\n        "ConfigOnly": false,\n        "Containers": {\n            "444869e57cfbd60d237d7c6e5ce792dfa78626d41546e6528c6c4b9460b05e53": {\n                "Name": "new_nginx",\n                "EndpointID": "e33e1489899ddfcfe36cbf06406561e3d2a17ad4a03a966d68ef9bd52192e47f",\n                "MacAddress": "02:42:ac:12:00:02",\n                "IPv4Address": "172.18.0.2/16",\n                "IPv6Address": ""\n            }\n        },__\n        "Options": {},\n        "Labels": {}\n    }\n]\n')),Object(i.b)("p",null,"If we want to connect an existing container to a network we have to run the following  "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker network connect <containerid> <networkid>\n")),Object(i.b)("h3",{id:"docker-networks-dns"},"Docker Networks: DNS"),Object(i.b)("p",null,"In the world where containers changes from second  to second we cant rely on IPAddresses. Since its to dynamic\nThere is a build in solution for this and that is ",Object(i.b)("strong",{parentName:"p"},"DNS-Naming")),Object(i.b)("h4",{id:"tldl"},"TL;DL"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker container run -d --name my_container_name                                                    #run a container with a dns-name my_container_name\ndocker run -d --network-alias search --rm --name elastic_3 --network my_app_network elasticsearch:2 #run container in network my_app_network with the network alias 'search'\ndocker container run -d --name my_container_name \n")),Object(i.b)("p",null,"Since we cant have a container with a same name, docker brings up DNS-resolving with it. With the Option ",Object(i.b)("inlineCode",{parentName:"p"},"--net-alias")," or ",Object(i.b)("inlineCode",{parentName:"p"},"--network-alias"),Object(i.b)("br",{parentName:"p"}),"\n","The following commands will fire up two elasticsearch containers with the network-name ",Object(i.b)("inlineCode",{parentName:"p"},"search")," and different container names on the docker network ",Object(i.b)("inlineCode",{parentName:"p"},"my_app_network")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker run -d --network-alias search --rm --name elastic_3 --network my_app_network elasticsearch:2\ndocker run -d --network-alias search --rm --name elastic_4 --network my_app_network elasticsearch:2\n")),Object(i.b)("p",null,"If we have a look and curl now the default elasticsearch port ",Object(i.b)("inlineCode",{parentName:"p"},"9200")," we can check that the DNS-Round-Robin works"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$docker container run --rm -ti --network my_app_network centos curl -s search:9200\n{\n  "name" : "Turner D. Century",\n  "cluster_name" : "elasticsearch",\n  "cluster_uuid" : "BsfpId_oSC6JBdP7EvdJiQ",\n  "version" : {\n    "number" : "2.4.6",\n    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",\n    "build_timestamp" : "2017-07-18T12:17:44Z",\n    "build_snapshot" : false,\n    "lucene_version" : "5.5.4"\n  },\n  "tagline" : "You Know, for Search"\n}\n$docker container run --rm -ti --network my_app_network centos curl -s search:9200\n{\n  "name" : "Tyga",\n  "cluster_name" : "elasticsearch",\n  "cluster_uuid" : "PN5LN99vSySvyuNX1csktg",\n  "version" : {\n    "number" : "2.4.6",\n    "build_hash" : "5376dca9f70f3abef96a77f4bb22720ace8240fd",\n    "build_timestamp" : "2017-07-18T12:17:44Z",\n    "build_snapshot" : false,\n    "lucene_version" : "5.5.4"\n  },\n  "tagline" : "You Know, for Search"\n}\n')),Object(i.b)("h3",{id:"docker-images"},"Docker Images"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"App binaries and dependencies "),Object(i.b)("li",{parentName:"ul"},"Metadata about the image"),Object(i.b)("li",{parentName:"ul"},"Not a complete OS. No kernel, kernel modules (e.g. drivers)"),Object(i.b)("li",{parentName:"ul"},"App as apache")),Object(i.b)("h4",{id:"tltd"},"TL;TD;"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker pull nginx                           #Pull latest nginx image from default repository\ndocker history nginx:latest                 #check history of the latest nginx image\ndocker pull nginx:1.11.9                    #pull specific image of nginx\ndocker image inspect nginx                  #inspect the nginx image and check its metadata\n\ndocker image tag nginx endritdemaj/nginx    #give the nginx a new TAG\n")),Object(i.b)("p",null,"pull latest image of ",Object(i.b)("inlineCode",{parentName:"p"},"nginx")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\nbf5952930446: Already exists \ncb9a6de05e5a: Pull complete \n9513ea0afb93: Pull complete \nb49ea07d2e93: Pull complete \na5e4a503d449: Pull complete \nDigest: sha256:b0ad43f7ee5edbc0effbc14645ae7055e21bc1973aee5150745632a24a752661\nStatus: Downloaded newer image for nginx:latest\ndocker.io/library/nginx:latest\n")),Object(i.b)("p",null,"pull another version of ",Object(i.b)("inlineCode",{parentName:"p"},"nginx:tag")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker pull nginx:1.11.9\n")),Object(i.b)("p",null,"Check the layers of a container with ",Object(i.b)("inlineCode",{parentName:"p"},"docker image history")," or ",Object(i.b)("inlineCode",{parentName:"p"},"docker history"),"\nEvery image starts with a ",Object(i.b)("inlineCode",{parentName:"p"},"scratch")," (first layer) and every change on that image is another layer"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'$docker history nginx:latest\nIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\n4bb46517cac3        10 days ago         /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon\u2026   0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  STOPSIGNAL SIGTERM           0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  EXPOSE 80                    0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  ENTRYPOINT ["/docker-entr\u2026   0B                  \n<missing>           10 days ago         /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7\u2026   1.04kB              \n<missing>           10 days ago         /bin/sh -c #(nop) COPY file:1d0a4127e78a26c1\u2026   1.96kB              \n<missing>           10 days ago         /bin/sh -c #(nop) COPY file:e7e183879c35719c\u2026   1.2kB               \n<missing>           10 days ago         /bin/sh -c set -x     && addgroup --system -\u2026   63.4MB              \n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PKG_RELEASE=1~buster     0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  ENV NJS_VERSION=0.4.3        0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  ENV NGINX_VERSION=1.19.2     0B                  \n<missing>           2 weeks ago         /bin/sh -c #(nop)  LABEL maintainer=NGINX Do\u2026   0B                  \n<missing>           2 weeks ago         /bin/sh -c #(nop)  CMD ["bash"]                 0B                  \n<missing>           2 weeks ago         /bin/sh -c #(nop) ADD file:3af3091e7d2bb40bc\u2026   69.2MB  \n')),Object(i.b)("p",null,"Check an image and see its metadata with the following command to see e.g. which ports we have to open up on our host for the created container.\nCheck env. variables, or nginx version, author and so on."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker image inspect nginx\n")),Object(i.b)("p",null,"To give an image a new tag we hit. If we don't specify  a TAG it defaults to latest. Latest is a default TAG and not the latest image"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker image tag nginx endritdemaj/nginx\n")),Object(i.b)("p",null,"With the following command we push the new image to the default registry (docker hub)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"docker image push endritdemaj/nginx\n")),Object(i.b)("p",null,"See example here: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$docker image tag nginx endritdemaj/nginx\n$docker image ls\nREPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE\nendritdemaj/nginx                           latest              4bb46517cac3        10 days ago         133MB\nnginx                                       latest              4bb46517cac3        10 days ago         133MB\n\n$docker image push endritdemaj/nginx\nThe push refers to repository [docker.io/endritdemaj/nginx]\n550333325e31: Preparing \n22ea89b1a816: Preparing \na4d893caa5c9: Preparing \n0338db614b95: Preparing \nd0f104dc0a1f: Preparing \ndenied: requested access to the resource is denied\n")),Object(i.b)("p",null,"I can create new Tags as we want"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$docker image tag endritdemaj/nginx:latest endritdemaj/nginx:testing\n$docker image ls\nREPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE\nnginx                                       latest              4bb46517cac3        10 days ago         133MB\nendritdemaj/nginx                           latest              4bb46517cac3        10 days ago         133MB\nendritdemaj/nginx                           testing             4bb46517cac3        10 days ago         133MB\n")))}d.isMDXComponent=!0},89:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),d=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=d(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=d(t),m=a,u=b["".concat(o,".").concat(m)]||b[m]||p[m]||i;return t?r.a.createElement(u,c(c({ref:n},l),{},{components:t})):r.a.createElement(u,c({ref:n},l))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);