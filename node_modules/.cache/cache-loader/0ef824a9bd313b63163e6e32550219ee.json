{"remainingRequest":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--7-1!/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/theme-classic/lib/theme/Navbar/index.js","dependencies":[{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/theme-classic/lib/theme/Navbar/index.js","mtime":1605814384112},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1605814384336},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1605814384296}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}