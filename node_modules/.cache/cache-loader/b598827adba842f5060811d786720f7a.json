{"remainingRequest":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit/Documents/endritdemaj.github.io/docs/documentation/dockercheatsheet.md","dependencies":[{"path":"/home/endrit/Documents/endritdemaj.github.io/docs/documentation/dockercheatsheet.md","mtime":1598735448898},{"path":"/home/endrit/Documents/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-dockercheatsheet-md-50d.json","mtime":1598653226157},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1598202332903},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1598202332899}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/endrit/Documents/endritdemaj.github.io/docs/documentation/dockercheatsheet.md"],"names":["React","mdx","frontMatter","id","title","sidebar_label","metadata","rightToc","value","children","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'dockercheatsheet',\n\ttitle: 'Docker Cheatsheat',\n\tsidebar_label: 'Docker Cheatsheat'\n};\nexport const metadata = {\n  \"unversionedId\": \"documentation/dockercheatsheet\",\n  \"id\": \"documentation/dockercheatsheet\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Docker Cheatsheat\",\n  \"description\": \"You can write content using GitHub-flavored Markdown syntax.\",\n  \"source\": \"@site/docs/documentation/dockercheatsheet.md\",\n  \"permalink\": \"/endritdemaj.github.io/docs/documentation/dockercheatsheet\",\n  \"editUrl\": \"https://github.com/facebook/docusaurus/edit/master/website/docs/documentation/dockercheatsheet.md\",\n  \"sidebar_label\": \"Docker Cheatsheat\",\n  \"sidebar\": \"someSidebar\",\n  \"previous\": {\n    \"title\": \"Linux Cheatsheat\",\n    \"permalink\": \"/endritdemaj.github.io/docs/documentation/linuxcheatsheet\"\n  },\n  \"next\": {\n    \"title\": \"IBM Tivoli Storage Manager (TSM) Cheatsheat\",\n    \"permalink\": \"/endritdemaj.github.io/docs/documentation/tivolicheatsheet\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: 'Docker Editions',\n  id: 'docker-editions',\n  children: []\n}, {\n  value: 'General',\n  id: 'general',\n  children: []\n}, {\n  value: 'Intro',\n  id: 'intro',\n  children: []\n}, {\n  value: 'General',\n  id: 'general-1',\n  children: []\n}, {\n  value: 'Networking',\n  id: 'networking',\n  children: [{\n    value: 'Docker Networks: DNS',\n    id: 'docker-networks-dns',\n    children: []\n  }]\n}, {\n  value: 'Docker Images',\n  id: 'docker-images',\n  children: [{\n    value: 'Dockerfile',\n    id: 'dockerfile',\n    children: []\n  }]\n}, {\n  value: 'Container Lifetime &amp; Persistent Data',\n  id: 'container-lifetime--persistent-data',\n  children: [{\n    value: 'Bind Mounting',\n    id: 'bind-mounting',\n    children: []\n  }]\n}, {\n  value: 'Docker Compose',\n  id: 'docker-compose',\n  children: [{\n    value: 'docker-compose.yml',\n    id: 'docker-composeyml',\n    children: []\n  }]\n}, {\n  value: 'docker-compose CLI',\n  id: 'docker-compose-cli',\n  children: []\n}, {\n  value: 'Docker Swarm',\n  id: 'docker-swarm',\n  children: [{\n    value: 'Stacks',\n    id: 'stacks',\n    children: []\n  }]\n}, {\n  value: 'Docker Machine',\n  id: 'docker-machine',\n  children: []\n}];\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`You can write content using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.github.com/gfm/\"\n      }}>{`GitHub-flavored Markdown syntax`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"docker-editions\"\n    }}>{`Docker Editions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Docker is no longer just a \"Container runtime\"`}</li>\n      <li parentName=\"ul\">{`Dokcer moves fast, it mattes how you install it`}</li>\n      <li parentName=\"ul\">{`Docker CE (Community Edtion)`}</li>\n      <li parentName=\"ul\">{`Three major types of instlals: Direct, Mac/Win, Cloud`}</li>\n      <li parentName=\"ul\">{`Linux(different per distro) (don't use default package)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"general\"\n    }}>{`General`}</h2>\n    <p>{`Image is all the binaries of a container, scripts sources and so on\nA Container is a running instance of that image`}</p>\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`what is happening in 'docker container run' `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Looks for that image locally in image chache, doesnt find anything`}</li>\n      <li parentName=\"ol\">{`then looks in remote image repository`}</li>\n      <li parentName=\"ol\">{`downloads the latest version`}</li>\n      <li parentName=\"ol\">{`creates new container absed on that images`}</li>\n      <li parentName=\"ol\">{`gices it a virtual IP on a pricate network inside a container`}</li>\n      <li parentName=\"ol\">{`opens up port 80 on host and forward to port 80 in contianer`}</li>\n      <li parentName=\"ol\">{`starts container by using CMD in dockerfile`}</li>\n    </ol>\n    <h1 {...{\n      \"id\": \"cheatsheet\"\n    }}>{`Cheatsheet`}</h1>\n    <h2 {...{\n      \"id\": \"general-1\"\n    }}>{`General`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`docker version                                      #shows the version of docker client(CLI) and docker engine (systemd-deamon)\ndocker info                                         #general info expanded e.g running contianers etc.\ndocker <managemend command> <command>               #docker cointainer run\ndocke ps                                            #list all running container. -a list all containers\ndocker top <container id>                           #list processes inside a running container\nps aux                                              #show processer running inside a docker container too without hiding it\ndocker container inspect                            #details of the container\ndocker container stats                              #stats of all container\ndocker update                                       #updating a container without needing to kill it or restart, e.g RAM, Memory, CPU or so. Too much CPU to limit\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"networking\"\n    }}>{`Networking`}</h2>\n    <p><inlineCode parentName=\"p\">{`<bridge(docker0)>`}</inlineCode>{` is the default network that routes to the Host Network Interface`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`<host>`}</inlineCode>{` it gains performance by skipping virutal networks but sacrifices security of container model. Basically it is direkt on the Host`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`<none>`}</inlineCode>{` is not atached to anything`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker network ls                                   #List all docker networks\ndocker network inspect                              #inspect what we are doing\ndocker network create --driver                      #create a new network\ndocker network connect                              #atach a network to a container\ndocker network disconnect                           #detach a network from a container\n`}</code></pre>\n    <p>{`Create a new Network using the default `}<inlineCode parentName=\"p\">{`<bridge>`}</inlineCode>{` driver. If we need another driver, we have to specify it with `}<inlineCode parentName=\"p\">{`<--driver>`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker network create my_app_net^C\n#list them\n$docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\n8d2dc7348d3d        bridge              bridge              local\n9afc2ba4f278        host                host                local\ncd18d7f432a3        my_app_net          bridge              local\na0c8590e5ace        none                null                local\n\n$docker network inspect my_app_net \n[\n    {\n        \"Name\": \"my_app_net\",\n        \"Id\": \"cd18d7f432a34a979e9f4ae81b5c0be389cd65760fec4168f32c778ff05594ad\",\n        \"Created\": \"2020-08-23T19:59:17.646091944+02:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {},\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n`}</code></pre>\n    <p>{`To run  a container on a specific network we can do this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker container run -d --name new_nginx --network my_app_net nginx\n444869e57cfbd60d237d7c6e5ce792dfa78626d41546e6528c6c4b9460b05e53\n`}</code></pre>\n    <p>{`If we inspect our network, we can see this: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker network inspect my_app_net \n[\n    {\n        \"Name\": \"my_app_net\",\n        \"Id\": \"cd18d7f432a34a979e9f4ae81b5c0be389cd65760fec4168f32c778ff05594ad\",\n        \"Created\": \"2020-08-23T19:59:17.646091944+02:00\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"444869e57cfbd60d237d7c6e5ce792dfa78626d41546e6528c6c4b9460b05e53\": {\n                \"Name\": \"new_nginx\",\n                \"EndpointID\": \"e33e1489899ddfcfe36cbf06406561e3d2a17ad4a03a966d68ef9bd52192e47f\",\n                \"MacAddress\": \"02:42:ac:12:00:02\",\n                \"IPv4Address\": \"172.18.0.2/16\",\n                \"IPv6Address\": \"\"\n            }\n        },__\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n`}</code></pre>\n    <p>{`If we want to connect an existing container to a network we have to run the following  `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker network connect <containerid> <networkid>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"docker-networks-dns\"\n    }}>{`Docker Networks: DNS`}</h3>\n    <p>{`In the world where containers changes from second  to second we cant rely on IPAddresses. Since its to dynamic\nThere is a build in solution for this and that is `}<strong parentName=\"p\">{`DNS-Naming`}</strong></p>\n    <h4 {...{\n      \"id\": \"tldl\"\n    }}>{`TL;DL`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`docker container run -d --name my_container_name                                                    #run a container with a dns-name my_container_name\ndocker run -d --network-alias search --rm --name elastic_3 --network my_app_network elasticsearch:2 #run container in network my_app_network with the network alias 'search'\ndocker container run -d --name my_container_name \n`}</code></pre>\n    <p>{`Since we cant have a container with a same name, docker brings up DNS-resolving with it. With the Option `}<inlineCode parentName=\"p\">{`--net-alias`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`--network-alias`}</inlineCode><br parentName=\"p\"></br>{`\n`}{`The following commands will fire up two elasticsearch containers with the network-name `}<inlineCode parentName=\"p\">{`search`}</inlineCode>{` and different container names on the docker network `}<inlineCode parentName=\"p\">{`my_app_network`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d --network-alias search --rm --name elastic_3 --network my_app_network elasticsearch:2\ndocker run -d --network-alias search --rm --name elastic_4 --network my_app_network elasticsearch:2\n`}</code></pre>\n    <p>{`If we have a look and curl now the default elasticsearch port `}<inlineCode parentName=\"p\">{`9200`}</inlineCode>{` we can check that the DNS-Round-Robin works`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker container run --rm -ti --network my_app_network centos curl -s search:9200\n{\n  \"name\" : \"Turner D. Century\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"BsfpId_oSC6JBdP7EvdJiQ\",\n  \"version\" : {\n    \"number\" : \"2.4.6\",\n    \"build_hash\" : \"5376dca9f70f3abef96a77f4bb22720ace8240fd\",\n    \"build_timestamp\" : \"2017-07-18T12:17:44Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.4\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n$docker container run --rm -ti --network my_app_network centos curl -s search:9200\n{\n  \"name\" : \"Tyga\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"PN5LN99vSySvyuNX1csktg\",\n  \"version\" : {\n    \"number\" : \"2.4.6\",\n    \"build_hash\" : \"5376dca9f70f3abef96a77f4bb22720ace8240fd\",\n    \"build_timestamp\" : \"2017-07-18T12:17:44Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.4\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"docker-images\"\n    }}>{`Docker Images`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`App binaries and dependencies `}</li>\n      <li parentName=\"ul\">{`Metadata about the image`}</li>\n      <li parentName=\"ul\">{`Not a complete OS. No kernel, kernel modules (e.g. drivers)`}</li>\n      <li parentName=\"ul\">{`App as apache`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"tltd\"\n    }}>{`TL;TD;`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`docker pull nginx                           #Pull latest nginx image from default repository\ndocker history nginx:latest                 #check history of the latest nginx image\ndocker pull nginx:1.11.9                    #pull specific image of nginx\ndocker image inspect nginx                  #inspect the nginx image and check its metadata\n\ndocker image tag nginx endritdemaj/nginx    #give the nginx a new TAG\n`}</code></pre>\n    <p>{`pull latest image of `}<inlineCode parentName=\"p\">{`nginx`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\nbf5952930446: Already exists \ncb9a6de05e5a: Pull complete \n9513ea0afb93: Pull complete \nb49ea07d2e93: Pull complete \na5e4a503d449: Pull complete \nDigest: sha256:b0ad43f7ee5edbc0effbc14645ae7055e21bc1973aee5150745632a24a752661\nStatus: Downloaded newer image for nginx:latest\ndocker.io/library/nginx:latest\n`}</code></pre>\n    <p>{`pull another version of `}<inlineCode parentName=\"p\">{`nginx:tag`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker pull nginx:1.11.9\n`}</code></pre>\n    <p>{`Check the layers of a container with `}<inlineCode parentName=\"p\">{`docker image history`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`docker history`}</inlineCode>{`\nEvery image starts with a `}<inlineCode parentName=\"p\">{`scratch`}</inlineCode>{` (first layer) and every change on that image is another layer`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker history nginx:latest\nIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\n4bb46517cac3        10 days ago         /bin/sh -c #(nop)  CMD [\"nginx\" \"-g\" \"daemon…   0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  STOPSIGNAL SIGTERM           0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  EXPOSE 80                    0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  ENTRYPOINT [\"/docker-entr…   0B                  \n<missing>           10 days ago         /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7…   1.04kB              \n<missing>           10 days ago         /bin/sh -c #(nop) COPY file:1d0a4127e78a26c1…   1.96kB              \n<missing>           10 days ago         /bin/sh -c #(nop) COPY file:e7e183879c35719c…   1.2kB               \n<missing>           10 days ago         /bin/sh -c set -x     && addgroup --system -…   63.4MB              \n<missing>           10 days ago         /bin/sh -c #(nop)  ENV PKG_RELEASE=1~buster     0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  ENV NJS_VERSION=0.4.3        0B                  \n<missing>           10 days ago         /bin/sh -c #(nop)  ENV NGINX_VERSION=1.19.2     0B                  \n<missing>           2 weeks ago         /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B                  \n<missing>           2 weeks ago         /bin/sh -c #(nop)  CMD [\"bash\"]                 0B                  \n<missing>           2 weeks ago         /bin/sh -c #(nop) ADD file:3af3091e7d2bb40bc…   69.2MB  \n`}</code></pre>\n    <p>{`Check an image and see its metadata with the following command to see e.g. which ports we have to open up on our host for the created container.\nCheck env. variables, or nginx version, author and so on.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker image inspect nginx\n`}</code></pre>\n    <p>{`To give an image a new tag we hit. If we don't specify  a TAG it defaults to latest. Latest is a default TAG and not the latest image`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker image tag nginx endritdemaj/nginx\n`}</code></pre>\n    <p>{`With the following command we push the new image to the default registry (docker hub)`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker image push endritdemaj/nginx\n`}</code></pre>\n    <p>{`See example here: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker image tag nginx endritdemaj/nginx\n$docker image ls\nREPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE\nendritdemaj/nginx                           latest              4bb46517cac3        10 days ago         133MB\nnginx                                       latest              4bb46517cac3        10 days ago         133MB\n\n$docker image push endritdemaj/nginx\nThe push refers to repository [docker.io/endritdemaj/nginx]\n550333325e31: Preparing \n22ea89b1a816: Preparing \na4d893caa5c9: Preparing \n0338db614b95: Preparing \nd0f104dc0a1f: Preparing \ndenied: requested access to the resource is denied\n`}</code></pre>\n    <p>{`I can create new Tags as we want`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker image tag endritdemaj/nginx:latest endritdemaj/nginx:testing\n$docker image ls\nREPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE\nnginx                                       latest              4bb46517cac3        10 days ago         133MB\nendritdemaj/nginx                           latest              4bb46517cac3        10 days ago         133MB\nendritdemaj/nginx                           testing             4bb46517cac3        10 days ago         133MB\n`}</code></pre>\n    <p>{`If you want to create an Image of a running container you do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker commit <containerid>\n#Find in docker image ls the new image\ndocker image tag <imageid> repo:tag\ndocker image push repo:tag                      #to push the image to the repo\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dockerfile\"\n    }}>{`Dockerfile`}</h3>\n    <p>{`The instructions on how to build an Image are stored in a Dockerfile  `}</p>\n    <p>{`Package Manager like apt and yum are one of the reasons to build container `}<inlineCode parentName=\"p\">{`FROM Debian, Ubuntu, Fedora or CentOS`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker build -f some-dockerfile                         #to build from a specific dockerfile instead of the default\n`}</code></pre>\n    <p>{`When we build an Image, it pulls the debian:jessie image to the local Docker Host from docker hub. Then each line is going to be executed and cached layer by layer on the docker engine\nEach Command in a Dockerfile is a new Image Layer`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`FROM debian:jessie                                      #use always a minimum distribution\nENV NGINX_VERSION 1.11.10-1~jessie                      #Enironment variables which are very important for containers since all the info is there\nRUN apt-key...                                          #runs command e.g unzipping, install something or so on.\n`}</code></pre>\n    <p>{`It is usual that commands get brought together with `}<inlineCode parentName=\"p\">{`&&`}</inlineCode>{` because each command is a new layer to sace space and time`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`RUN apt-get update \\\\\n    && apt-get install --no-install-recommends -y \\\\\n        ca-certificates\n`}</code></pre>\n    <p>{`Loggin in Docker is managed by Docker itself we have to move the logging to stdout. Everything that we want to log has to be moved there`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`RUN ln -sf /dev/stdout /var/log/nginx/access.log \\\\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n`}</code></pre>\n    <p>{`Exporse a port on the docker virual network. The ports are not automatically exposed on the host. Thats why we need the `}<inlineCode parentName=\"p\">{`--p`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`docker run`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`EXPOSE 80 443\n`}</code></pre>\n    <p>{`This command is launched every time we start a new container or when we restart a container`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`CMD [\"nginx\", \"-g\", \"deamon off;\"]\n`}</code></pre>\n    <p>{`The following command builds all dockerfiles in the current directory where `}<inlineCode parentName=\"p\">{`customnginx`}</inlineCode>{` is the image name`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker image build -t customnginx .\n`}</code></pre>\n    <p>{`The hash at the line cached the changes to that line so if nothing changes til that line docker doesnt rebuild it. It is very import that the things that\nchange the least are on the top of the file and at the button the stuff that changes most`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker image build -t customnginx .\nSending build context to Docker daemon   16.9kB\nStep 1/7 : FROM debian:stretch-slim\nstretch-slim: Pulling from library/debian\n75cb2ebf3b3c: Pull complete \nDigest: sha256:c4052b51588fc32fe0c25a984a34cad5dc5990b9c12744073a9c409a6d0737cf\nStatus: Downloaded newer image for debian:stretch-slim\n ---> 8ff748cdd6b1\nStep 2/7 : ENV NGINX_VERSION 1.13.6-1~stretch\n ---> Running in 30c99b093c02\nRemoving intermediate container 30c99b093c02\n ---> 03ecbd5ec3cc\nStep 3/7 : ENV NJS_VERSION   1.13.6.0.1.14-1~stretch\n ---> Running in df3282dfa152\nRemoving intermediate container df3282dfa152\n ---> b4b4df428136\nStep 4/7 : RUN apt-get update   && apt-get install --no-install-recommends --no-install-suggests -y gnupg1  &&  \n.\n.\n.\n ---> Using cache\n ---> 713bcce48334\nStep 6/7 : EXPOSE 80 443\n ---> Using cache\n ---> 7270661a16d0\nStep 7/7 : CMD [\"nginx\", \"-g\", \"daemon off;\"]\n ---> Using cache\n ---> ef446a55347e\nSuccessfully built ef446a55347e\nSuccessfully tagged customnginx:latest\n$docker image ls\nREPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE\ncustomnginx                                 latest              ef446a55347e        2 minutes ago       108MB\n`}</code></pre>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`WORKDIR`}</inlineCode>{` to change directory. This is best pratice. See example below where we copy `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` to the docker image`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ll\ntotal 16\ndrwxr-xr-x  2 endrit root 4096 Aug 22 21:24 ./\ndrwxr-xr-x 32 endrit root 4096 Aug 22 21:24 ../\n-rw-r--r--  1 endrit root  410 Aug 22 21:24 Dockerfile\n-rw-r--r--  1 endrit root  249 Aug 22 21:24 index.html\n$cat Dockerfile\nFROM nginx:latest\nWORKDIR /usr/share/nginx/html\nCOPY index.html index.html\n`}</code></pre>\n    <p>{`we can use `}<inlineCode parentName=\"p\">{`prune`}</inlineCode>{` to clean up images, volumes, build cache and containers`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker image prune                  #to clean up just dangling images\ndocker system prune                 #will clean up everything\n\ndocker image prune -a               #will remove all images that are not used\ndocker system df                    #to see space usage\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"container-lifetime--persistent-data\"\n    }}>{`Container Lifetime & Persistent Data`}</h2>\n    <p>{`Volume in Dockerfile`}</p>\n    <p>{`Any file that is put in the Volume will outlive the contianer until we delete the volume. They needs to be manually deleted.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`VOLUME /var/lib/mysql                           #Creates a new named Volume on the host in 'dockerdir'/somehash/'_data and on the container under /var/lib/mysql\n\ndocker inspect <container>                      #under Volumes we can see the Volumes and under Mounts we can see the mapping from the Host(Source) to the Container(Destination)\n\ndocker container run -d mysql -v friendlyname:/var/lib/sql          #Creates a volume with a friendly name on the Host and on the Container\ndocker volumes ls                               #check mounted volumes and with inspect to check the mounts\n\ndocker volume create                            #create a new Docker Volume ahead of the Time\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"bind-mounting\"\n    }}>{`Bind Mounting`}</h3>\n    <p>{`Maps a host file or directory to a container file or directory. Two locations pointing to the same files.\nHas to be done in container run, cant be done in Dockerfile`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`... run -v /home/endrit/stuff:/path/container\n`}</code></pre>\n    <p>{`For Example i start here a Postgres db`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d --name pgdb962 -v pgdata:/var/lib/postgresql/data -e POSTGRES_PASSWORD=yourPW -d postgres:9.6.2\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"docker-compose\"\n    }}>{`Docker Compose`}</h2>\n    <p>{`Configure relationships between containers\nsave our docker container run settings in easy-to-read file\ncreate one-liner developer environment startups`}</p>\n    <ol>\n      <li parentName=\"ol\">{`YAML-Formatted file that describes our solution options for :`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`container`}</li>\n          <li parentName=\"ul\">{`networks`}</li>\n          <li parentName=\"ul\">{`volumes`}</li>\n        </ul></li>\n      <li parentName=\"ol\">{`A CLI tool `}<inlineCode parentName=\"li\">{`docker-compose`}</inlineCode>{` used for local dev/test automation with those YAML files`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"docker-composeyml\"\n    }}>{`docker-compose.yml`}</h3>\n    <p>{`Here is an example of a `}<inlineCode parentName=\"p\">{`docker-compose.yml`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`version: '2'\n\n# same as\n# docker run -p 80:80 -v $(pwd):/tmp nginx\n\nservices:\n    nginx:\n        image:nginx\n        volumes:\n            -.:tmp\n        ports:\n            - '80:80'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"docker-compose-cli\"\n    }}>{`docker-compose CLI`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`docker-compose up               # setup volumes/networks and start all containers\ndocker-compose down             # stop all containers and remove cont/vol/net\n\ndocker-compose ps               #shows running containers\ndocker-compose logs             #show logs of the containers \n`}</code></pre>\n    <p>{`if all your project had a Dockerfile and docker-compose.yml then a \"new developer onboardning\" would be:\ngit clone github.com/some/software\ndocker-compose up`}</p>\n    <p>{`First docker-compose.yml\nIf we change the name than we have to give it with a parameter to the file\nThis code starts up a `}<inlineCode parentName=\"p\">{`drupal`}</inlineCode>{` container with a `}<inlineCode parentName=\"p\">{`postgres`}</inlineCode>{` database. Remember that the default host for postgress is `}<inlineCode parentName=\"p\">{`localhos`}</inlineCode>{` but outside of the container its the service name`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`version: '2'\nservices:\n  drupal:\n    image: drupal\n    ports:\n    - \"8080:80\"\n    volumes:\n    - drupal-profiles:/var/www/html/profiles\n    - drupal-sites:/var/www/html/sites \n    - drupal-themes:/var/www/html/themes \n    environment:\n        POSTGRES_PASSWORD: example\n    links:\n    - postgres2\n\n  postgres2:\n    image: postgres\n    environment:\n        POSTGRES_DB: drupal\n        POSTGRES_USER: user\n        POSTGRES_PASSWORD: example\n\nvolumes:\n    drupal-profiles:\n    drupal-sites:\n    drupal-themes:\n`}</code></pre>\n    <p>{`Docker compose build. If we have this option in the Yaml it will build the image the first time it runs. If we want to force build the image, we hate to run\nGreat for complex build that have lots of vars or build args`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker-compose build\ndocker-compose up --build\n`}</code></pre>\n    <p>{`In the below example we build a custom image if the image nginx-custom is not in the cache.\nIf the service need a database we would just hang that in`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#docker-compose.yml\n    services:\n        proxy:\n            build:                                      #Tells that the image needs to be build\n                context: .                              #Build the Image in the current dir\n                dockerfile: nginx.Dockerfile            #Build the image using this Dockerfile\n            image: nginx-custom                         #name the image after the build nginx-custom\n            ports:\n                - '80:80'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"docker-swarm\"\n    }}>{`Docker Swarm`}</h2>\n    <p>{`How do we automate container lifecycle?\nHow can we easily scale out/in/up/down?\nHow can we ensure our containers are re-created if they fail?\nHow can we replace containers without downtine (blue/green deploy)`}</p>\n    <p>{`Swarm Mode is a clustering solution built inside Docker`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker swarm init                       #to initialize swarm\nTo add a worker to this swarm, run the following command:\n\ndocker swarm join --token SWMTKN-1####################################################################3\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n`}</code></pre>\n    <p>{`Service in a Swarm replaces `}<inlineCode parentName=\"p\">{`docker run`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker service <CMD>\ndocker service create alpine ping 8.8.8.8               # create a new service that runs alpine container that does a ping to google \ndocker service ls                                       # list all the services\ndocker service ps <ServiceName or ID>                   # list all the contianers inside a service\ndocker service update <ID> --replicas 3                 # Now we want to scale our service up\ndocker node update --role manager <ipofnode>\n\n$ docker service create --replicas 3 alpine ping 8.8.8.8\n$ docker service ps fervent_mendel \nID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS\nxkafd3dyla7z        fervent_mendel.1    alpine:latest       node1               Running             Running 37 seconds ago                       \np89fx51fejae        fervent_mendel.2    alpine:latest       node2               Running             Running 37 seconds ago                       \ngyx2xbuobitz        fervent_mendel.3    alpine:latest       node3               Running             Running 37 seconds ago     \n`}</code></pre>\n    <p>{`Network driver Overlay Multi-Host Networking. Its creating a swarm wide bridge network so that containers across hosts can communicate to each other\nJust choose `}<inlineCode parentName=\"p\">{`--driver overlay`}</inlineCode>{` when creating network`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker network create --driver overlay mydrupal\ndocker service create --name psql --network mydrupal -e POSTGRES_PASSWORD=example postgres      #create a postgress service on mydrupal network\n`}</code></pre>\n    <p>{`Scaling out with Routing Mesh`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`#create an elasticsearch service with three containers\ndocker service create --name search --replicas 3 -p 9200:9200 elasticsearch:2\n`}</code></pre>\n    <p>{`When we now do a curl on the localhost, the routing mesh forward with round robin our request to all thre nodes the service is running on.`}</p>\n    <p>{`This is stateless load balancing. This LB is at OSI Layer 3 (TCP), not Layer 4 (DNS)\nBoth limitation can be overcome with: `}<inlineCode parentName=\"p\">{`nginx or HAProxy LB proxy, or:`}</inlineCode>{` Docker Enterprise Edition which comes with built in L4 web proxy.`}</p>\n    <p>{`Create a Dogs VS Cats voting app `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/BretFisher/udemy-docker-mastery/tree/main/swarm-app-1#assignment-create-a-multi-service-multi-node-web-app\"\n      }}>{`klick`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker network create --driver overlay backend\ndocker network create --driver overlay frontend\n\ndocker volume create db-data\n\ndocker service create --name vote -p 80:80 --network frontend --replicas 2 bretfisher/examplevotingapp_vote\ndocker service create --name redis --network frontend redis:3.2\ndocker service create --name worker --network frontend --network backend bretfisher/examplevotingapp_worker:java\ndocker sercice create --name db --network backend --mount type=volume,source=db-data,target=/var/lib/postgresql/data -e POSTGRES_HOST_AUTH_METHOD=trust postgres:9.5\ndocker service create --name result -p 5001:80 --network backend bretfisher/examplevotingapp_result\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"stacks\"\n    }}>{`Stacks`}</h3>\n    <p>{`Its like compose for swarm. With options to deploy or update something\nMany services, volumes overlay networks and so on everything in a YAML-File`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker stack deploy -c voting.yml voteapp                   #deploying a voteapp from the YAML-File\n`}</code></pre>\n    <p>{`To update the our stack we need to make changes to the Yaml file and hit that command again with the same stack name`}</p>\n    <h4 {...{\n      \"id\": \"sectrets\"\n    }}>{`Sectrets`}</h4>\n    <p>{`Easiest \"secure\" solution for storing sercrets in Swarm\nWhat is a Secret?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Username and password`}</li>\n      <li parentName=\"ul\">{`TLS Certificate and keys`}</li>\n      <li parentName=\"ul\">{`SSH keys`}</li>\n      <li parentName=\"ul\">{`Any data you would prefer not to be \"on front page of news\"\nSevrets are first stored in Swarm, then assigned to a Service(s)\nOnly Containers in assigned Service(s) can see them`}</li>\n    </ul>\n    <p>{`Turorial`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`echo \"veryStrongPW\" >> mypw.txt\ndocker secret create mypw mypw.txt\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"docker-machine\"\n    }}>{`Docker Machine`}</h2>\n    <p>{`CLI tool to create new nodes using virtualboc`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker-machine create node1\ndocker-machine create node2\ndocker-machine create node3\n\n#access \ndocker-machine ssh <name>\ndocker-machine env node1\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}