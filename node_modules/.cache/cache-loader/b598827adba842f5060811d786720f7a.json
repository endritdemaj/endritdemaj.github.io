{"remainingRequest":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit/Documents/endritdemaj.github.io/docs/documentation/dockercheatsheet.md","dependencies":[{"path":"/home/endrit/Documents/endritdemaj.github.io/docs/documentation/dockercheatsheet.md","mtime":1599148820734},{"path":"/home/endrit/Documents/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-dockercheatsheet-md-50d.json","mtime":1602876735727},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1598202332903},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1598202332899}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvZW5kcml0L0RvY3VtZW50cy9lbmRyaXRkZW1hai5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIi9ob21lL2VuZHJpdC9Eb2N1bWVudHMvZW5kcml0ZGVtYWouZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCB2YXIgZnJvbnRNYXR0ZXI9e2lkOidkb2NrZXJjaGVhdHNoZWV0Jyx0aXRsZTonRG9ja2VyIENoZWF0c2hlYXQnLHNpZGViYXJfbGFiZWw6J0RvY2tlciBDaGVhdHNoZWF0J307ZXhwb3J0IHZhciBtZXRhZGF0YT17InVudmVyc2lvbmVkSWQiOiJkb2N1bWVudGF0aW9uL2RvY2tlcmNoZWF0c2hlZXQiLCJpZCI6ImRvY3VtZW50YXRpb24vZG9ja2VyY2hlYXRzaGVldCIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJEb2NrZXIgQ2hlYXRzaGVhdCIsImRlc2NyaXB0aW9uIjoiWW91IGNhbiB3cml0ZSBjb250ZW50IHVzaW5nIEdpdEh1Yi1mbGF2b3JlZCBNYXJrZG93biBzeW50YXguIiwic291cmNlIjoiQHNpdGUvZG9jcy9kb2N1bWVudGF0aW9uL2RvY2tlcmNoZWF0c2hlZXQubWQiLCJwZXJtYWxpbmsiOiIvZW5kcml0ZGVtYWouZ2l0aHViLmlvL2RvY3MvZG9jdW1lbnRhdGlvbi9kb2NrZXJjaGVhdHNoZWV0IiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kb2N1c2F1cnVzL2VkaXQvbWFzdGVyL3dlYnNpdGUvZG9jcy9kb2N1bWVudGF0aW9uL2RvY2tlcmNoZWF0c2hlZXQubWQiLCJzaWRlYmFyX2xhYmVsIjoiRG9ja2VyIENoZWF0c2hlYXQiLCJzaWRlYmFyIjoic29tZVNpZGViYXIiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IkxpbnV4IENoZWF0c2hlYXQiLCJwZXJtYWxpbmsiOiIvZW5kcml0ZGVtYWouZ2l0aHViLmlvL2RvY3MvZG9jdW1lbnRhdGlvbi9saW51eGNoZWF0c2hlZXQifSwibmV4dCI6eyJ0aXRsZSI6Ikt1YmVybmV0ZXMgQ2hlYXRzaGVldCIsInBlcm1hbGluayI6Ii9lbmRyaXRkZW1hai5naXRodWIuaW8vZG9jcy9kb2N1bWVudGF0aW9uL2t1YmVybmV0ZXNjaGVhdHNoZWV0In19Oy8qIEBqc3ggbWR4ICovZXhwb3J0IHZhciByaWdodFRvYz1be3ZhbHVlOidEb2NrZXIgRWRpdGlvbnMnLGlkOidkb2NrZXItZWRpdGlvbnMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0dlbmVyYWwnLGlkOidnZW5lcmFsJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidJbnRybycsaWQ6J2ludHJvJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidHZW5lcmFsJyxpZDonZ2VuZXJhbC0xJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidOZXR3b3JraW5nJyxpZDonbmV0d29ya2luZycsY2hpbGRyZW46W3t2YWx1ZTonRG9ja2VyIE5ldHdvcmtzOiBETlMnLGlkOidkb2NrZXItbmV0d29ya3MtZG5zJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J0RvY2tlciBJbWFnZXMnLGlkOidkb2NrZXItaW1hZ2VzJyxjaGlsZHJlbjpbe3ZhbHVlOidEb2NrZXJmaWxlJyxpZDonZG9ja2VyZmlsZScsY2hpbGRyZW46W119XX0se3ZhbHVlOidDb250YWluZXIgTGlmZXRpbWUgJmFtcDsgUGVyc2lzdGVudCBEYXRhJyxpZDonY29udGFpbmVyLWxpZmV0aW1lLS1wZXJzaXN0ZW50LWRhdGEnLGNoaWxkcmVuOlt7dmFsdWU6J0JpbmQgTW91bnRpbmcnLGlkOidiaW5kLW1vdW50aW5nJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J0RvY2tlciBDb21wb3NlJyxpZDonZG9ja2VyLWNvbXBvc2UnLGNoaWxkcmVuOlt7dmFsdWU6J2RvY2tlci1jb21wb3NlLnltbCcsaWQ6J2RvY2tlci1jb21wb3NleW1sJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J2RvY2tlci1jb21wb3NlIENMSScsaWQ6J2RvY2tlci1jb21wb3NlLWNsaScsY2hpbGRyZW46W119LHt2YWx1ZTonRG9ja2VyIFN3YXJtJyxpZDonZG9ja2VyLXN3YXJtJyxjaGlsZHJlbjpbe3ZhbHVlOidTdGFja3MnLGlkOidzdGFja3MnLGNoaWxkcmVuOltdfV19LHt2YWx1ZTonRG9ja2VyIE1hY2hpbmUnLGlkOidkb2NrZXItbWFjaGluZScsY2hpbGRyZW46W119LHt2YWx1ZTonRnVsbCBBcHAgTGlmZWN5Y2xlJyxpZDonZnVsbC1hcHAtbGlmZWN5Y2xlJyxjaGlsZHJlbjpbe3ZhbHVlOidTZXJ2aWNlIFVwZGF0ZXMnLGlkOidzZXJ2aWNlLXVwZGF0ZXMnLGNoaWxkcmVuOltdfSx7dmFsdWU6J0RvY2tlciBoZWFsdGhjaGVja3MnLGlkOidkb2NrZXItaGVhbHRoY2hlY2tzJyxjaGlsZHJlbjpbXX1dfSx7dmFsdWU6J1J1bm5pbmcgRG9ja2VyIFJlZ2lzdHJ5JyxpZDoncnVubmluZy1kb2NrZXItcmVnaXN0cnknLGNoaWxkcmVuOlt7dmFsdWU6J0VuYWJsaW5nIFNTTCBhbmQgSFRUUFMgZm9yIHRoZSBTZWN1cmUgTG9jYWwgUmVnaXN0cnknLGlkOidlbmFibGluZy1zc2wtYW5kLWh0dHBzLWZvci10aGUtc2VjdXJlLWxvY2FsLXJlZ2lzdHJ5JyxjaGlsZHJlbjpbXX0se3ZhbHVlOidVc2luZyBSZWdpc3RyeSB3aXRoIFN3YXJtJyxpZDondXNpbmctcmVnaXN0cnktd2l0aC1zd2FybScsY2hpbGRyZW46W119XX0se3ZhbHVlOidXYXJuaW5nJyxpZDond2FybmluZycsY2hpbGRyZW46W119XTt2YXIgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jOnJpZ2h0VG9jfTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoInAiLG51bGwsIllvdSBjYW4gd3JpdGUgY29udGVudCB1c2luZyAiLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2dpdGh1Yi5naXRodWIuY29tL2dmbS8ifSksIkdpdEh1Yi1mbGF2b3JlZCBNYXJrZG93biBzeW50YXgiKSwiLiIpLG1keCgiaDIiLHsiaWQiOiJkb2NrZXItZWRpdGlvbnMifSwiRG9ja2VyIEVkaXRpb25zIiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiRG9ja2VyIGlzIG5vIGxvbmdlciBqdXN0IGEgXCJDb250YWluZXIgcnVudGltZVwiIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkRva2NlciBtb3ZlcyBmYXN0LCBpdCBtYXR0ZXMgaG93IHlvdSBpbnN0YWxsIGl0IiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkRvY2tlciBDRSAoQ29tbXVuaXR5IEVkdGlvbikiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiVGhyZWUgbWFqb3IgdHlwZXMgb2YgaW5zdGxhbHM6IERpcmVjdCwgTWFjL1dpbiwgQ2xvdWQiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiTGludXgoZGlmZmVyZW50IHBlciBkaXN0cm8pIChkb24ndCB1c2UgZGVmYXVsdCBwYWNrYWdlKSIpKSxtZHgoImgyIix7ImlkIjoiZ2VuZXJhbCJ9LCJHZW5lcmFsIiksbWR4KCJwIixudWxsLCJJbWFnZSBpcyBhbGwgdGhlIGJpbmFyaWVzIG9mIGEgY29udGFpbmVyLCBzY3JpcHRzIHNvdXJjZXMgYW5kIHNvIG9uXG5BIENvbnRhaW5lciBpcyBhIHJ1bm5pbmcgaW5zdGFuY2Ugb2YgdGhhdCBpbWFnZSIpLG1keCgiaDIiLHsiaWQiOiJpbnRybyJ9LCJJbnRybyIpLG1keCgicCIsbnVsbCwid2hhdCBpcyBoYXBwZW5pbmcgaW4gJ2RvY2tlciBjb250YWluZXIgcnVuJyAiKSxtZHgoIm9sIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJMb29rcyBmb3IgdGhhdCBpbWFnZSBsb2NhbGx5IGluIGltYWdlIGNoYWNoZSwgZG9lc250IGZpbmQgYW55dGhpbmciKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwidGhlbiBsb29rcyBpbiByZW1vdGUgaW1hZ2UgcmVwb3NpdG9yeSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJkb3dubG9hZHMgdGhlIGxhdGVzdCB2ZXJzaW9uIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sImNyZWF0ZXMgbmV3IGNvbnRhaW5lciBhYnNlZCBvbiB0aGF0IGltYWdlcyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJnaWNlcyBpdCBhIHZpcnR1YWwgSVAgb24gYSBwcmljYXRlIG5ldHdvcmsgaW5zaWRlIGEgY29udGFpbmVyIiksbWR4KCJsaSIse3BhcmVudE5hbWU6Im9sIn0sIm9wZW5zIHVwIHBvcnQgODAgb24gaG9zdCBhbmQgZm9yd2FyZCB0byBwb3J0IDgwIGluIGNvbnRpYW5lciIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJvbCJ9LCJzdGFydHMgY29udGFpbmVyIGJ5IHVzaW5nIENNRCBpbiBkb2NrZXJmaWxlIikpLG1keCgiaDEiLHsiaWQiOiJjaGVhdHNoZWV0In0sIkNoZWF0c2hlZXQiKSxtZHgoImgyIix7ImlkIjoiZ2VuZXJhbC0xIn0sIkdlbmVyYWwiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciB2ZXJzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvd3MgdGhlIHZlcnNpb24gb2YgZG9ja2VyIGNsaWVudChDTEkpIGFuZCBkb2NrZXIgZW5naW5lIChzeXN0ZW1kLWRlYW1vbilcbmRvY2tlciBpbmZvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZ2VuZXJhbCBpbmZvIGV4cGFuZGVkIGUuZyBydW5uaW5nIGNvbnRpYW5lcnMgZXRjLlxuZG9ja2VyIDxtYW5hZ2VtZW5kIGNvbW1hbmQ+IDxjb21tYW5kPiAgICAgICAgICAgICAgICNkb2NrZXIgY29pbnRhaW5lciBydW5cbmRvY2tlIHBzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBhbGwgcnVubmluZyBjb250YWluZXIuIC1hIGxpc3QgYWxsIGNvbnRhaW5lcnNcbmRvY2tlciB0b3AgPGNvbnRhaW5lciBpZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBwcm9jZXNzZXMgaW5zaWRlIGEgcnVubmluZyBjb250YWluZXJcbnBzIGF1eCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBwcm9jZXNzZXIgcnVubmluZyBpbnNpZGUgYSBkb2NrZXIgY29udGFpbmVyIHRvbyB3aXRob3V0IGhpZGluZyBpdFxuZG9ja2VyIGNvbnRhaW5lciBpbnNwZWN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICNkZXRhaWxzIG9mIHRoZSBjb250YWluZXJcbmRvY2tlciBjb250YWluZXIgc3RhdHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3RhdHMgb2YgYWxsIGNvbnRhaW5lclxuZG9ja2VyIHVwZGF0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN1cGRhdGluZyBhIGNvbnRhaW5lciB3aXRob3V0IG5lZWRpbmcgdG8ga2lsbCBpdCBvciByZXN0YXJ0LCBlLmcgUkFNLCBNZW1vcnksIENQVSBvciBzby4gVG9vIG11Y2ggQ1BVIHRvIGxpbWl0XG4iKSksbWR4KCJoMiIseyJpZCI6Im5ldHdvcmtpbmcifSwiTmV0d29ya2luZyIpLG1keCgicCIsbnVsbCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIjxicmlkZ2UoZG9ja2VyMCk+IiksIiBpcyB0aGUgZGVmYXVsdCBuZXR3b3JrIHRoYXQgcm91dGVzIHRvIHRoZSBIb3N0IE5ldHdvcmsgSW50ZXJmYWNlIixtZHgoImJyIix7cGFyZW50TmFtZToicCJ9KSwiXG4iLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiPGhvc3Q+IiksIiBpdCBnYWlucyBwZXJmb3JtYW5jZSBieSBza2lwcGluZyB2aXJ1dGFsIG5ldHdvcmtzIGJ1dCBzYWNyaWZpY2VzIHNlY3VyaXR5IG9mIGNvbnRhaW5lciBtb2RlbC4gQmFzaWNhbGx5IGl0IGlzIGRpcmVrdCBvbiB0aGUgSG9zdCIsbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIjxub25lPiIpLCIgaXMgbm90IGF0YWNoZWQgdG8gYW55dGhpbmciKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBuZXR3b3JrIGxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjTGlzdCBhbGwgZG9ja2VyIG5ldHdvcmtzXG5kb2NrZXIgbmV0d29yayBpbnNwZWN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2luc3BlY3Qgd2hhdCB3ZSBhcmUgZG9pbmdcbmRvY2tlciBuZXR3b3JrIGNyZWF0ZSAtLWRyaXZlciAgICAgICAgICAgICAgICAgICAgICAjY3JlYXRlIGEgbmV3IG5ldHdvcmtcbmRvY2tlciBuZXR3b3JrIGNvbm5lY3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYXRhY2ggYSBuZXR3b3JrIHRvIGEgY29udGFpbmVyXG5kb2NrZXIgbmV0d29yayBkaXNjb25uZWN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgI2RldGFjaCBhIG5ldHdvcmsgZnJvbSBhIGNvbnRhaW5lclxuIikpLG1keCgicCIsbnVsbCwiQ3JlYXRlIGEgbmV3IE5ldHdvcmsgdXNpbmcgdGhlIGRlZmF1bHQgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIjxicmlkZ2U+IiksIiBkcml2ZXIuIElmIHdlIG5lZWQgYW5vdGhlciBkcml2ZXIsIHdlIGhhdmUgdG8gc3BlY2lmeSBpdCB3aXRoICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCI8LS1kcml2ZXI+IikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiJGRvY2tlciBuZXR3b3JrIGNyZWF0ZSBteV9hcHBfbmV0XkNcbiNsaXN0IHRoZW1cbiRkb2NrZXIgbmV0d29yayBsc1xuTkVUV09SSyBJRCAgICAgICAgICBOQU1FICAgICAgICAgICAgICAgIERSSVZFUiAgICAgICAgICAgICAgU0NPUEVcbjhkMmRjNzM0OGQzZCAgICAgICAgYnJpZGdlICAgICAgICAgICAgICBicmlkZ2UgICAgICAgICAgICAgIGxvY2FsXG45YWZjMmJhNGYyNzggICAgICAgIGhvc3QgICAgICAgICAgICAgICAgaG9zdCAgICAgICAgICAgICAgICBsb2NhbFxuY2QxOGQ3ZjQzMmEzICAgICAgICBteV9hcHBfbmV0ICAgICAgICAgIGJyaWRnZSAgICAgICAgICAgICAgbG9jYWxcbmEwYzg1OTBlNWFjZSAgICAgICAgbm9uZSAgICAgICAgICAgICAgICBudWxsICAgICAgICAgICAgICAgIGxvY2FsXG5cbiRkb2NrZXIgbmV0d29yayBpbnNwZWN0IG15X2FwcF9uZXQgXG5bXG4gICAge1xuICAgICAgICBcIk5hbWVcIjogXCJteV9hcHBfbmV0XCIsXG4gICAgICAgIFwiSWRcIjogXCJjZDE4ZDdmNDMyYTM0YTk3OWU5ZjRhZTgxYjVjMGJlMzg5Y2Q2NTc2MGZlYzQxNjhmMzJjNzc4ZmYwNTU5NGFkXCIsXG4gICAgICAgIFwiQ3JlYXRlZFwiOiBcIjIwMjAtMDgtMjNUMTk6NTk6MTcuNjQ2MDkxOTQ0KzAyOjAwXCIsXG4gICAgICAgIFwiU2NvcGVcIjogXCJsb2NhbFwiLFxuICAgICAgICBcIkRyaXZlclwiOiBcImJyaWRnZVwiLFxuICAgICAgICBcIkVuYWJsZUlQdjZcIjogZmFsc2UsXG4gICAgICAgIFwiSVBBTVwiOiB7XG4gICAgICAgICAgICBcIkRyaXZlclwiOiBcImRlZmF1bHRcIixcbiAgICAgICAgICAgIFwiT3B0aW9uc1wiOiB7fSxcbiAgICAgICAgICAgIFwiQ29uZmlnXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiU3VibmV0XCI6IFwiMTcyLjE4LjAuMC8xNlwiLFxuICAgICAgICAgICAgICAgICAgICBcIkdhdGV3YXlcIjogXCIxNzIuMTguMC4xXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiSW50ZXJuYWxcIjogZmFsc2UsXG4gICAgICAgIFwiQXR0YWNoYWJsZVwiOiBmYWxzZSxcbiAgICAgICAgXCJJbmdyZXNzXCI6IGZhbHNlLFxuICAgICAgICBcIkNvbmZpZ0Zyb21cIjoge1xuICAgICAgICAgICAgXCJOZXR3b3JrXCI6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJDb25maWdPbmx5XCI6IGZhbHNlLFxuICAgICAgICBcIkNvbnRhaW5lcnNcIjoge30sXG4gICAgICAgIFwiT3B0aW9uc1wiOiB7fSxcbiAgICAgICAgXCJMYWJlbHNcIjoge31cbiAgICB9XG5dXG4iKSksbWR4KCJwIixudWxsLCJUbyBydW4gIGEgY29udGFpbmVyIG9uIGEgc3BlY2lmaWMgbmV0d29yayB3ZSBjYW4gZG8gdGhpczoiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiRkb2NrZXIgY29udGFpbmVyIHJ1biAtZCAtLW5hbWUgbmV3X25naW54IC0tbmV0d29yayBteV9hcHBfbmV0IG5naW54XG40NDQ4NjllNTdjZmJkNjBkMjM3ZDdjNmU1Y2U3OTJkZmE3ODYyNmQ0MTU0NmU2NTI4YzZjNGI5NDYwYjA1ZTUzXG4iKSksbWR4KCJwIixudWxsLCJJZiB3ZSBpbnNwZWN0IG91ciBuZXR3b3JrLCB3ZSBjYW4gc2VlIHRoaXM6ICIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiJGRvY2tlciBuZXR3b3JrIGluc3BlY3QgbXlfYXBwX25ldCBcbltcbiAgICB7XG4gICAgICAgIFwiTmFtZVwiOiBcIm15X2FwcF9uZXRcIixcbiAgICAgICAgXCJJZFwiOiBcImNkMThkN2Y0MzJhMzRhOTc5ZTlmNGFlODFiNWMwYmUzODljZDY1NzYwZmVjNDE2OGYzMmM3NzhmZjA1NTk0YWRcIixcbiAgICAgICAgXCJDcmVhdGVkXCI6IFwiMjAyMC0wOC0yM1QxOTo1OToxNy42NDYwOTE5NDQrMDI6MDBcIixcbiAgICAgICAgXCJTY29wZVwiOiBcImxvY2FsXCIsXG4gICAgICAgIFwiRHJpdmVyXCI6IFwiYnJpZGdlXCIsXG4gICAgICAgIFwiRW5hYmxlSVB2NlwiOiBmYWxzZSxcbiAgICAgICAgXCJJUEFNXCI6IHtcbiAgICAgICAgICAgIFwiRHJpdmVyXCI6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgICAgXCJPcHRpb25zXCI6IHt9LFxuICAgICAgICAgICAgXCJDb25maWdcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJTdWJuZXRcIjogXCIxNzIuMTguMC4wLzE2XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiR2F0ZXdheVwiOiBcIjE3Mi4xOC4wLjFcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJJbnRlcm5hbFwiOiBmYWxzZSxcbiAgICAgICAgXCJBdHRhY2hhYmxlXCI6IGZhbHNlLFxuICAgICAgICBcIkluZ3Jlc3NcIjogZmFsc2UsXG4gICAgICAgIFwiQ29uZmlnRnJvbVwiOiB7XG4gICAgICAgICAgICBcIk5ldHdvcmtcIjogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBcIkNvbmZpZ09ubHlcIjogZmFsc2UsXG4gICAgICAgIFwiQ29udGFpbmVyc1wiOiB7XG4gICAgICAgICAgICBcIjQ0NDg2OWU1N2NmYmQ2MGQyMzdkN2M2ZTVjZTc5MmRmYTc4NjI2ZDQxNTQ2ZTY1MjhjNmM0Yjk0NjBiMDVlNTNcIjoge1xuICAgICAgICAgICAgICAgIFwiTmFtZVwiOiBcIm5ld19uZ2lueFwiLFxuICAgICAgICAgICAgICAgIFwiRW5kcG9pbnRJRFwiOiBcImUzM2UxNDg5ODk5ZGRmY2ZlMzZjYmYwNjQwNjU2MWUzZDJhMTdhZDRhMDNhOTY2ZDY4ZWY5YmQ1MjE5MmU0N2ZcIixcbiAgICAgICAgICAgICAgICBcIk1hY0FkZHJlc3NcIjogXCIwMjo0MjphYzoxMjowMDowMlwiLFxuICAgICAgICAgICAgICAgIFwiSVB2NEFkZHJlc3NcIjogXCIxNzIuMTguMC4yLzE2XCIsXG4gICAgICAgICAgICAgICAgXCJJUHY2QWRkcmVzc1wiOiBcIlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sX19cbiAgICAgICAgXCJPcHRpb25zXCI6IHt9LFxuICAgICAgICBcIkxhYmVsc1wiOiB7fVxuICAgIH1cbl1cbiIpKSxtZHgoInAiLG51bGwsIklmIHdlIHdhbnQgdG8gY29ubmVjdCBhbiBleGlzdGluZyBjb250YWluZXIgdG8gYSBuZXR3b3JrIHdlIGhhdmUgdG8gcnVuIHRoZSBmb2xsb3dpbmcgICIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiZG9ja2VyIG5ldHdvcmsgY29ubmVjdCA8Y29udGFpbmVyaWQ+IDxuZXR3b3JraWQ+XG4iKSksbWR4KCJoMyIseyJpZCI6ImRvY2tlci1uZXR3b3Jrcy1kbnMifSwiRG9ja2VyIE5ldHdvcmtzOiBETlMiKSxtZHgoInAiLG51bGwsIkluIHRoZSB3b3JsZCB3aGVyZSBjb250YWluZXJzIGNoYW5nZXMgZnJvbSBzZWNvbmQgIHRvIHNlY29uZCB3ZSBjYW50IHJlbHkgb24gSVBBZGRyZXNzZXMuIFNpbmNlIGl0cyB0byBkeW5hbWljXG5UaGVyZSBpcyBhIGJ1aWxkIGluIHNvbHV0aW9uIGZvciB0aGlzIGFuZCB0aGF0IGlzICIsbWR4KCJzdHJvbmciLHtwYXJlbnROYW1lOiJwIn0sIkROUy1OYW1pbmciKSksbWR4KCJoNCIseyJpZCI6InRsZGwifSwiVEw7REwiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBjb250YWluZXIgcnVuIC1kIC0tbmFtZSBteV9jb250YWluZXJfbmFtZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIGEgY29udGFpbmVyIHdpdGggYSBkbnMtbmFtZSBteV9jb250YWluZXJfbmFtZVxuZG9ja2VyIHJ1biAtZCAtLW5ldHdvcmstYWxpYXMgc2VhcmNoIC0tcm0gLS1uYW1lIGVsYXN0aWNfMyAtLW5ldHdvcmsgbXlfYXBwX25ldHdvcmsgZWxhc3RpY3NlYXJjaDoyICNydW4gY29udGFpbmVyIGluIG5ldHdvcmsgbXlfYXBwX25ldHdvcmsgd2l0aCB0aGUgbmV0d29yayBhbGlhcyAnc2VhcmNoJ1xuZG9ja2VyIGNvbnRhaW5lciBydW4gLWQgLS1uYW1lIG15X2NvbnRhaW5lcl9uYW1lIFxuIikpLG1keCgicCIsbnVsbCwiU2luY2Ugd2UgY2FudCBoYXZlIGEgY29udGFpbmVyIHdpdGggYSBzYW1lIG5hbWUsIGRvY2tlciBicmluZ3MgdXAgRE5TLXJlc29sdmluZyB3aXRoIGl0LiBXaXRoIHRoZSBPcHRpb24gIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIi0tbmV0LWFsaWFzIiksIiBvciAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiLS1uZXR3b3JrLWFsaWFzIiksbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIiwiVGhlIGZvbGxvd2luZyBjb21tYW5kcyB3aWxsIGZpcmUgdXAgdHdvIGVsYXN0aWNzZWFyY2ggY29udGFpbmVycyB3aXRoIHRoZSBuZXR3b3JrLW5hbWUgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInNlYXJjaCIpLCIgYW5kIGRpZmZlcmVudCBjb250YWluZXIgbmFtZXMgb24gdGhlIGRvY2tlciBuZXR3b3JrICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJteV9hcHBfbmV0d29yayIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBydW4gLWQgLS1uZXR3b3JrLWFsaWFzIHNlYXJjaCAtLXJtIC0tbmFtZSBlbGFzdGljXzMgLS1uZXR3b3JrIG15X2FwcF9uZXR3b3JrIGVsYXN0aWNzZWFyY2g6MlxuZG9ja2VyIHJ1biAtZCAtLW5ldHdvcmstYWxpYXMgc2VhcmNoIC0tcm0gLS1uYW1lIGVsYXN0aWNfNCAtLW5ldHdvcmsgbXlfYXBwX25ldHdvcmsgZWxhc3RpY3NlYXJjaDoyXG4iKSksbWR4KCJwIixudWxsLCJJZiB3ZSBoYXZlIGEgbG9vayBhbmQgY3VybCBub3cgdGhlIGRlZmF1bHQgZWxhc3RpY3NlYXJjaCBwb3J0ICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCI5MjAwIiksIiB3ZSBjYW4gY2hlY2sgdGhhdCB0aGUgRE5TLVJvdW5kLVJvYmluIHdvcmtzIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIkZG9ja2VyIGNvbnRhaW5lciBydW4gLS1ybSAtdGkgLS1uZXR3b3JrIG15X2FwcF9uZXR3b3JrIGNlbnRvcyBjdXJsIC1zIHNlYXJjaDo5MjAwXG57XG4gIFwibmFtZVwiIDogXCJUdXJuZXIgRC4gQ2VudHVyeVwiLFxuICBcImNsdXN0ZXJfbmFtZVwiIDogXCJlbGFzdGljc2VhcmNoXCIsXG4gIFwiY2x1c3Rlcl91dWlkXCIgOiBcIkJzZnBJZF9vU0M2SkJkUDdFdmRKaVFcIixcbiAgXCJ2ZXJzaW9uXCIgOiB7XG4gICAgXCJudW1iZXJcIiA6IFwiMi40LjZcIixcbiAgICBcImJ1aWxkX2hhc2hcIiA6IFwiNTM3NmRjYTlmNzBmM2FiZWY5NmE3N2Y0YmIyMjcyMGFjZTgyNDBmZFwiLFxuICAgIFwiYnVpbGRfdGltZXN0YW1wXCIgOiBcIjIwMTctMDctMThUMTI6MTc6NDRaXCIsXG4gICAgXCJidWlsZF9zbmFwc2hvdFwiIDogZmFsc2UsXG4gICAgXCJsdWNlbmVfdmVyc2lvblwiIDogXCI1LjUuNFwiXG4gIH0sXG4gIFwidGFnbGluZVwiIDogXCJZb3UgS25vdywgZm9yIFNlYXJjaFwiXG59XG4kZG9ja2VyIGNvbnRhaW5lciBydW4gLS1ybSAtdGkgLS1uZXR3b3JrIG15X2FwcF9uZXR3b3JrIGNlbnRvcyBjdXJsIC1zIHNlYXJjaDo5MjAwXG57XG4gIFwibmFtZVwiIDogXCJUeWdhXCIsXG4gIFwiY2x1c3Rlcl9uYW1lXCIgOiBcImVsYXN0aWNzZWFyY2hcIixcbiAgXCJjbHVzdGVyX3V1aWRcIiA6IFwiUE41TE45OXZTeVN2eXVOWDFjc2t0Z1wiLFxuICBcInZlcnNpb25cIiA6IHtcbiAgICBcIm51bWJlclwiIDogXCIyLjQuNlwiLFxuICAgIFwiYnVpbGRfaGFzaFwiIDogXCI1Mzc2ZGNhOWY3MGYzYWJlZjk2YTc3ZjRiYjIyNzIwYWNlODI0MGZkXCIsXG4gICAgXCJidWlsZF90aW1lc3RhbXBcIiA6IFwiMjAxNy0wNy0xOFQxMjoxNzo0NFpcIixcbiAgICBcImJ1aWxkX3NuYXBzaG90XCIgOiBmYWxzZSxcbiAgICBcImx1Y2VuZV92ZXJzaW9uXCIgOiBcIjUuNS40XCJcbiAgfSxcbiAgXCJ0YWdsaW5lXCIgOiBcIllvdSBLbm93LCBmb3IgU2VhcmNoXCJcbn1cbiIpKSxtZHgoImgyIix7ImlkIjoiZG9ja2VyLWltYWdlcyJ9LCJEb2NrZXIgSW1hZ2VzIiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQXBwIGJpbmFyaWVzIGFuZCBkZXBlbmRlbmNpZXMgIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIk1ldGFkYXRhIGFib3V0IHRoZSBpbWFnZSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJOb3QgYSBjb21wbGV0ZSBPUy4gTm8ga2VybmVsLCBrZXJuZWwgbW9kdWxlcyAoZS5nLiBkcml2ZXJzKSIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJBcHAgYXMgYXBhY2hlIikpLG1keCgiaDQiLHsiaWQiOiJ0bHRkIn0sIlRMO1REOyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiZG9ja2VyIHB1bGwgbmdpbnggICAgICAgICAgICAgICAgICAgICAgICAgICAjUHVsbCBsYXRlc3QgbmdpbnggaW1hZ2UgZnJvbSBkZWZhdWx0IHJlcG9zaXRvcnlcbmRvY2tlciBoaXN0b3J5IG5naW54OmxhdGVzdCAgICAgICAgICAgICAgICAgI2NoZWNrIGhpc3Rvcnkgb2YgdGhlIGxhdGVzdCBuZ2lueCBpbWFnZVxuZG9ja2VyIHB1bGwgbmdpbng6MS4xMS45ICAgICAgICAgICAgICAgICAgICAjcHVsbCBzcGVjaWZpYyBpbWFnZSBvZiBuZ2lueFxuZG9ja2VyIGltYWdlIGluc3BlY3QgbmdpbnggICAgICAgICAgICAgICAgICAjaW5zcGVjdCB0aGUgbmdpbnggaW1hZ2UgYW5kIGNoZWNrIGl0cyBtZXRhZGF0YVxuXG5kb2NrZXIgaW1hZ2UgdGFnIG5naW54IGVuZHJpdGRlbWFqL25naW54ICAgICNnaXZlIHRoZSBuZ2lueCBhIG5ldyBUQUdcbiIpKSxtZHgoInAiLG51bGwsInB1bGwgbGF0ZXN0IGltYWdlIG9mICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJuZ2lueCIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiRkb2NrZXIgcHVsbCBuZ2lueFxuVXNpbmcgZGVmYXVsdCB0YWc6IGxhdGVzdFxubGF0ZXN0OiBQdWxsaW5nIGZyb20gbGlicmFyeS9uZ2lueFxuYmY1OTUyOTMwNDQ2OiBBbHJlYWR5IGV4aXN0cyBcbmNiOWE2ZGUwNWU1YTogUHVsbCBjb21wbGV0ZSBcbjk1MTNlYTBhZmI5MzogUHVsbCBjb21wbGV0ZSBcbmI0OWVhMDdkMmU5MzogUHVsbCBjb21wbGV0ZSBcbmE1ZTRhNTAzZDQ0OTogUHVsbCBjb21wbGV0ZSBcbkRpZ2VzdDogc2hhMjU2OmIwYWQ0M2Y3ZWU1ZWRiYzBlZmZiYzE0NjQ1YWU3MDU1ZTIxYmMxOTczYWVlNTE1MDc0NTYzMmEyNGE3NTI2NjFcblN0YXR1czogRG93bmxvYWRlZCBuZXdlciBpbWFnZSBmb3Igbmdpbng6bGF0ZXN0XG5kb2NrZXIuaW8vbGlicmFyeS9uZ2lueDpsYXRlc3RcbiIpKSxtZHgoInAiLG51bGwsInB1bGwgYW5vdGhlciB2ZXJzaW9uIG9mICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJuZ2lueDp0YWciKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJkb2NrZXIgcHVsbCBuZ2lueDoxLjExLjlcbiIpKSxtZHgoInAiLG51bGwsIkNoZWNrIHRoZSBsYXllcnMgb2YgYSBjb250YWluZXIgd2l0aCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiZG9ja2VyIGltYWdlIGhpc3RvcnkiKSwiIG9yICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJkb2NrZXIgaGlzdG9yeSIpLCJcbkV2ZXJ5IGltYWdlIHN0YXJ0cyB3aXRoIGEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInNjcmF0Y2giKSwiIChmaXJzdCBsYXllcikgYW5kIGV2ZXJ5IGNoYW5nZSBvbiB0aGF0IGltYWdlIGlzIGFub3RoZXIgbGF5ZXIiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiRkb2NrZXIgaGlzdG9yeSBuZ2lueDpsYXRlc3RcbklNQUdFICAgICAgICAgICAgICAgQ1JFQVRFRCAgICAgICAgICAgICBDUkVBVEVEIEJZICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVpFICAgICAgICAgICAgICAgIENPTU1FTlRcbjRiYjQ2NTE3Y2FjMyAgICAgICAgMTAgZGF5cyBhZ28gICAgICAgICAvYmluL3NoIC1jICMobm9wKSAgQ01EIFtcIm5naW54XCIgXCItZ1wiIFwiZGFlbW9uXHUyMDI2ICAgMEIgICAgICAgICAgICAgICAgICBcbjxtaXNzaW5nPiAgICAgICAgICAgMTAgZGF5cyBhZ28gICAgICAgICAvYmluL3NoIC1jICMobm9wKSAgU1RPUFNJR05BTCBTSUdURVJNICAgICAgICAgICAwQiAgICAgICAgICAgICAgICAgIFxuPG1pc3Npbmc+ICAgICAgICAgICAxMCBkYXlzIGFnbyAgICAgICAgIC9iaW4vc2ggLWMgIyhub3ApICBFWFBPU0UgODAgICAgICAgICAgICAgICAgICAgIDBCICAgICAgICAgICAgICAgICAgXG48bWlzc2luZz4gICAgICAgICAgIDEwIGRheXMgYWdvICAgICAgICAgL2Jpbi9zaCAtYyAjKG5vcCkgIEVOVFJZUE9JTlQgW1wiL2RvY2tlci1lbnRyXHUyMDI2ICAgMEIgICAgICAgICAgICAgICAgICBcbjxtaXNzaW5nPiAgICAgICAgICAgMTAgZGF5cyBhZ28gICAgICAgICAvYmluL3NoIC1jICMobm9wKSBDT1BZIGZpbGU6MGZkNWZjYTMzMGRjZDZhN1x1MjAyNiAgIDEuMDRrQiAgICAgICAgICAgICAgXG48bWlzc2luZz4gICAgICAgICAgIDEwIGRheXMgYWdvICAgICAgICAgL2Jpbi9zaCAtYyAjKG5vcCkgQ09QWSBmaWxlOjFkMGE0MTI3ZTc4YTI2YzFcdTIwMjYgICAxLjk2a0IgICAgICAgICAgICAgIFxuPG1pc3Npbmc+ICAgICAgICAgICAxMCBkYXlzIGFnbyAgICAgICAgIC9iaW4vc2ggLWMgIyhub3ApIENPUFkgZmlsZTplN2UxODM4NzljMzU3MTljXHUyMDI2ICAgMS4ya0IgICAgICAgICAgICAgICBcbjxtaXNzaW5nPiAgICAgICAgICAgMTAgZGF5cyBhZ28gICAgICAgICAvYmluL3NoIC1jIHNldCAteCAgICAgJiYgYWRkZ3JvdXAgLS1zeXN0ZW0gLVx1MjAyNiAgIDYzLjRNQiAgICAgICAgICAgICAgXG48bWlzc2luZz4gICAgICAgICAgIDEwIGRheXMgYWdvICAgICAgICAgL2Jpbi9zaCAtYyAjKG5vcCkgIEVOViBQS0dfUkVMRUFTRT0xfmJ1c3RlciAgICAgMEIgICAgICAgICAgICAgICAgICBcbjxtaXNzaW5nPiAgICAgICAgICAgMTAgZGF5cyBhZ28gICAgICAgICAvYmluL3NoIC1jICMobm9wKSAgRU5WIE5KU19WRVJTSU9OPTAuNC4zICAgICAgICAwQiAgICAgICAgICAgICAgICAgIFxuPG1pc3Npbmc+ICAgICAgICAgICAxMCBkYXlzIGFnbyAgICAgICAgIC9iaW4vc2ggLWMgIyhub3ApICBFTlYgTkdJTlhfVkVSU0lPTj0xLjE5LjIgICAgIDBCICAgICAgICAgICAgICAgICAgXG48bWlzc2luZz4gICAgICAgICAgIDIgd2Vla3MgYWdvICAgICAgICAgL2Jpbi9zaCAtYyAjKG5vcCkgIExBQkVMIG1haW50YWluZXI9TkdJTlggRG9cdTIwMjYgICAwQiAgICAgICAgICAgICAgICAgIFxuPG1pc3Npbmc+ICAgICAgICAgICAyIHdlZWtzIGFnbyAgICAgICAgIC9iaW4vc2ggLWMgIyhub3ApICBDTUQgW1wiYmFzaFwiXSAgICAgICAgICAgICAgICAgMEIgICAgICAgICAgICAgICAgICBcbjxtaXNzaW5nPiAgICAgICAgICAgMiB3ZWVrcyBhZ28gICAgICAgICAvYmluL3NoIC1jICMobm9wKSBBREQgZmlsZTozYWYzMDkxZTdkMmJiNDBiY1x1MjAyNiAgIDY5LjJNQiAgXG4iKSksbWR4KCJwIixudWxsLCJDaGVjayBhbiBpbWFnZSBhbmQgc2VlIGl0cyBtZXRhZGF0YSB3aXRoIHRoZSBmb2xsb3dpbmcgY29tbWFuZCB0byBzZWUgZS5nLiB3aGljaCBwb3J0cyB3ZSBoYXZlIHRvIG9wZW4gdXAgb24gb3VyIGhvc3QgZm9yIHRoZSBjcmVhdGVkIGNvbnRhaW5lci5cbkNoZWNrIGVudi4gdmFyaWFibGVzLCBvciBuZ2lueCB2ZXJzaW9uLCBhdXRob3IgYW5kIHNvIG9uLiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiZG9ja2VyIGltYWdlIGluc3BlY3QgbmdpbnhcbiIpKSxtZHgoInAiLG51bGwsIlRvIGdpdmUgYW4gaW1hZ2UgYSBuZXcgdGFnIHdlIGhpdC4gSWYgd2UgZG9uJ3Qgc3BlY2lmeSAgYSBUQUcgaXQgZGVmYXVsdHMgdG8gbGF0ZXN0LiBMYXRlc3QgaXMgYSBkZWZhdWx0IFRBRyBhbmQgbm90IHRoZSBsYXRlc3QgaW1hZ2UiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBpbWFnZSB0YWcgbmdpbnggZW5kcml0ZGVtYWovbmdpbnhcbiIpKSxtZHgoInAiLG51bGwsIldpdGggdGhlIGZvbGxvd2luZyBjb21tYW5kIHdlIHB1c2ggdGhlIG5ldyBpbWFnZSB0byB0aGUgZGVmYXVsdCByZWdpc3RyeSAoZG9ja2VyIGh1YikiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBpbWFnZSBwdXNoIGVuZHJpdGRlbWFqL25naW54XG4iKSksbWR4KCJwIixudWxsLCJTZWUgZXhhbXBsZSBoZXJlOiAiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiRkb2NrZXIgaW1hZ2UgdGFnIG5naW54IGVuZHJpdGRlbWFqL25naW54XG4kZG9ja2VyIGltYWdlIGxzXG5SRVBPU0lUT1JZICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRBRyAgICAgICAgICAgICAgICAgSU1BR0UgSUQgICAgICAgICAgICBDUkVBVEVEICAgICAgICAgICAgIFNJWkVcbmVuZHJpdGRlbWFqL25naW54ICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0ICAgICAgICAgICAgICA0YmI0NjUxN2NhYzMgICAgICAgIDEwIGRheXMgYWdvICAgICAgICAgMTMzTUJcbm5naW54ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0ICAgICAgICAgICAgICA0YmI0NjUxN2NhYzMgICAgICAgIDEwIGRheXMgYWdvICAgICAgICAgMTMzTUJcblxuJGRvY2tlciBpbWFnZSBwdXNoIGVuZHJpdGRlbWFqL25naW54XG5UaGUgcHVzaCByZWZlcnMgdG8gcmVwb3NpdG9yeSBbZG9ja2VyLmlvL2VuZHJpdGRlbWFqL25naW54XVxuNTUwMzMzMzI1ZTMxOiBQcmVwYXJpbmcgXG4yMmVhODliMWE4MTY6IFByZXBhcmluZyBcbmE0ZDg5M2NhYTVjOTogUHJlcGFyaW5nIFxuMDMzOGRiNjE0Yjk1OiBQcmVwYXJpbmcgXG5kMGYxMDRkYzBhMWY6IFByZXBhcmluZyBcbmRlbmllZDogcmVxdWVzdGVkIGFjY2VzcyB0byB0aGUgcmVzb3VyY2UgaXMgZGVuaWVkXG4iKSksbWR4KCJwIixudWxsLCJJIGNhbiBjcmVhdGUgbmV3IFRhZ3MgYXMgd2Ugd2FudCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiJGRvY2tlciBpbWFnZSB0YWcgZW5kcml0ZGVtYWovbmdpbng6bGF0ZXN0IGVuZHJpdGRlbWFqL25naW54OnRlc3RpbmdcbiRkb2NrZXIgaW1hZ2UgbHNcblJFUE9TSVRPUlkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVEFHICAgICAgICAgICAgICAgICBJTUFHRSBJRCAgICAgICAgICAgIENSRUFURUQgICAgICAgICAgICAgU0laRVxubmdpbnggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3QgICAgICAgICAgICAgIDRiYjQ2NTE3Y2FjMyAgICAgICAgMTAgZGF5cyBhZ28gICAgICAgICAxMzNNQlxuZW5kcml0ZGVtYWovbmdpbnggICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRlc3QgICAgICAgICAgICAgIDRiYjQ2NTE3Y2FjMyAgICAgICAgMTAgZGF5cyBhZ28gICAgICAgICAxMzNNQlxuZW5kcml0ZGVtYWovbmdpbnggICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0aW5nICAgICAgICAgICAgIDRiYjQ2NTE3Y2FjMyAgICAgICAgMTAgZGF5cyBhZ28gICAgICAgICAxMzNNQlxuIikpLG1keCgicCIsbnVsbCwiSWYgeW91IHdhbnQgdG8gY3JlYXRlIGFuIEltYWdlIG9mIGEgcnVubmluZyBjb250YWluZXIgeW91IGRvIHRoZSBmb2xsb3dpbmc6IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJkb2NrZXIgY29tbWl0IDxjb250YWluZXJpZD5cbiNGaW5kIGluIGRvY2tlciBpbWFnZSBscyB0aGUgbmV3IGltYWdlXG5kb2NrZXIgaW1hZ2UgdGFnIDxpbWFnZWlkPiByZXBvOnRhZ1xuZG9ja2VyIGltYWdlIHB1c2ggcmVwbzp0YWcgICAgICAgICAgICAgICAgICAgICAgI3RvIHB1c2ggdGhlIGltYWdlIHRvIHRoZSByZXBvXG4iKSksbWR4KCJoMyIseyJpZCI6ImRvY2tlcmZpbGUifSwiRG9ja2VyZmlsZSIpLG1keCgicCIsbnVsbCwiVGhlIGluc3RydWN0aW9ucyBvbiBob3cgdG8gYnVpbGQgYW4gSW1hZ2UgYXJlIHN0b3JlZCBpbiBhIERvY2tlcmZpbGUgICIpLG1keCgicCIsbnVsbCwiUGFja2FnZSBNYW5hZ2VyIGxpa2UgYXB0IGFuZCB5dW0gYXJlIG9uZSBvZiB0aGUgcmVhc29ucyB0byBidWlsZCBjb250YWluZXIgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIkZST00gRGViaWFuLCBVYnVudHUsIEZlZG9yYSBvciBDZW50T1MiKSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJkb2NrZXIgYnVpbGQgLWYgc29tZS1kb2NrZXJmaWxlICAgICAgICAgICAgICAgICAgICAgICAgICN0byBidWlsZCBmcm9tIGEgc3BlY2lmaWMgZG9ja2VyZmlsZSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0XG4iKSksbWR4KCJwIixudWxsLCJXaGVuIHdlIGJ1aWxkIGFuIEltYWdlLCBpdCBwdWxscyB0aGUgZGViaWFuOmplc3NpZSBpbWFnZSB0byB0aGUgbG9jYWwgRG9ja2VyIEhvc3QgZnJvbSBkb2NrZXIgaHViLiBUaGVuIGVhY2ggbGluZSBpcyBnb2luZyB0byBiZSBleGVjdXRlZCBhbmQgY2FjaGVkIGxheWVyIGJ5IGxheWVyIG9uIHRoZSBkb2NrZXIgZW5naW5lXG5FYWNoIENvbW1hbmQgaW4gYSBEb2NrZXJmaWxlIGlzIGEgbmV3IEltYWdlIExheWVyIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJGUk9NIGRlYmlhbjpqZXNzaWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN1c2UgYWx3YXlzIGEgbWluaW11bSBkaXN0cmlidXRpb25cbkVOViBOR0lOWF9WRVJTSU9OIDEuMTEuMTAtMX5qZXNzaWUgICAgICAgICAgICAgICAgICAgICAgI0VuaXJvbm1lbnQgdmFyaWFibGVzIHdoaWNoIGFyZSB2ZXJ5IGltcG9ydGFudCBmb3IgY29udGFpbmVycyBzaW5jZSBhbGwgdGhlIGluZm8gaXMgdGhlcmVcblJVTiBhcHQta2V5Li4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3J1bnMgY29tbWFuZCBlLmcgdW56aXBwaW5nLCBpbnN0YWxsIHNvbWV0aGluZyBvciBzbyBvbi5cbiIpKSxtZHgoInAiLG51bGwsIkl0IGlzIHVzdWFsIHRoYXQgY29tbWFuZHMgZ2V0IGJyb3VnaHQgdG9nZXRoZXIgd2l0aCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiJiYiKSwiIGJlY2F1c2UgZWFjaCBjb21tYW5kIGlzIGEgbmV3IGxheWVyIHRvIHNhY2Ugc3BhY2UgYW5kIHRpbWUiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIlJVTiBhcHQtZ2V0IHVwZGF0ZSBcXFxuICAgICYmIGFwdC1nZXQgaW5zdGFsbCAtLW5vLWluc3RhbGwtcmVjb21tZW5kcyAteSBcXFxuICAgICAgICBjYS1jZXJ0aWZpY2F0ZXNcbiIpKSxtZHgoInAiLG51bGwsIkxvZ2dpbiBpbiBEb2NrZXIgaXMgbWFuYWdlZCBieSBEb2NrZXIgaXRzZWxmIHdlIGhhdmUgdG8gbW92ZSB0aGUgbG9nZ2luZyB0byBzdGRvdXQuIEV2ZXJ5dGhpbmcgdGhhdCB3ZSB3YW50IHRvIGxvZyBoYXMgdG8gYmUgbW92ZWQgdGhlcmUiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIlJVTiBsbiAtc2YgL2Rldi9zdGRvdXQgL3Zhci9sb2cvbmdpbngvYWNjZXNzLmxvZyBcXFxuICAgICYmIGxuIC1zZiAvZGV2L3N0ZGVyciAvdmFyL2xvZy9uZ2lueC9lcnJvci5sb2dcbiIpKSxtZHgoInAiLG51bGwsIkV4cG9yc2UgYSBwb3J0IG9uIHRoZSBkb2NrZXIgdmlydWFsIG5ldHdvcmsuIFRoZSBwb3J0cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgZXhwb3NlZCBvbiB0aGUgaG9zdC4gVGhhdHMgd2h5IHdlIG5lZWQgdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCItLXAiKSwiIGluICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJkb2NrZXIgcnVuIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiRVhQT1NFIDgwIDQ0M1xuIikpLG1keCgicCIsbnVsbCwiVGhpcyBjb21tYW5kIGlzIGxhdW5jaGVkIGV2ZXJ5IHRpbWUgd2Ugc3RhcnQgYSBuZXcgY29udGFpbmVyIG9yIHdoZW4gd2UgcmVzdGFydCBhIGNvbnRhaW5lciIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiQ01EIFtcIm5naW54XCIsIFwiLWdcIiwgXCJkZWFtb24gb2ZmO1wiXVxuIikpLG1keCgicCIsbnVsbCwiVGhlIGZvbGxvd2luZyBjb21tYW5kIGJ1aWxkcyBhbGwgZG9ja2VyZmlsZXMgaW4gdGhlIGN1cnJlbnQgZGlyZWN0b3J5IHdoZXJlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJjdXN0b21uZ2lueCIpLCIgaXMgdGhlIGltYWdlIG5hbWUiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBpbWFnZSBidWlsZCAtdCBjdXN0b21uZ2lueCAuXG4iKSksbWR4KCJwIixudWxsLCJUaGUgaGFzaCBhdCB0aGUgbGluZSBjYWNoZWQgdGhlIGNoYW5nZXMgdG8gdGhhdCBsaW5lIHNvIGlmIG5vdGhpbmcgY2hhbmdlcyB0aWwgdGhhdCBsaW5lIGRvY2tlciBkb2VzbnQgcmVidWlsZCBpdC4gSXQgaXMgdmVyeSBpbXBvcnQgdGhhdCB0aGUgdGhpbmdzIHRoYXRcbmNoYW5nZSB0aGUgbGVhc3QgYXJlIG9uIHRoZSB0b3Agb2YgdGhlIGZpbGUgYW5kIGF0IHRoZSBidXR0b24gdGhlIHN0dWZmIHRoYXQgY2hhbmdlcyBtb3N0IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIkZG9ja2VyIGltYWdlIGJ1aWxkIC10IGN1c3RvbW5naW54IC5cblNlbmRpbmcgYnVpbGQgY29udGV4dCB0byBEb2NrZXIgZGFlbW9uICAgMTYuOWtCXG5TdGVwIDEvNyA6IEZST00gZGViaWFuOnN0cmV0Y2gtc2xpbVxuc3RyZXRjaC1zbGltOiBQdWxsaW5nIGZyb20gbGlicmFyeS9kZWJpYW5cbjc1Y2IyZWJmM2IzYzogUHVsbCBjb21wbGV0ZSBcbkRpZ2VzdDogc2hhMjU2OmM0MDUyYjUxNTg4ZmMzMmZlMGMyNWE5ODRhMzRjYWQ1ZGM1OTkwYjljMTI3NDQwNzNhOWM0MDlhNmQwNzM3Y2ZcblN0YXR1czogRG93bmxvYWRlZCBuZXdlciBpbWFnZSBmb3IgZGViaWFuOnN0cmV0Y2gtc2xpbVxuIC0tLT4gOGZmNzQ4Y2RkNmIxXG5TdGVwIDIvNyA6IEVOViBOR0lOWF9WRVJTSU9OIDEuMTMuNi0xfnN0cmV0Y2hcbiAtLS0+IFJ1bm5pbmcgaW4gMzBjOTliMDkzYzAyXG5SZW1vdmluZyBpbnRlcm1lZGlhdGUgY29udGFpbmVyIDMwYzk5YjA5M2MwMlxuIC0tLT4gMDNlY2JkNWVjM2NjXG5TdGVwIDMvNyA6IEVOViBOSlNfVkVSU0lPTiAgIDEuMTMuNi4wLjEuMTQtMX5zdHJldGNoXG4gLS0tPiBSdW5uaW5nIGluIGRmMzI4MmRmYTE1MlxuUmVtb3ZpbmcgaW50ZXJtZWRpYXRlIGNvbnRhaW5lciBkZjMyODJkZmExNTJcbiAtLS0+IGI0YjRkZjQyODEzNlxuU3RlcCA0LzcgOiBSVU4gYXB0LWdldCB1cGRhdGUgICAmJiBhcHQtZ2V0IGluc3RhbGwgLS1uby1pbnN0YWxsLXJlY29tbWVuZHMgLS1uby1pbnN0YWxsLXN1Z2dlc3RzIC15IGdudXBnMSAgJiYgIFxuLlxuLlxuLlxuIC0tLT4gVXNpbmcgY2FjaGVcbiAtLS0+IDcxM2JjY2U0ODMzNFxuU3RlcCA2LzcgOiBFWFBPU0UgODAgNDQzXG4gLS0tPiBVc2luZyBjYWNoZVxuIC0tLT4gNzI3MDY2MWExNmQwXG5TdGVwIDcvNyA6IENNRCBbXCJuZ2lueFwiLCBcIi1nXCIsIFwiZGFlbW9uIG9mZjtcIl1cbiAtLS0+IFVzaW5nIGNhY2hlXG4gLS0tPiBlZjQ0NmE1NTM0N2VcblN1Y2Nlc3NmdWxseSBidWlsdCBlZjQ0NmE1NTM0N2VcblN1Y2Nlc3NmdWxseSB0YWdnZWQgY3VzdG9tbmdpbng6bGF0ZXN0XG4kZG9ja2VyIGltYWdlIGxzXG5SRVBPU0lUT1JZICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRBRyAgICAgICAgICAgICAgICAgSU1BR0UgSUQgICAgICAgICAgICBDUkVBVEVEICAgICAgICAgICAgIFNJWkVcbmN1c3RvbW5naW54ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0ZXN0ICAgICAgICAgICAgICBlZjQ0NmE1NTM0N2UgICAgICAgIDIgbWludXRlcyBhZ28gICAgICAgMTA4TUJcbiIpKSxtZHgoInAiLG51bGwsIlVzZSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiV09SS0RJUiIpLCIgdG8gY2hhbmdlIGRpcmVjdG9yeS4gVGhpcyBpcyBiZXN0IHByYXRpY2UuIFNlZSBleGFtcGxlIGJlbG93IHdoZXJlIHdlIGNvcHkgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImluZGV4Lmh0bWwiKSwiIHRvIHRoZSBkb2NrZXIgaW1hZ2UiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiRsbFxudG90YWwgMTZcbmRyd3hyLXhyLXggIDIgZW5kcml0IHJvb3QgNDA5NiBBdWcgMjIgMjE6MjQgLi9cbmRyd3hyLXhyLXggMzIgZW5kcml0IHJvb3QgNDA5NiBBdWcgMjIgMjE6MjQgLi4vXG4tcnctci0tci0tICAxIGVuZHJpdCByb290ICA0MTAgQXVnIDIyIDIxOjI0IERvY2tlcmZpbGVcbi1ydy1yLS1yLS0gIDEgZW5kcml0IHJvb3QgIDI0OSBBdWcgMjIgMjE6MjQgaW5kZXguaHRtbFxuJGNhdCBEb2NrZXJmaWxlXG5GUk9NIG5naW54OmxhdGVzdFxuV09SS0RJUiAvdXNyL3NoYXJlL25naW54L2h0bWxcbkNPUFkgaW5kZXguaHRtbCBpbmRleC5odG1sXG4iKSksbWR4KCJwIixudWxsLCJ3ZSBjYW4gdXNlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJwcnVuZSIpLCIgdG8gY2xlYW4gdXAgaW1hZ2VzLCB2b2x1bWVzLCBidWlsZCBjYWNoZSBhbmQgY29udGFpbmVycyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiZG9ja2VyIGltYWdlIHBydW5lICAgICAgICAgICAgICAgICAgI3RvIGNsZWFuIHVwIGp1c3QgZGFuZ2xpbmcgaW1hZ2VzXG5kb2NrZXIgc3lzdGVtIHBydW5lICAgICAgICAgICAgICAgICAjd2lsbCBjbGVhbiB1cCBldmVyeXRoaW5nXG5cbmRvY2tlciBpbWFnZSBwcnVuZSAtYSAgICAgICAgICAgICAgICN3aWxsIHJlbW92ZSBhbGwgaW1hZ2VzIHRoYXQgYXJlIG5vdCB1c2VkXG5kb2NrZXIgc3lzdGVtIGRmICAgICAgICAgICAgICAgICAgICAjdG8gc2VlIHNwYWNlIHVzYWdlXG4iKSksbWR4KCJoMiIseyJpZCI6ImNvbnRhaW5lci1saWZldGltZS0tcGVyc2lzdGVudC1kYXRhIn0sIkNvbnRhaW5lciBMaWZldGltZSAmIFBlcnNpc3RlbnQgRGF0YSIpLG1keCgicCIsbnVsbCwiVm9sdW1lIGluIERvY2tlcmZpbGUiKSxtZHgoInAiLG51bGwsIkFueSBmaWxlIHRoYXQgaXMgcHV0IGluIHRoZSBWb2x1bWUgd2lsbCBvdXRsaXZlIHRoZSBjb250aWFuZXIgdW50aWwgd2UgZGVsZXRlIHRoZSB2b2x1bWUuIFRoZXkgbmVlZHMgdG8gYmUgbWFudWFsbHkgZGVsZXRlZC4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIlZPTFVNRSAvdmFyL2xpYi9teXNxbCAgICAgICAgICAgICAgICAgICAgICAgICAgICNDcmVhdGVzIGEgbmV3IG5hbWVkIFZvbHVtZSBvbiB0aGUgaG9zdCBpbiAnZG9ja2VyZGlyJy9zb21laGFzaC8nX2RhdGEgYW5kIG9uIHRoZSBjb250YWluZXIgdW5kZXIgL3Zhci9saWIvbXlzcWxcblxuZG9ja2VyIGluc3BlY3QgPGNvbnRhaW5lcj4gICAgICAgICAgICAgICAgICAgICAgI3VuZGVyIFZvbHVtZXMgd2UgY2FuIHNlZSB0aGUgVm9sdW1lcyBhbmQgdW5kZXIgTW91bnRzIHdlIGNhbiBzZWUgdGhlIG1hcHBpbmcgZnJvbSB0aGUgSG9zdChTb3VyY2UpIHRvIHRoZSBDb250YWluZXIoRGVzdGluYXRpb24pXG5cbmRvY2tlciBjb250YWluZXIgcnVuIC1kIG15c3FsIC12IGZyaWVuZGx5bmFtZTovdmFyL2xpYi9zcWwgICAgICAgICAgI0NyZWF0ZXMgYSB2b2x1bWUgd2l0aCBhIGZyaWVuZGx5IG5hbWUgb24gdGhlIEhvc3QgYW5kIG9uIHRoZSBDb250YWluZXJcbmRvY2tlciB2b2x1bWVzIGxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayBtb3VudGVkIHZvbHVtZXMgYW5kIHdpdGggaW5zcGVjdCB0byBjaGVjayB0aGUgbW91bnRzXG5cbmRvY2tlciB2b2x1bWUgY3JlYXRlICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjcmVhdGUgYSBuZXcgRG9ja2VyIFZvbHVtZSBhaGVhZCBvZiB0aGUgVGltZVxuIikpLG1keCgiaDMiLHsiaWQiOiJiaW5kLW1vdW50aW5nIn0sIkJpbmQgTW91bnRpbmciKSxtZHgoInAiLG51bGwsIk1hcHMgYSBob3N0IGZpbGUgb3IgZGlyZWN0b3J5IHRvIGEgY29udGFpbmVyIGZpbGUgb3IgZGlyZWN0b3J5LiBUd28gbG9jYXRpb25zIHBvaW50aW5nIHRvIHRoZSBzYW1lIGZpbGVzLlxuSGFzIHRvIGJlIGRvbmUgaW4gY29udGFpbmVyIHJ1biwgY2FudCBiZSBkb25lIGluIERvY2tlcmZpbGUiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIi4uLiBydW4gLXYgL2hvbWUvZW5kcml0L3N0dWZmOi9wYXRoL2NvbnRhaW5lclxuIikpLG1keCgicCIsbnVsbCwiRm9yIEV4YW1wbGUgaSBzdGFydCBoZXJlIGEgUG9zdGdyZXMgZGIiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBydW4gLWQgLS1uYW1lIHBnZGI5NjIgLXYgcGdkYXRhOi92YXIvbGliL3Bvc3RncmVzcWwvZGF0YSAtZSBQT1NUR1JFU19QQVNTV09SRD15b3VyUFcgLWQgcG9zdGdyZXM6OS42LjJcbiIpKSxtZHgoImgyIix7ImlkIjoiZG9ja2VyLWNvbXBvc2UifSwiRG9ja2VyIENvbXBvc2UiKSxtZHgoInAiLG51bGwsIkNvbmZpZ3VyZSByZWxhdGlvbnNoaXBzIGJldHdlZW4gY29udGFpbmVyc1xuc2F2ZSBvdXIgZG9ja2VyIGNvbnRhaW5lciBydW4gc2V0dGluZ3MgaW4gZWFzeS10by1yZWFkIGZpbGVcbmNyZWF0ZSBvbmUtbGluZXIgZGV2ZWxvcGVyIGVudmlyb25tZW50IHN0YXJ0dXBzIiksbWR4KCJvbCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiWUFNTC1Gb3JtYXR0ZWQgZmlsZSB0aGF0IGRlc2NyaWJlcyBvdXIgc29sdXRpb24gb3B0aW9ucyBmb3IgOiIsbWR4KCJ1bCIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sImNvbnRhaW5lciIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJuZXR3b3JrcyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJ2b2x1bWVzIikpKSxtZHgoImxpIix7cGFyZW50TmFtZToib2wifSwiQSBDTEkgdG9vbCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sImRvY2tlci1jb21wb3NlIiksIiB1c2VkIGZvciBsb2NhbCBkZXYvdGVzdCBhdXRvbWF0aW9uIHdpdGggdGhvc2UgWUFNTCBmaWxlcyIpKSxtZHgoImgzIix7ImlkIjoiZG9ja2VyLWNvbXBvc2V5bWwifSwiZG9ja2VyLWNvbXBvc2UueW1sIiksbWR4KCJwIixudWxsLCJIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiZG9ja2VyLWNvbXBvc2UueW1sIikpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwidmVyc2lvbjogJzInXG5cbiMgc2FtZSBhc1xuIyBkb2NrZXIgcnVuIC1wIDgwOjgwIC12ICQocHdkKTovdG1wIG5naW54XG5cbnNlcnZpY2VzOlxuICAgIG5naW54OlxuICAgICAgICBpbWFnZTpuZ2lueFxuICAgICAgICB2b2x1bWVzOlxuICAgICAgICAgICAgLS46dG1wXG4gICAgICAgIHBvcnRzOlxuICAgICAgICAgICAgLSAnODA6ODAnXG4iKSksbWR4KCJoMiIseyJpZCI6ImRvY2tlci1jb21wb3NlLWNsaSJ9LCJkb2NrZXItY29tcG9zZSBDTEkiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlci1jb21wb3NlIHVwICAgICAgICAgICAgICAgIyBzZXR1cCB2b2x1bWVzL25ldHdvcmtzIGFuZCBzdGFydCBhbGwgY29udGFpbmVyc1xuZG9ja2VyLWNvbXBvc2UgZG93biAgICAgICAgICAgICAjIHN0b3AgYWxsIGNvbnRhaW5lcnMgYW5kIHJlbW92ZSBjb250L3ZvbC9uZXRcblxuZG9ja2VyLWNvbXBvc2UgcHMgICAgICAgICAgICAgICAjc2hvd3MgcnVubmluZyBjb250YWluZXJzXG5kb2NrZXItY29tcG9zZSBsb2dzICAgICAgICAgICAgICNzaG93IGxvZ3Mgb2YgdGhlIGNvbnRhaW5lcnMgXG4iKSksbWR4KCJwIixudWxsLCJpZiBhbGwgeW91ciBwcm9qZWN0IGhhZCBhIERvY2tlcmZpbGUgYW5kIGRvY2tlci1jb21wb3NlLnltbCB0aGVuIGEgXCJuZXcgZGV2ZWxvcGVyIG9uYm9hcmRuaW5nXCIgd291bGQgYmU6XG5naXQgY2xvbmUgZ2l0aHViLmNvbS9zb21lL3NvZnR3YXJlXG5kb2NrZXItY29tcG9zZSB1cCIpLG1keCgicCIsbnVsbCwiRmlyc3QgZG9ja2VyLWNvbXBvc2UueW1sXG5JZiB3ZSBjaGFuZ2UgdGhlIG5hbWUgdGhhbiB3ZSBoYXZlIHRvIGdpdmUgaXQgd2l0aCBhIHBhcmFtZXRlciB0byB0aGUgZmlsZVxuVGhpcyBjb2RlIHN0YXJ0cyB1cCBhICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJkcnVwYWwiKSwiIGNvbnRhaW5lciB3aXRoIGEgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sInBvc3RncmVzIiksIiBkYXRhYmFzZS4gUmVtZW1iZXIgdGhhdCB0aGUgZGVmYXVsdCBob3N0IGZvciBwb3N0Z3Jlc3MgaXMgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImxvY2FsaG9zIiksIiBidXQgb3V0c2lkZSBvZiB0aGUgY29udGFpbmVyIGl0cyB0aGUgc2VydmljZSBuYW1lIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJ2ZXJzaW9uOiAnMidcbnNlcnZpY2VzOlxuICBkcnVwYWw6XG4gICAgaW1hZ2U6IGRydXBhbFxuICAgIHBvcnRzOlxuICAgIC0gXCI4MDgwOjgwXCJcbiAgICB2b2x1bWVzOlxuICAgIC0gZHJ1cGFsLXByb2ZpbGVzOi92YXIvd3d3L2h0bWwvcHJvZmlsZXNcbiAgICAtIGRydXBhbC1zaXRlczovdmFyL3d3dy9odG1sL3NpdGVzIFxuICAgIC0gZHJ1cGFsLXRoZW1lczovdmFyL3d3dy9odG1sL3RoZW1lcyBcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgICAgUE9TVEdSRVNfUEFTU1dPUkQ6IGV4YW1wbGVcbiAgICBsaW5rczpcbiAgICAtIHBvc3RncmVzMlxuXG4gIHBvc3RncmVzMjpcbiAgICBpbWFnZTogcG9zdGdyZXNcbiAgICBlbnZpcm9ubWVudDpcbiAgICAgICAgUE9TVEdSRVNfREI6IGRydXBhbFxuICAgICAgICBQT1NUR1JFU19VU0VSOiB1c2VyXG4gICAgICAgIFBPU1RHUkVTX1BBU1NXT1JEOiBleGFtcGxlXG5cbnZvbHVtZXM6XG4gICAgZHJ1cGFsLXByb2ZpbGVzOlxuICAgIGRydXBhbC1zaXRlczpcbiAgICBkcnVwYWwtdGhlbWVzOlxuIikpLG1keCgicCIsbnVsbCwiRG9ja2VyIGNvbXBvc2UgYnVpbGQuIElmIHdlIGhhdmUgdGhpcyBvcHRpb24gaW4gdGhlIFlhbWwgaXQgd2lsbCBidWlsZCB0aGUgaW1hZ2UgdGhlIGZpcnN0IHRpbWUgaXQgcnVucy4gSWYgd2Ugd2FudCB0byBmb3JjZSBidWlsZCB0aGUgaW1hZ2UsIHdlIGhhdGUgdG8gcnVuXG5HcmVhdCBmb3IgY29tcGxleCBidWlsZCB0aGF0IGhhdmUgbG90cyBvZiB2YXJzIG9yIGJ1aWxkIGFyZ3MiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlci1jb21wb3NlIGJ1aWxkXG5kb2NrZXItY29tcG9zZSB1cCAtLWJ1aWxkXG4iKSksbWR4KCJwIixudWxsLCJJbiB0aGUgYmVsb3cgZXhhbXBsZSB3ZSBidWlsZCBhIGN1c3RvbSBpbWFnZSBpZiB0aGUgaW1hZ2UgbmdpbngtY3VzdG9tIGlzIG5vdCBpbiB0aGUgY2FjaGUuXG5JZiB0aGUgc2VydmljZSBuZWVkIGEgZGF0YWJhc2Ugd2Ugd291bGQganVzdCBoYW5nIHRoYXQgaW4iKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiNkb2NrZXItY29tcG9zZS55bWxcbiAgICBzZXJ2aWNlczpcbiAgICAgICAgcHJveHk6XG4gICAgICAgICAgICBidWlsZDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNUZWxscyB0aGF0IHRoZSBpbWFnZSBuZWVkcyB0byBiZSBidWlsZFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjQnVpbGQgdGhlIEltYWdlIGluIHRoZSBjdXJyZW50IGRpclxuICAgICAgICAgICAgICAgIGRvY2tlcmZpbGU6IG5naW54LkRvY2tlcmZpbGUgICAgICAgICAgICAjQnVpbGQgdGhlIGltYWdlIHVzaW5nIHRoaXMgRG9ja2VyZmlsZVxuICAgICAgICAgICAgaW1hZ2U6IG5naW54LWN1c3RvbSAgICAgICAgICAgICAgICAgICAgICAgICAjbmFtZSB0aGUgaW1hZ2UgYWZ0ZXIgdGhlIGJ1aWxkIG5naW54LWN1c3RvbVxuICAgICAgICAgICAgcG9ydHM6XG4gICAgICAgICAgICAgICAgLSAnODA6ODAnXG4iKSksbWR4KCJoMiIseyJpZCI6ImRvY2tlci1zd2FybSJ9LCJEb2NrZXIgU3dhcm0iKSxtZHgoInAiLG51bGwsIkhvdyBkbyB3ZSBhdXRvbWF0ZSBjb250YWluZXIgbGlmZWN5Y2xlP1xuSG93IGNhbiB3ZSBlYXNpbHkgc2NhbGUgb3V0L2luL3VwL2Rvd24/XG5Ib3cgY2FuIHdlIGVuc3VyZSBvdXIgY29udGFpbmVycyBhcmUgcmUtY3JlYXRlZCBpZiB0aGV5IGZhaWw/XG5Ib3cgY2FuIHdlIHJlcGxhY2UgY29udGFpbmVycyB3aXRob3V0IGRvd250aW5lIChibHVlL2dyZWVuIGRlcGxveSkiKSxtZHgoInAiLG51bGwsIlN3YXJtIE1vZGUgaXMgYSBjbHVzdGVyaW5nIHNvbHV0aW9uIGJ1aWx0IGluc2lkZSBEb2NrZXIiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBzd2FybSBpbml0ICAgICAgICAgICAgICAgICAgICAgICAjdG8gaW5pdGlhbGl6ZSBzd2FybVxuVG8gYWRkIGEgd29ya2VyIHRvIHRoaXMgc3dhcm0sIHJ1biB0aGUgZm9sbG93aW5nIGNvbW1hbmQ6XG5cbmRvY2tlciBzd2FybSBqb2luIC0tdG9rZW4gU1dNVEtOLTEjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIzNcblxuVG8gYWRkIGEgbWFuYWdlciB0byB0aGlzIHN3YXJtLCBydW4gJ2RvY2tlciBzd2FybSBqb2luLXRva2VuIG1hbmFnZXInIGFuZCBmb2xsb3cgdGhlIGluc3RydWN0aW9ucy5cbiIpKSxtZHgoInAiLG51bGwsIlNlcnZpY2UgaW4gYSBTd2FybSByZXBsYWNlcyAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiZG9ja2VyIHJ1biIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBzZXJ2aWNlIDxDTUQ+XG5kb2NrZXIgc2VydmljZSBjcmVhdGUgYWxwaW5lIHBpbmcgOC44LjguOCAgICAgICAgICAgICAgICMgY3JlYXRlIGEgbmV3IHNlcnZpY2UgdGhhdCBydW5zIGFscGluZSBjb250YWluZXIgdGhhdCBkb2VzIGEgcGluZyB0byBnb29nbGUgXG5kb2NrZXIgc2VydmljZSBscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgbGlzdCBhbGwgdGhlIHNlcnZpY2VzXG5kb2NrZXIgc2VydmljZSBwcyA8U2VydmljZU5hbWUgb3IgSUQ+ICAgICAgICAgICAgICAgICAgICMgbGlzdCBhbGwgdGhlIGNvbnRpYW5lcnMgaW5zaWRlIGEgc2VydmljZVxuZG9ja2VyIHNlcnZpY2UgdXBkYXRlIDxJRD4gLS1yZXBsaWNhcyAzICAgICAgICAgICAgICAgICAjIE5vdyB3ZSB3YW50IHRvIHNjYWxlIG91ciBzZXJ2aWNlIHVwXG5kb2NrZXIgbm9kZSB1cGRhdGUgLS1yb2xlIG1hbmFnZXIgPGlwb2Zub2RlPlxuXG4kIGRvY2tlciBzZXJ2aWNlIGNyZWF0ZSAtLXJlcGxpY2FzIDMgYWxwaW5lIHBpbmcgOC44LjguOFxuJCBkb2NrZXIgc2VydmljZSBwcyBmZXJ2ZW50X21lbmRlbCBcbklEICAgICAgICAgICAgICAgICAgTkFNRSAgICAgICAgICAgICAgICBJTUFHRSAgICAgICAgICAgICAgIE5PREUgICAgICAgICAgICAgICAgREVTSVJFRCBTVEFURSAgICAgICBDVVJSRU5UIFNUQVRFICAgICAgICAgICAgRVJST1IgICAgICAgICAgICAgICBQT1JUU1xueGthZmQzZHlsYTd6ICAgICAgICBmZXJ2ZW50X21lbmRlbC4xICAgIGFscGluZTpsYXRlc3QgICAgICAgbm9kZTEgICAgICAgICAgICAgICBSdW5uaW5nICAgICAgICAgICAgIFJ1bm5pbmcgMzcgc2Vjb25kcyBhZ28gICAgICAgICAgICAgICAgICAgICAgIFxucDg5Zng1MWZlamFlICAgICAgICBmZXJ2ZW50X21lbmRlbC4yICAgIGFscGluZTpsYXRlc3QgICAgICAgbm9kZTIgICAgICAgICAgICAgICBSdW5uaW5nICAgICAgICAgICAgIFJ1bm5pbmcgMzcgc2Vjb25kcyBhZ28gICAgICAgICAgICAgICAgICAgICAgIFxuZ3l4MnhidW9iaXR6ICAgICAgICBmZXJ2ZW50X21lbmRlbC4zICAgIGFscGluZTpsYXRlc3QgICAgICAgbm9kZTMgICAgICAgICAgICAgICBSdW5uaW5nICAgICAgICAgICAgIFJ1bm5pbmcgMzcgc2Vjb25kcyBhZ28gICAgIFxuIikpLG1keCgicCIsbnVsbCwiTmV0d29yayBkcml2ZXIgT3ZlcmxheSBNdWx0aS1Ib3N0IE5ldHdvcmtpbmcuIEl0cyBjcmVhdGluZyBhIHN3YXJtIHdpZGUgYnJpZGdlIG5ldHdvcmsgc28gdGhhdCBjb250YWluZXJzIGFjcm9zcyBob3N0cyBjYW4gY29tbXVuaWNhdGUgdG8gZWFjaCBvdGhlclxuSnVzdCBjaG9vc2UgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIi0tZHJpdmVyIG92ZXJsYXkiKSwiIHdoZW4gY3JlYXRpbmcgbmV0d29yayIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiZG9ja2VyIG5ldHdvcmsgY3JlYXRlIC0tZHJpdmVyIG92ZXJsYXkgbXlkcnVwYWxcbmRvY2tlciBzZXJ2aWNlIGNyZWF0ZSAtLW5hbWUgcHNxbCAtLW5ldHdvcmsgbXlkcnVwYWwgLWUgUE9TVEdSRVNfUEFTU1dPUkQ9ZXhhbXBsZSBwb3N0Z3JlcyAgICAgICNjcmVhdGUgYSBwb3N0Z3Jlc3Mgc2VydmljZSBvbiBteWRydXBhbCBuZXR3b3JrXG4iKSksbWR4KCJwIixudWxsLCJTY2FsaW5nIG91dCB3aXRoIFJvdXRpbmcgTWVzaCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiI2NyZWF0ZSBhbiBlbGFzdGljc2VhcmNoIHNlcnZpY2Ugd2l0aCB0aHJlZSBjb250YWluZXJzXG5kb2NrZXIgc2VydmljZSBjcmVhdGUgLS1uYW1lIHNlYXJjaCAtLXJlcGxpY2FzIDMgLXAgOTIwMDo5MjAwIGVsYXN0aWNzZWFyY2g6MlxuIikpLG1keCgicCIsbnVsbCwiV2hlbiB3ZSBub3cgZG8gYSBjdXJsIG9uIHRoZSBsb2NhbGhvc3QsIHRoZSByb3V0aW5nIG1lc2ggZm9yd2FyZCB3aXRoIHJvdW5kIHJvYmluIG91ciByZXF1ZXN0IHRvIGFsbCB0aHJlIG5vZGVzIHRoZSBzZXJ2aWNlIGlzIHJ1bm5pbmcgb24uIiksbWR4KCJwIixudWxsLCJUaGlzIGlzIHN0YXRlbGVzcyBsb2FkIGJhbGFuY2luZy4gVGhpcyBMQiBpcyBhdCBPU0kgTGF5ZXIgMyAoVENQKSwgbm90IExheWVyIDQgKEROUylcbkJvdGggbGltaXRhdGlvbiBjYW4gYmUgb3ZlcmNvbWUgd2l0aDogIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIm5naW54IG9yIEhBUHJveHkgTEIgcHJveHksIG9yOiIpLCIgRG9ja2VyIEVudGVycHJpc2UgRWRpdGlvbiB3aGljaCBjb21lcyB3aXRoIGJ1aWx0IGluIEw0IHdlYiBwcm94eS4iKSxtZHgoInAiLG51bGwsIkNyZWF0ZSBhIERvZ3MgVlMgQ2F0cyB2b3RpbmcgYXBwICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS9CcmV0RmlzaGVyL3VkZW15LWRvY2tlci1tYXN0ZXJ5L3RyZWUvbWFpbi9zd2FybS1hcHAtMSNhc3NpZ25tZW50LWNyZWF0ZS1hLW11bHRpLXNlcnZpY2UtbXVsdGktbm9kZS13ZWItYXBwIn0pLCJrbGljayIpKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBuZXR3b3JrIGNyZWF0ZSAtLWRyaXZlciBvdmVybGF5IGJhY2tlbmRcbmRvY2tlciBuZXR3b3JrIGNyZWF0ZSAtLWRyaXZlciBvdmVybGF5IGZyb250ZW5kXG5cbmRvY2tlciB2b2x1bWUgY3JlYXRlIGRiLWRhdGFcblxuZG9ja2VyIHNlcnZpY2UgY3JlYXRlIC0tbmFtZSB2b3RlIC1wIDgwOjgwIC0tbmV0d29yayBmcm9udGVuZCAtLXJlcGxpY2FzIDIgYnJldGZpc2hlci9leGFtcGxldm90aW5nYXBwX3ZvdGVcbmRvY2tlciBzZXJ2aWNlIGNyZWF0ZSAtLW5hbWUgcmVkaXMgLS1uZXR3b3JrIGZyb250ZW5kIHJlZGlzOjMuMlxuZG9ja2VyIHNlcnZpY2UgY3JlYXRlIC0tbmFtZSB3b3JrZXIgLS1uZXR3b3JrIGZyb250ZW5kIC0tbmV0d29yayBiYWNrZW5kIGJyZXRmaXNoZXIvZXhhbXBsZXZvdGluZ2FwcF93b3JrZXI6amF2YVxuZG9ja2VyIHNlcmNpY2UgY3JlYXRlIC0tbmFtZSBkYiAtLW5ldHdvcmsgYmFja2VuZCAtLW1vdW50IHR5cGU9dm9sdW1lLHNvdXJjZT1kYi1kYXRhLHRhcmdldD0vdmFyL2xpYi9wb3N0Z3Jlc3FsL2RhdGEgLWUgUE9TVEdSRVNfSE9TVF9BVVRIX01FVEhPRD10cnVzdCBwb3N0Z3Jlczo5LjVcbmRvY2tlciBzZXJ2aWNlIGNyZWF0ZSAtLW5hbWUgcmVzdWx0IC1wIDUwMDE6ODAgLS1uZXR3b3JrIGJhY2tlbmQgYnJldGZpc2hlci9leGFtcGxldm90aW5nYXBwX3Jlc3VsdFxuIikpLG1keCgiaDMiLHsiaWQiOiJzdGFja3MifSwiU3RhY2tzIiksbWR4KCJwIixudWxsLCJJdHMgbGlrZSBjb21wb3NlIGZvciBzd2FybS4gV2l0aCBvcHRpb25zIHRvIGRlcGxveSBvciB1cGRhdGUgc29tZXRoaW5nXG5NYW55IHNlcnZpY2VzLCB2b2x1bWVzIG92ZXJsYXkgbmV0d29ya3MgYW5kIHNvIG9uIGV2ZXJ5dGhpbmcgaW4gYSBZQU1MLUZpbGUiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBzdGFjayBkZXBsb3kgLWMgdm90aW5nLnltbCB2b3RlYXBwICAgICAgICAgICAgICAgICAgICNkZXBsb3lpbmcgYSB2b3RlYXBwIGZyb20gdGhlIFlBTUwtRmlsZVxuIikpLG1keCgicCIsbnVsbCwiVG8gdXBkYXRlIHRoZSBvdXIgc3RhY2sgd2UgbmVlZCB0byBtYWtlIGNoYW5nZXMgdG8gdGhlIFlhbWwgZmlsZSBhbmQgaGl0IHRoYXQgY29tbWFuZCBhZ2FpbiB3aXRoIHRoZSBzYW1lIHN0YWNrIG5hbWUiKSxtZHgoImg0Iix7ImlkIjoic2VjdHJldHMifSwiU2VjdHJldHMiKSxtZHgoInAiLG51bGwsIkVhc2llc3QgXCJzZWN1cmVcIiBzb2x1dGlvbiBmb3Igc3RvcmluZyBzZXJjcmV0cyBpbiBTd2FybVxuV2hhdCBpcyBhIFNlY3JldD8iKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJVc2VybmFtZSBhbmQgcGFzc3dvcmQiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiVExTIENlcnRpZmljYXRlIGFuZCBrZXlzIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIlNTSCBrZXlzIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sIkFueSBkYXRhIHlvdSB3b3VsZCBwcmVmZXIgbm90IHRvIGJlIFwib24gZnJvbnQgcGFnZSBvZiBuZXdzXCJcblNldnJldHMgYXJlIGZpcnN0IHN0b3JlZCBpbiBTd2FybSwgdGhlbiBhc3NpZ25lZCB0byBhIFNlcnZpY2Uocylcbk9ubHkgQ29udGFpbmVycyBpbiBhc3NpZ25lZCBTZXJ2aWNlKHMpIGNhbiBzZWUgdGhlbSIpKSxtZHgoInAiLG51bGwsIlR1cm9yaWFsIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJlY2hvIFwidmVyeVN0cm9uZ1BXXCIgPj4gbXlwdy50eHRcbmRvY2tlciBzZWNyZXQgY3JlYXRlIG15cHcgbXlwdy50eHRcbiNhbm90aGVyIG9wdGlvblxuZWNobyBcIm15REJQV1wiIHwgZG9ja2VyIHNlY3JldCBjcmVhdGUgcHNxbF9wYXNzIC1cbmRvY2tlciBzZXJ2aWNlIGNyZWF0ZSAtLW5hbWUgcHNxIC0tc2VjcmV0IG15cHcgLWUgUE9TVEdSRVNfUEFTU1dPUkRfRklMRT0vcnVuL3NlY3JldHMvbXlwdyBwb3N0Z3Jlc1xuZG9ja2VyIHNlcnZpY2UgdXBkYXRlIC0tc2VjcmV0LXJtICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlbW92ZSB0aGUgc2VjcmV0XG4iKSksbWR4KCJwIixudWxsLCJZQU1MLUZpbGUgIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIgICAuLi5cbiAgICBQT1NUR1JFU19QQVNTV09SRF9GSUxFOiBydW4vc2VjcmV0cy9wc3EtcHdcbiAgICBzZWNyZXRzOiBcbiAgICAtIHBzcWwtcHdcbnNlY3JldHM6XG4gICAgcHNxbC1wdzpcbiAgICAgICAgZXh0ZXJuYWw6dHJ1ZVxuICAgIHBzcWwtdXNlcjpcbiAgICAgICAgZmlsZTouL3BzcWxfdXNlci50eHRcbiIpKSxtZHgoInAiLG51bGwsIkluIENvbXBvc2UgaXQgd29ya3MgdGhlIHNhbWUgYnV0IHdpdGhvdXQgdGhlIGRlY3J5cHRpb24iKSxtZHgoImgyIix7ImlkIjoiZG9ja2VyLW1hY2hpbmUifSwiRG9ja2VyIE1hY2hpbmUiKSxtZHgoInAiLG51bGwsIkNMSSB0b29sIHRvIGNyZWF0ZSBuZXcgbm9kZXMgdXNpbmcgdmlydHVhbGJvYyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiZG9ja2VyLW1hY2hpbmUgY3JlYXRlIG5vZGUxXG5kb2NrZXItbWFjaGluZSBjcmVhdGUgbm9kZTJcbmRvY2tlci1tYWNoaW5lIGNyZWF0ZSBub2RlM1xuXG4jYWNjZXNzIFxuZG9ja2VyLW1hY2hpbmUgc3NoIDxuYW1lPlxuZG9ja2VyLW1hY2hpbmUgZW52IG5vZGUxXG4iKSksbWR4KCJoMiIseyJpZCI6ImZ1bGwtYXBwLWxpZmVjeWNsZSJ9LCJGdWxsIEFwcCBMaWZlY3ljbGUiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlci1jb21wb3NlIHVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYXV0b21hdGljYWxseSByZWFkcyBkb2NrZXItY29tcG9zZS55bWwgYW5kIG92ZXJyaWRlcyB3aXRoIGRvY2tlci1jb21wb3NlLm92ZXJyaWRlLnltbFxuZG9ja2VyIHN0YWNrIGRlcGxveSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB3aWxsIGF1dG9tYXRpY2FsbHkgZ2V0IHRoZSBkb2NrZXItY29tcG9zZS5wcm9kLnltbFxuZG9ja2VyLWNvbXBvc2UgLWYgYS55bWwgLWYgYi55bWwgY29uaWZnICAgICAgICAgIyBtZXJnZSB0aGUgdG8geW1sIGZpbGVzXG4iKSksbWR4KCJoMyIseyJpZCI6InNlcnZpY2UtdXBkYXRlcyJ9LCJTZXJ2aWNlIFVwZGF0ZXMiKSxtZHgoInAiLG51bGwsIlVwZGF0ZXMgIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJkb2NrZXIgc2VydmljZSBzY2FsZSB3ZWI9NFxuXG5kb2NrZXIgc2VydmljZSB1cGRhdGUgLS1pbWFnZSBteWFwcDoxLjIuMSA8c2VydmljZW5hbWU+ICAgICAgICAgICAgICAgICAjIHRvIHVwZGF0ZSBhbiBpbWFnZSBvZiBhIHNlcnZpY2VcbmRvY2tlciBzZXJ2aWNlIHVwZGF0ZSAtLWVudi1hZGQgTk9ERV9FTlY9cHJvZHVjdGlvbiAtLXB1Ymxpc2gtcm0gODA4MCAgICNhZGQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgYW5kIHJlbW92ZSB0aGUgcG9ydFxuZG9ja2VyIHNlcnZpY2Ugc2NhbGUgd2ViPTggYXBpPTYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NjYWxlIG11bHRpcGxlIHNlcnZpY2VzIFxuZG9ja2VyIHN0YWNrIGRlcGxveSAtYyBmaWxlLnltbCA8c3RhY2tuYW1lPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB0byB1cGRhdGUgYSBzdGFja1xuIikpLG1keCgicCIsbnVsbCwiRXhhbXBsZToiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiNjcmVhdGUgbmdpbnggc2VydmljZVxuJGRvY2tlciBzZXJ2aWNlIGNyZWF0ZSAtcCA4MDg4OjgwIC0tbmFtZSB3ZWIgbmdpbng6MS4xMy43XG4kZG9ja2VyIHNlcnZpY2UgbHNcbiBJRCAgICAgICAgICAgICAgICAgIE5BTUUgICAgICAgICAgICAgICAgTU9ERSAgICAgICAgICAgICAgICBSRVBMSUNBUyAgICAgICAgICAgIElNQUdFICAgICAgICAgICAgICAgUE9SVFNcbiBmYTBoajdicmwzbDMgICAgICAgIHdlYiAgICAgICAgICAgICAgICAgcmVwbGljYXRlZCAgICAgICAgICAxLzEgICAgICAgICAgICAgICAgIG5naW54OjEuMTMuNyAgICAgICAgKjo4MDg4LT44MC90Y3BcblxuI3NjYWxlIHVwIHRoZSBzZXJ2aWNlXG4kZG9ja2VyIHNlcnZpY2Ugc2NhbGUgd2ViPTVcbiRkb2NrZXIgc2VydmljZSBsc1xuIElEICAgICAgICAgICAgICAgICAgTkFNRSAgICAgICAgICAgICAgICBNT0RFICAgICAgICAgICAgICAgIFJFUExJQ0FTICAgICAgICAgICAgSU1BR0UgICAgICAgICAgICAgICBQT1JUU1xuIGZhMGhqN2JybDNsMyAgICAgICAgd2ViICAgICAgICAgICAgICAgICByZXBsaWNhdGVkICAgICAgICAgIDUvNSAgICAgICAgICAgICAgICAgbmdpbng6MS4xMy43ICAgICAgICAqOjgwODgtPjgwL3RjcFxuXG4jZG8gYSBSb2xsaW5nIHVwZGF0ZSBub3cgYnkgY2hhbmdpbmcgdGhlIGltYWdlIG9mIG5naW54XG5kb2NrZXIgc2VydmljZSB1cGRhdGUgLS1pbWFnZSBuZ2lueDoxLjEzLjYgd2ViXG5cbiNjaGFuZ2UgdGhlIHBvcnQgZnJvbSA4MDg4IHRvIDkwOTBcbiMgaGVyZSB3ZSBmaXJzdCBoYXZlIHRvIHJlbW92ZSB0aGUgb2xkIG9uZSBhbmQgYWRkIHRoZSBuZXcgb25lIHRvIGl0XG5kb2NrZXIgc2VydmljZSB1cGRhdGUgLS1wdWJsaXNoLXJtIDgwODggLS1wdWJsaXNoLWFkZCA5MDkwOjgwIHdlYlxuXG4jIEZvcmNlIHVwZGF0ZXMgdG8gcGljayBsZWFzIHVzZWQgbm9kZXMuIFRvIHNjaGVkdWxlIG5vZGVzIFxuZG9ja2VyIHNlcnZpY2UgdXBkYXRlIC0tZm9yY2Ugd2ViXG4iKSksbWR4KCJoMyIseyJpZCI6ImRvY2tlci1oZWFsdGhjaGVja3MifSwiRG9ja2VyIGhlYWx0aGNoZWNrcyIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiZG9ja2VyIGNvbnRhaW5lciBsc1xuZG9ja2VyIGNvbnRhaW5lciBpbnNwZWN0ICAgICAgICAgICAgI0xhc3QgNSBoZWFsdGhjaGVja3NcblxuZG9ja2VyIHJ1biBcXFxuICAgIC0taGVhbHRoLWNtZD0nY3VybCAtZiBsb2NhbGhvc3Q6OTIwMC9fY2x1c3Rlci9oZWFsdGggfHwgZmFsc2UnIFxcXG4gICAgLS1oZWFsdGgtaW50ZXJjYWw9NXMgXFxcbiAgICAtLWhlYWx0aC1yZXRyaWVzLTMgXFxcbiAgICAtLWhlYWx0aC10aW1lb3V0PTJzIFxcXG4gICAgLS1oZWFsdGgtc3RhcnQtcGVyaW9kPTE1cyBcXFxuICAgIGVsYXN0aWNzZWFyY2g6MlxuXG4jb3IgaW4gYSBkb2NrZXJmaWxlXG4gICAgLS1pbmV0cnZhbD1EVVJBVElPTihkZWZhdWx0OjMwKVxuICAgIC0tdGltZW91dD1EVVJBVElPTihkZWZhdWx0OjMwcylcbiAgICAtLXN0YXJ0LXBlcmlvZD1EVVJBVElPTihkZWZhdWx0OjBzKSgxNy4wOSlcbiAgICAtLXJldHJpZXM9TiAoZGVmYXVsdCAzKVxuIikpLG1keCgiaDIiLHsiaWQiOiJydW5uaW5nLWRvY2tlci1yZWdpc3RyeSJ9LCJSdW5uaW5nIERvY2tlciBSZWdpc3RyeSIpLG1keCgicCIsbnVsbCwiQSBwcml2YXRlIGltYWdlIHJlZ2lzdHJ5IGZvciB5b3VyIG5ldHdvcmtcblBhcmt0IG9mIGRvY2tlci9kaXN0aWJ1dGlvbnMgR2l0SHViIHJlcG9cbkF0IGl0cyBjb3JlOiBhIHdlYiBBUEkgYW5kIHN0b3JhZ2Ugc3lzdGVtLCB3cml0dGVuIGluIEdvXG5JcyBhIGh0dHBzIFNlcnZlciBydW5uaW5nIGF0IFBvcnQgNTAwMFxuUmUtVGFnIGFuIGV4aXN0aW5nIGltYWdlIGFuZCBwdXNoIGl0IG91ciBuZXcgUmVnaXN0cnlcblwiU2VjdXJlIGJ5IERlZmF1bHRcIjogRG9ja2VyIHdvbnQgdGFsayB0byByZWdpc3RyeSB3aXRob3V0IEhUVFBTXG5FeGNlcHQsIGxvY2FsaG9zdFxuRm9yIHJlbW90ZSBzZWxmLXNpZ25lZCBUTFMsIGVuYWJsZSBcImluc2VjdXJlLXJlZ2lzdHJ5XCIgaW4gZW5naW5lIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIjcnVuIHRoZSBSZWdpc3RyeVxuZG9ja2VyIGNvbnRhaW5lciBydW4gLWQgLXAgNTAwMDo1MDAwIC0tbmFtZSByZWdpc3RyeSByZWdpc3RyeVxuXG4jUHVsbCBpbWFnZSBmcm9tIEh1YlxuZG9ja2VyIHB1bGwgaGVsbG8td29ybGRcblxuI1RhZyB0aGUgaW1hZ2Ugd2l0aCBvdXIgbmV3IGxvY2FsIFJlZ2lzdHJ5XG5kb2NrZXIgdGFnIGhlbGxvLXdvcmxkIDEyNy4wLjAuMTo1MDAwL2hlbGxvLXdvcmxkXG5cbiNQdXNoIHRoZSBpbWFnZSB0byB0aGUgbG9jYWwgUmVnaXN0cnlcbmRvY2tlciBwdXNoIDEyNy4wLjAuMTo1MDAwL2hlbGxvLXdvcmxkXG4iKSksbWR4KCJwIixudWxsLCJOb3cgdGhlIGltYWdlIGlzIGluIG91ciBSZWdpc3RyeSBvbiB0aGUgbG9jYWxob3N0IGFuZCB3ZSBjYW4gcmVtb3ZlIGl0IGZyb20gbG9jYWwgbWFjaGluZSBhbmQgcHVsbCBpdCBhZ2FpbiBpZiBuZWVkZWQgd2l0aCAiLG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiZG9ja2VyIGltYWdlIHJtIiksIiBhbmQgIixtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sImRvY2tlciBpbWFnZSBwdWxsIDEyNy4wLjAuMTo1MDAwL2hlbGxvLXdvcmxkIikpLG1keCgicCIsbnVsbCwiVGhpbmdzIHRvIHdlIG5lZWQgdG8ga25vdzoiLG1keCgiYnIiLHtwYXJlbnROYW1lOiJwIn0pLCJcbiIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJVc2UgVm9sdW1lIHRvIHN0b3JlIFJlZ2lzdHJ5IERhdGEuIiksbWR4KCJiciIse3BhcmVudE5hbWU6InAifSksIlxuIiwiUmUtY3JlYXRlIGEgUmVnaXN0cnkgdGhhdCBydW5zIG9uIHBvcnQgNTAwMCBvbiBsb2NhbCBob3N0LCB3aXRoIGEgdm9sdW1lIG1vdW50ZXQgdG8gJHB3ZCBmb3IgdGhlIHJlZ2lzdHJ5IGRhdGEiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBjb250YWluZXIgcnVuIC1kIC1wIDUwMDA6NTAwMCAtLW5hbWUgcmVnaXN0cnkgLXYgJChwd2QpL3JlZ2lzdHJ5LWRhdGE6L3Zhci9saWIvcmVnaXN0cnkgcmVnaXN0cnlcbiIpKSxtZHgoImgzIix7ImlkIjoiZW5hYmxpbmctc3NsLWFuZC1odHRwcy1mb3ItdGhlLXNlY3VyZS1sb2NhbC1yZWdpc3RyeSJ9LCJFbmFibGluZyBTU0wgYW5kIEhUVFBTIGZvciB0aGUgU2VjdXJlIExvY2FsIFJlZ2lzdHJ5IiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJta2RpciBjZXJ0c1xub3BlbnNzbCByZXEgLW5ld2tleSByc2E6NDA5NiAtbm9kZXMgLXNoYTI1NiAta2V5b3V0IGNlcnRzL2RvbWFpbi5rZXkgLXg1MDkgLWRheXMgMzY1IC1vdXQgY2VydHMvZG9tYWluLmNydFxuXG5ta2RpciAvZXRjL2RvY2tlci9jZXJ0cy5kXG5ta2RpciAvZXRjL2RvY2tlci9jZXJ0cy5kLzEyNy4wLjAuMTo1MDAwIFxuY3AgJChwd2QpL2NlcnRzL2RvbWFpbi5jcnQgL2V0Yy9kb2NrZXIvY2VydHMuZC8xMjcuMC4wLjE6NTAwMC9jYS5jcnRcblxuI0tpbGwgdGhlIERvY2tlciBEZWFtb25cbnBraWxsIGRvY2tlcmRcbmRvY2tlcmQgPiAvZGV2L251bGwgMj4mMSAmXG4iKSksbWR4KCJwIixudWxsLCJGb3IgdGhlIHNlY3VyZSByZWdpc3RyeSwgd2UgbmVlZCB0byBydW4gYSBjb250YWluZXIgd2hpY2ggaGFzIHRoZSBTU0wgY2VydGlmaWNhdGUgYW5kIGtleSBmaWxlcyBhdmFpbGFibGUsIHdoaWNoIHdlXHUyMDE5bGwgZG8gd2l0aCBhbiBhZGRpdGlvbmFsIHZvbHVtZSBtb3VudCAoc28gd2UgaGF2ZSBvbmUgdm9sdW1lIGZvciByZWdpc3RyeSBkYXRhLCBhbmQgb25lIGZvciBjZXJ0cykuIFdlIGFsc28gbmVlZCB0byBzcGVjaWZ5IHRoZSBsb2NhdGlvbiBvZiB0aGUgY2VydGlmaWNhdGUgZmlsZXMsIHdoaWNoIHdlXHUyMDE5bGwgZG8gd2l0aCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6IiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCItLXJlc3RhcnQgdW5sZXNzLXN0b3BwZWQiKSwiIC0gcmVzdGFydCB0aGUgY29udGFpbmVyIHdoZW4gaXQgZXhpdHMsIHVubGVzcyBpdCBoYXMgYmVlbiBleHBsaWNpdGx5IHN0b3BwZWQuIFdoZW4gdGhlIGhvc3QgcmVzdGFydHMsIERvY2tlciB3aWxsIHN0YXJ0IHRoZSByZWdpc3RyeSBjb250YWluZXIsIHNvIGl0XHUyMDE5cyBhbHdheXMgYXZhaWxhYmxlLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIi12ICRwd2RcXGNlcnRzOmM6XFxjZXJ0cyIpLCIgLSBtb3VudCB0aGUgbG9jYWwgY2VydHMgZm9sZGVyIGludG8gdGhlIGNvbnRhaW5lciwgc28gdGhlIHJlZ2lzdHJ5IHNlcnZlciBjYW4gYWNjZXNzIHRoZSBjZXJ0aWZpY2F0ZSBhbmQga2V5IGZpbGVzOyIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIi1lIFJFR0lTVFJZX0hUVFBfVExTX0NFUlRJRklDQVRFIiksIiAtIHNwZWNpZnkgdGhlIGxvY2F0aW9uIG9mIHRoZSBTU0wgY2VydGlmaWNhdGUgZmlsZTsiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJsaSJ9LCItZSBSRUdJU1RSWV9IVFRQX1RMU19LRVkiKSwiIC0gc3BlY2lmeSB0aGUgbG9jYXRpb24gb2YgdGhlIFNTTCBrZXkgZmlsZS4iLCIgIG1rZGlyIHJlZ2lzdHJ5LWRhdGFcbmRvY2tlciBydW4gLWQgLXAgNTAwMDo1MDAwIC0tbmFtZSByZWdpc3RyeSBcXFxuLS1yZXN0YXJ0IHVubGVzcy1zdG9wcGVkIFxcXG4tdiAkKHB3ZCkvcmVnaXN0cnktZGF0YTovdmFyL2xpYi9yZWdpc3RyeSAtdiAkKHB3ZCkvY2VydHM6L2NlcnRzIFxcXG4tZSBSRUdJU1RSWV9IVFRQX1RMU19DRVJUSUZJQ0FURT0vY2VydHMvZG9tYWluLmNydCBcXFxuLWUgUkVHSVNUUllfSFRUUF9UTFNfS0VZPS9jZXJ0cy9kb21haW4ua2V5IFxcXG5yZWdpc3RyeSIpKSxtZHgoImg0Iix7ImlkIjoiYWNjZXNzaW5nLXRoZS1zZWN1cmUtcmVnaXN0cnkifSwiQWNjZXNzaW5nIHRoZSBTZWN1cmUgUmVnaXN0cnkiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImRvY2tlciBwdWxsIGhlbGxvLXdvcmxkXG5kb2NrZXIgdGFnIGhlbGxvLXdvcmxkIDEyNy4wLjAuMTo1MDAwL2hlbGxvLXdvcmxkXG5kb2NrZXIgcHVzaCAxMjcuMC4wLjE6NTAwMC9oZWxsby13b3JsZFxuZG9ja2VyIHB1bGwgMTI3LjAuMC4xOjUwMDAvaGVsbG8td29ybGRcbiIpKSxtZHgoImg0Iix7ImlkIjoiZW5hYmxlLWJhc2ljLWF1dGhlbnRpY2F0aW9uLWZvci10aGUtc2VjdXJlLXJlZ2lzdHJ5In0sIkVuYWJsZSBCYXNpYyBBdXRoZW50aWNhdGlvbiBmb3IgdGhlIFNlY3VyZSBSZWdpc3RyeSIpLG1keCgicCIsbnVsbCwiVGhlIHJlZ2lzdHJ5IHNlcnZlciBhbmQgdGhlIERvY2tlciBjbGllbnQgc3VwcG9ydCBiYXNpYyBhdXRoZW50aWNhdGlvbiBvdmVyIEhUVFBTLiBUaGUgc2VydmVyIHVzZXMgYSBmaWxlIHdpdGggYSBjb2xsZWN0aW9uIG9mIHVzZXJuYW1lcyBhbmQgZW5jcnlwdGVkIHBhc3N3b3Jkcy4gVGhlIGZpbGUgdXNlcyBBcGFjaGVcdTIwMTlzIGh0cGFzc3dkLiIpLG1keCgicCIsbnVsbCwiQ3JlYXRlIHRoZSBwYXNzd29yZCBmaWxlIHdpdGggYW4gZW50cnkgZm9yIHVzZXIgXHUyMDFDbW9ieVx1MjAxRCB3aXRoIHBhc3N3b3JkIFx1MjAxQ2dvcmRvblx1MjAxRDtcblRoZSBvcHRpb25zIGFyZToiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJcdTIwMTNlbnRyeXBvaW50IiksIiBPdmVyd3JpdGUgdGhlIGRlZmF1bHQgRU5UUllQT0lOVCBvZiB0aGUgaW1hZ2UiKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sIi1CIiksIiBVc2UgYmNyeXB0IGVuY3J5cHRpb24gKHJlcXVpcmVkKSIpKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6InAifSwiLWIiKSwiIHJ1biBpbiBiYXRjaCBtb2RlIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCItbiIpLCIgZGlzcGxheSByZXN1bHRzIikpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sIkxvb2tzIGxpa2UgdGhlIG5ldyByZWdpc3RyeSBpbWFnZSBkb2VzbnQgaGF2ZSBodHBhc3N3ZCBpbiBpdC4gU28gd2UgbmVlZCB0byBmaW5kIGEgbmV3IG9uZSIpLG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sIiAgbWtkaXIgYXV0aFxuI2RvY2tlciBydW4gLS1lbnRyeXBvaW50IGh0cGFzc3dkIHJlZ2lzdHJ5OmxhdGVzdCAtQmJuIG1vYnkgZ29yZG9uID4gYXV0aC9odHBhc3N3ZFxuZG9ja2VyIHJ1biAtLWVudHJ5cG9pbnQgaHRwYXNzd2QgcmVnaXN0cnk6Mi42LjIgLUJibiBtb2J5IGdvcmRvbiA+IGF1dGgvaHRwYXNzd2QiKSkpLG1keCgicCIsbnVsbCwiTm93IHdlIGhhdmUgdGhlIHVzZXIgYW5kIGhhc2hlZCBQVyBpbiB0aGUgYXV0aC9odHBhc3N3ZCBmaWxlLiBOb3cgd2UgcnVuIHRoZSBuZXcgUmVnaXN0cnkiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiaW5saW5lQ29kZSIse3BhcmVudE5hbWU6ImxpIn0sIi1lIFJFR0lTVFJZX0FVVEhfSFRQQVNTV0RfUEFUSD0vYXV0aC9odHBhc3N3ZCIpLCIgLSBzcGVjaWZ5IHRoZSBsb2NhdGlvbiBvZiB0aGUgaHRwYXNzd2QgZmlsZS5cbmRvY2tlciBraWxsIHJlZ2lzdHJ5XG5kb2NrZXIgcm0gcmVnaXN0cnlcbmRvY2tlciBydW4gLWQgLXAgNTAwMDo1MDAwIC0tbmFtZSByZWdpc3RyeSBcXFxuLS1yZXN0YXJ0IHVubGVzcy1zdG9wcGVkIFxcXG4tdiAkKHB3ZCkvcmVnaXN0cnktZGF0YTovdmFyL2xpYi9yZWdpc3RyeSBcXFxuLXYgJChwd2QpL2NlcnRzOi9jZXJ0cyBcXFxuLXYgJChwd2QpL2F1dGg6L2F1dGggXFxcbi1lIFJFR0lTVFJZX0hUVFBfVExTX0NFUlRJRklDQVRFPS9jZXJ0cy9kb21haW4uY3J0IFxcXG4tZSBSRUdJU1RSWV9IVFRQX1RMU19LRVk9L2NlcnRzL2RvbWFpbi5rZXkgXFxcbi1lIFJFR0lTVFJZX0FVVEg9aHRwYXNzd2QgXFxcbi1lIFwiUkVHSVNUUllfQVVUSF9IVFBBU1NXRF9SRUFMTT1SZWdpc3RyeSBSZWFsbVwiIFxcXG4tZSBcIlJFR0lTVFJZX0FVVEhfSFRQQVNTV0RfUEFUSD0vYXV0aC9odHBhc3N3ZFwiIFxcXG5yZWdpc3RyeSIpKSxtZHgoInAiLG51bGwsIk5vdyB3ZSBuZWVkIHRvIGxvZ2luIHRvIG91ciBSZWdpc3RyeSBhbmQgd2UgY2FuIHN0YXJ0IHB1c2hpbmcgYW5kIHB1bGxpbmciKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksIiRkb2NrZXIgbG9naW4gMTI3LjAuMC4xOjUwMDBcblVzZXJuYW1lOiBtb2J5XG5QYXNzd29yZDpcbiRkb2NrZXIgcHVsbCAxMjcuMC4wLjE6NTAwMC9oZWxsby13b3JsZFxuVXNpbmcgZGVmYXVsdCB0YWc6IGxhdGVzdFxubGF0ZXN0OiBQdWxsaW5nIGZyb20gaGVsbG8td29ybGRcbkRpZ2VzdDogc2hhMjU2OjkwNjU5YmY4MGI0NGNlNmJlODIzNGU2ZmY5MGExYWMzNGFjYmViODI2OTAzYjAyY2ZhMGRhMTFjODJjYmMwNDJcblN0YXR1czogSW1hZ2UgaXMgdXAgdG8gZGF0ZSBmb3IgMTI3LjAuMC4xOjUwMDAvaGVsbG8td29ybGQ6bGF0ZXN0XG4xMjcuMC4wLjE6NTAwMC9oZWxsby13b3JsZDpsYXRlc3RcbiIpKSxtZHgoImgzIix7ImlkIjoidXNpbmctcmVnaXN0cnktd2l0aC1zd2FybSJ9LCJVc2luZyBSZWdpc3RyeSB3aXRoIFN3YXJtIiksbWR4KCJwIixudWxsLCJUaGUgaW1hZ2UgaGFzIHRvIGJlIHJlYWNoYWJsZSBmcm9tIGV2ZXJ5IG5vZGUuIFdlIGNhbnQgY3JlYXRlIGFuIGltYWdlIG9uIG5vZGUxIGFuZCBleGNlcHQgaXQgdG8gd29yayBvbiBub2RlIHRvIHdpdGhvdXQgcHVzaGluZyBpdCB0byB0aGUgUmVnaXN0cnkuXG5Qcm9UaXA6IFVzZSBhIGhvc3RlZCBTYWFTIHJlZ2lzdHJ5IGlmIHBvc3NpYmxlIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJkb2NrZXIgc2VydmljZSBjcmVhdGUgLS1uYW1lIHJlZ2lzdHJ5IC0tcHVibGlzaCA1MDAwOjUwMDAgcmVnaXN0cnlcbmRvY2tlciBwdWxsIGhlbGxvLXdvcmxkXG5kb2NrZXIgdGFnIGhlbGxvLXdvcmxkOmxhdGVzdCAxMjcuMC4wLjE6NTAwMC9oZWxsby13b3JsZFxuZG9ja2VyIHB1c2ggMTI3LjAuMC4xOjUwMDAvaGVsbG8td29ybGRcbmRvY2tlciBwdWxsIG5naW54XG5kb2NrZXIgdGFnIG5naW54OmxhdGVzdCAxMjcuMC4wLjE6NTAwMC9uZ2lueFxuZG9ja2VyIHB1c2ggMTI3LjAuMC4xOjUwMDAvbmdpbnhcbiIpKSxtZHgoImgxIix7ImlkIjoia3ViZXJuZXRlcyJ9LCJLdWJlcm5ldGVzIiksbWR4KCJoMiIseyJpZCI6Indhcm5pbmcifSwiV2FybmluZyIpLG1keCgicCIsbnVsbCwiUmVtb3ZlIGFueSBpbWFnZSAiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImZvciBpbWFnZSBpbiAkKGRvY2tlciBpbWFnZSBscyAtLWZvcm1hdCAne3suSUR9fScpOyBkbyBkb2NrZXIgaW1hZ2Ugcm0gLWYgJGltYWdlOyBkb25lXG4iKSksbWR4KCJwIixudWxsLCJSZW1vdmUgYW55IGNvbnRhaW5lciAiKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksImZvciBpZCBpbiAkKGRvY2tlciBwcyAtYSAtLWZvcm1hdCAne3suSUR9fScpO2RvIGRvY2tlciBybSAtZiAkaWQ7ZG9uZVxuIikpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}