{"remainingRequest":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit/Documents/endritdemaj.github.io/docs/documentation/linux.md","dependencies":[{"path":"/home/endrit/Documents/endritdemaj.github.io/docs/documentation/linux.md","mtime":1606848169175},{"path":"/home/endrit/Documents/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-linux-md-140.json","mtime":1606848179598},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1598202332903},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1598202332899}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvZW5kcml0L0RvY3VtZW50cy9lbmRyaXRkZW1hai5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIi9ob21lL2VuZHJpdC9Eb2N1bWVudHMvZW5kcml0ZGVtYWouZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCB2YXIgZnJvbnRNYXR0ZXI9e2lkOidsaW51eGNoZWF0c2hlZXQnLHRpdGxlOidMaW51eCBDaGVhdHNoZWF0JyxzaWRlYmFyX2xhYmVsOidMaW51eCBDaGVhdHNoZWF0J307ZXhwb3J0IHZhciBtZXRhZGF0YT17InVudmVyc2lvbmVkSWQiOiJkb2N1bWVudGF0aW9uL2xpbnV4Y2hlYXRzaGVldCIsImlkIjoiZG9jdW1lbnRhdGlvbi9saW51eGNoZWF0c2hlZXQiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiTGludXggQ2hlYXRzaGVhdCIsImRlc2NyaXB0aW9uIjoicHdkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCB3b3JraW5nIGRpcmVjdG9yeSIsInNvdXJjZSI6IkBzaXRlL2RvY3MvZG9jdW1lbnRhdGlvbi9saW51eC5tZCIsInBlcm1hbGluayI6Ii9lbmRyaXRkZW1hai5naXRodWIuaW8vZG9jcy9kb2N1bWVudGF0aW9uL2xpbnV4Y2hlYXRzaGVldCIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZG9jdXNhdXJ1cy9lZGl0L21hc3Rlci93ZWJzaXRlL2RvY3MvZG9jdW1lbnRhdGlvbi9saW51eC5tZCIsInNpZGViYXJfbGFiZWwiOiJMaW51eCBDaGVhdHNoZWF0Iiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJUaGlzIGlzIERvY3VtZW50IE51bWJlciAzIiwicGVybWFsaW5rIjoiL2VuZHJpdGRlbWFqLmdpdGh1Yi5pby9kb2NzL2RvYzMifSwibmV4dCI6eyJ0aXRsZSI6IkRvY2tlciBDaGVhdHNoZWF0IiwicGVybWFsaW5rIjoiL2VuZHJpdGRlbWFqLmdpdGh1Yi5pby9kb2NzL2RvY3VtZW50YXRpb24vZG9ja2VyY2hlYXRzaGVldCJ9fTsvKiBAanN4IG1keCAqL2V4cG9ydCB2YXIgcmlnaHRUb2M9W3t2YWx1ZTonSG93IHRvIG1vdW50IGEgbmV3IERyaXZlIC9kZXYvc2RiJyxpZDonaG93LXRvLW1vdW50LWEtbmV3LWRyaXZlLWRldnNkYicsY2hpbGRyZW46W119LHt2YWx1ZTonR2VuZXJhdGUgU1NMIENlcnRpZmljYXRlcyBhbmQgZ2V0IHRoZW0gc2lnbmVkJyxpZDonZ2VuZXJhdGUtc3NsLWNlcnRpZmljYXRlcy1hbmQtZ2V0LXRoZW0tc2lnbmVkJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidHUkVQJyxpZDonZ3JlcCcsY2hpbGRyZW46W119LHt2YWx1ZTondGVzdCcsaWQ6J3Rlc3QnLGNoaWxkcmVuOltdfV07dmFyIGxheW91dFByb3BzPXtyaWdodFRvYzpyaWdodFRvY307dmFyIE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKXt2YXIgY29tcG9uZW50cz1fcmVmLmNvbXBvbmVudHMscHJvcHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJwd2QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50IHdvcmtpbmcgZGlyZWN0b3J5ICAgXG5oaXN0b3J5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Nob3cgbGFzdCBydW4gY29tbWFuZHNcbmhpc3RvcnlfcGVyc2lzdGFudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBwZXJzaXN0YW50IGhpc3Rvcnkgd2l0aCB0aW1lc3RhbXBcbjxjbWQ+ICYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIDxjbWQ+IGluIGJhY2tncm91bmQgb3IgaGl0IGN0cmwrWlxubm9odXAgPGNtZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICM8Y21kPiBydW5zIGV2ZW4gYWZ0ZXIgdXNlciBsb2dnZXMgb3V0XG53YXRjaCA8Y21kPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RyYWNrcyBvdXRwdXQgb2YgPGNtZD4gYW5kIHJlZnJlc2hzIGV2ZXJ5IDIgc2Vjb25kc1xuPGNtZD4gfHwgPGNtZDI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNydW4gPGNtZDI+IHdoZW4gPGNtZD4gaGFzIGFuIGVycm9yXG48Y21kPiAmJiA8Y21kMj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3J1biA8Y21kMj4gb25seSB3aGVuIDxjbWQ+IHdhcyBzdWNlc3NmdWxsXG5lY2hvICQ/ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoZWNrIHJldHVybiB2YWx1ZSBvZiBsYXN0IHJ1biBjbWQsIGVjaG8gJGhhbGxvLT5oYWxsb1xuYWxpc2EgZGlyPVwibHNcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NyZWF0ZSBhbiBhbGlhcyB2b3IgJ2xzJy4gUHV0IHRoYXQgaW4gfi8uYmFzaHJjIGZvciBpdCB0byBiZSBwZXJtYW5lbnRcbmVjaG8gJFBBVEggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZGlyIHdoZXJlIGNtZHMgYXJlIGxvb2tlZCBmb3JcblBBVEg9XCIkUEFUSDovb3B0L25ld0ZvbGRlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2V4dGVuZCAkUEFUSCB3aXRoIG5ldyBmb2xkZXJcbmNhdCBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2F0YWxvZyBmaWxlLCBzaG93IGluIGJhc2hcbi9ldGMvYmFzaHJjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZ2xvYmFsIC5iYXNocmMgZmlsZVxubWFuIDxjbWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNtYW4gcGFnZSBmb3IgPGNtZD5cbi9ldGMgb3IgZXRjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYmVnaW5pbmcgd2l0aCAvIGlzIGFsd2F5cyB0aGUgYWJzb2x1dGUgcGF0aFxubHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IGRpclxuICAgIE9wdGlvbnM+ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgLWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbG9uZyBsaXN0XG4gICAgICAgIC1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgYWxsIHdpdGggaGlkZGVuXG4gICAgICAgIC1oICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2h1bWFuIHJlYWRhYmxlXG4gICAgICAgIC1TICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NvcnQgYnkgU2l6ZVxuICAgICAgICAtdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzb3J0IGJ5IGRhdGVcbiAgICAgICAgLXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmV2ZXJzZSBzb3J0aW5nXG5ta2RpciAtcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NyZWF0ZSBkaXIgYW5kIHBhcmVudCBkaXIgZXZlbiBpZiB0aGUgZXhpc3RzXG5maW5kIC4gLWluYW1lIFwidGVzdCoudHh0XCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2VhcmNoIGZvciBmaWxlcyBpbiBjdXJyZW50IGRpciguKSB0aGF0IGdvdCB0aGUgbmFtZSBcInRlc3RcIiBhbmQgZW5kIHdpdGggXCIudHh0XCIgaWdub3JlIGNhc2Ugc2Vuc2l0aXYoLWkpXG5maW5kIC4gLWFtaW4gNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NlYXJjaCBmb3IgZmlsZXMgdGhhdCBnb3QgdG91Y2hlZCBpbiB0aGUgbGFzdCA1IG1pbnMuICs1IGZpbGVzIG9sZGVyIHRoYW4gNSBtaW5zXG5maW5kIC4gLW1taW4gNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RoYXQgZ290IG1vZGlmaWVkXG5maW5kIC9wYXRoL3RvL2RhdGFzZXQgLXByaW50ZiAnJXMgJXBcXG4nIHwgc29ydCAtbnIgfCBoZWFkIC01MCAgICNsaXN0IDUwIGZpbGVzIGluIHRoYXQgZGlyIG9yZGVyZWQgYnkgc2l6ZVxuU1RET1VUIFNUREVSUiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzdGFuZGFydCBvdXRwdXQgYW5kIHN0ZCBlcnJvciAgICAgIFxuc2NyaXB0MS5zaCA+IC90bXAvb3V0cHV0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3cml0ZSBvdXRwdXQgb2Ygc2NyaXB0MS5zaCB0byB0aGUgZmlsZSAvdG1wL291dHB1dCBhbmQgb3ZlcnJpZGUgdGhlIG9sZCBjb250ZW50LiA+PiB0byBhcHBlbmRcbnNjcmlwdDEuc2ggMj4gL3RtcC9vdXRwdXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUgb25seSB0aGUgZXJyb3JzIGluIGl0XG5jYXQgZGF0ZWkgfCBzY3JpcHQyLnNoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3dpcnRlIG91dHB1dCBpbiBmaWxlXG5sZXNzL21vcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBsaWtlIGNhdCBidXQgd2l0aCBmb3JtYXRpbmcgYW5kIHNjcm9sbGluZ1xudGFpbCAtZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzaG93cyB0aGUgbGFzdCBsaW5lcyBvZiBhIGZpbGUgYW5kIGZvbGxvd3MgY2hhbmdlc1xuc3RhdCBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IGluZm9ybWF0aW9uIGZvciBmaWxlXG5zY3JlZW4gbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpa2Ugd2F0Y2hcbi9iaW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYWxsIGV4ZWN1dGFiZWxzXG5sc29mICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIy11IG9yIC1wIHVzZXIgdW5kIHByb2Nlc3MsIHdobyBpcyB1c2luZyB0aGUgZmlsZXNcbmxzYmxrICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdm9sdW1lIGluZm9cblxuQ29sb3Igb2YgY21kICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleHBvcnQgUFMxPVwiXFxlWzA7MzJtW1xcdUBcXGggXFxXXVxcJCBcXGVbbSBcIiAgMSBmdWVyIGdydWVuLCAyIGZ1ZXIgcm90LCAzIGZ1ZXIgZ2VsYlxuOiVzL29sZFN0cmluZy9uZXdTdHJpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNmaW5kIGFuZCByZXBsZWFjZSBvbGRzdHJpbmcgd2l0aCBuZXcgc3RyaW5nIGluIHZpbS4gRGVsaW1ldGVyIGNhbiBiZSBjaGFuZ2VkIGZyb20gLyB0byAjXG5hcHQtZ2V0IHVwZGF0ZSAtLWFsbG93LXVuYXV0aGVudGljYXRlZCAgICAgICAgICAgICAgICAgICAgICAgICAgI1xuICAgICAgICAgICAgb3IgLS1hbGxvdy1pbnNlY3VyZS1yZXBvc2l0b3JpZXMgICAtLS0tICAgICAgICAgICAgICN0byBhbGxvdyBpbnNpY3VyZSByZXBvc1xuYXB0LWNhY2hlIG1hZGlzb24gZ2NjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzaG93IGFsbCB2ZXJzaW9ucyBpbiByZXBvXG55dW0gZG93bmdyYWRlIGh0dHBkLTIuMi4zLTIyLmVsNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Rvd25ncmFkZSBwYWNrYWdlXG55dW0gLS1zaG93ZHVwbGljYXRlcyBsaXN0IGh0dHBkIHwgZXhwYW5kICAgICAgICAgICAgICAgICAgICAgICAgI3Nob3cgYWxsIHZlcnNpb25zIGluIHJlcG9cbnN1ZG8gYXB0IGxpc3QgLS1pbnN0YWxsZWQgfCBncmVwIC1pIGN1ZGEgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBhbGwgaW5zdGFsbGVkIGZyb20gY3VkYVxueXVtIGxpc3QgaW5zdGFsbGVkIHwgZ3JlcCBudmlkaWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IGFsbCBpbnN0YWxsZWQgZnJvbSBudmlkaWEgb24gcmhlbFxubHNvZiAtaSAtUCAtbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayB0aGUgbGlzdGVuaW5nIHBvcnRzXG50bXV4ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Rvb2wgdG8gbW9uaXRvci0gc3BsaXQgY29uc29sZSBpbiB3aW5kb3dzXG4gICAgT3B0aW9uczpcbiAgICAgICAgY3RybC1iICsgJSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3BsaXQgdmVydGljYWxseVxuICAgICAgICBjdHJsLWIgKyBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3BsaXQgaG9yaXpvbnRhbGx5XG4gICAgICAgIGN0cmwtYiBhbmQgYXJyb3dzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RvIG1vdmUgaW4gd2luZG93c1xudGFyIC14dnpmIHogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN1bnppcCBmaWxlXG50YXIgLXpjZiBmb2xkZXIudGFyLmd6IGZvbGRlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ppcCBmb2xkZXIgICAgICAgICAgXG4vdmFyL2xvZy8qLXNlcnZlci11cGRhdGUvbGF0ZXN0LmxvZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NlZSAqLXNlcnZlci11cGRhdGUgZXJyb3JzXG5lY2hvIHVzZXI6cGFzcyB8IC91c3Ivc2Jpbi9jaHBhc3N3ZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoYW5nZSBQVyBvZiB1c2VyIG9yIHdpdGggcGFzc3dkXG5jYXQgL2V0Yy9zdWRvZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3Qgc3Vkb2Vyc1xuY2htb2QgNzc3IGRhdGVpICtSICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2UgcGVybWlzc2lvbnMgT3duZXIgR3JvdXAgV29ybGRcbiAgICBPcHRpb25zOlxuICAgICAgICAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNObyBQZXJtaXNzaW9uc1xuICAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleGVjdXRlXG4gICAgICAgIDIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3dyaXRlXG4gICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2V4ZWN1dGUgKyB3cml0ZVxuICAgICAgICA0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWFkXG4gICAgICAgIDUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlYWQgYW5kIGV4ZWN1dGVcbiAgICAgICAgNiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVhZCArIHdyaXRlXG4gICAgICAgIDcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlYWQgKyB3cml0ZSArIGV4ZWN1dGVcbmNoZ3JwICtSIGdycCBkYXRlaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2hhbmdlIGdyb3VwXG5jaG93biAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoYW5nZSBvd25lciBlLmcgPiBjaG93biBlbmRyaXQgZmlsZVxubHNodyB8IGNwdSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNudW1iZXIgb2YgQ1BVJ3NcbmZyZWUgLWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2hlY2sgUkFNXG5mZGlzayAtbCB8IGdyZXAgRGlzayAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoZWNrIEhhcmQgZHJpdmVzXG5sc2JsayAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoZWNrIGhhcmQgZHJpdmVzXG5wdXBwZXQgYWdlbnQgLXQgLS1uby1ub29wICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3J1biBwdXBwZXRcbmR1IC1zIC92YXIvbG9nLyogfCBzb3J0IC1uIHwgdGFpbCAtbiA1MCAgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBmaWxlcyBpbiAvdmFyL2xvZyBvcmRlcmVkIGJ5IHNpemUgXG5zd2Fwb2ZmIC1hICYmIHN3YXBvbiAtYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Vtb3VudCBhbmQgbW91bnQgc3dhcCBhdCBydW50aW1lXG5sc29mIC1uUCArTDEgZ3JlcCAvdG1wLyBvZGVyIGxzb2YgLW5QICtMMSBncmVwIGRlbGV0ZWQgICAgICAgICAgI2NoZWNrIGlmIGZpbGVzIGFyZSBkZWxldGVkIGFuZCB3aG8gaXMgdXNpbmcgdGhlbSAoZGVsZXRlZClcbnRyZWUgLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHByaW50IHRyZWUgb2YgdGhlIGN1cnJlbnQgZGlyZWN0b3J5XG55dW0gdmVyc2lvbmxvY2sgPHBhY2thZ2UtbmFtZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5nZXRlbnQgcGFzc3dkIDxVSUQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RvIGdldCBVc2VyaWQgZnJvbSB1aWRcbmNoYXR0ciAraSA8ZmlsZW5hbWU+ICAgICAgICAgICAgICAgICAgICAgICAgI01ha2UgYSBmaWxlIHVuY2hhbmdlYWJsZSB1bXV0YWJsZSA8Y2hhdHRyIC1pPiB0byB0YWtlIHRoYXQgYmFja1xuIikpLG1keCgiaDMiLHsiaWQiOiJob3ctdG8tbW91bnQtYS1uZXctZHJpdmUtZGV2c2RiIn0sIkhvdyB0byBtb3VudCBhIG5ldyBEcml2ZSAvZGV2L3NkYiIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiI0NyZWF0ZSBuZXcgcGh5c2ljYWwgZGV2aWNlXG5wdmNyZWF0ZSAvZGV2L3NkYlxuXG4jQ3JlYXRlIG5ldyBWb2x1bWUgR3JvdXAgdmdfZGF0ZW4xXG52Z2NyZWF0ZSB2Z19kYXRlbjEgL2Rldi9zZGJcblxuI2NoZWNrIHRoZSBuZXcgdm9sdW1lc1xucHZkaXNwbGF5XG5cbiNjcmVhdGUgbmV3IExvZ2ljYWwgVm9sdW1lIEdycHVwIHdpdGggMTAwJSBmcm9tIHZnX2RhdGVucVxubHZjcmVhdGUgLW4gL2Rldi9tYXBwZXIvdmdfZGF0ZW4xLWx2X29wdF9kYXRhIC1sMTAwJVZHIHZnX2RhdGVuMVxuXG4jZm9ybWF0IHRoZSBuZXcgZHJpdmVcbm1rZnMuZXh0NCAvZGV2L3ZnX2RhdGVuMS9sdl9vcHRfZGF0YVxuXG4jY3JlYXRlIG1vdW50cG9pbnRcbm1rZGlyIC9vcHQvZGF0YVxuXG4jbW91bnQgbmV3IGRyaXZlXG5tb3VudCAvZGV2L3ZnX2RhdGVuMS9sdl9vcHRfZGF0YSAvb3B0L2RhdGFcbiIpKSxtZHgoImgzIix7ImlkIjoiZ2VuZXJhdGUtc3NsLWNlcnRpZmljYXRlcy1hbmQtZ2V0LXRoZW0tc2lnbmVkIn0sIkdlbmVyYXRlIFNTTCBDZXJ0aWZpY2F0ZXMgYW5kIGdldCB0aGVtIHNpZ25lZCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiMS4gZ2VuZXJhdGUgcHJpdmF0ZSBrZXlcbiRvcGVuc3NsIHJlcSAteDUwOSAtbm9kZXMgLWRheXMgNzMwIC1uZXdrZXkgcnNhOjIwNDggLWtleW91dCA8cHJpdmF0ZS1zc2wta2V5Pi5wZW1cblxuMi4gZ2VuZXJhdGUgQ1NSIHdpdGggdGhhdCBwcml2YXRlIGtleVxuI2RvbnQgZm9yZ2V0IHRoZSBXaWxkY2FyZHMgaWYgdXNpbmcgc3ViZG9tYWluc1xuJG9wZW5zc2wgcmVxIC1uZXcgLWtleSA8cHJpdmF0ZS1zc2wta2V5Pi5wZW0gLXNoYTI1NiAtbm9kZXMgIC1vdXQgPGNzci1zc2w+LmNzclxuXG4zLiByZXF1ZXN0IHNpZ25lZCBDU1JcbiAgICBHbyB0byBBU0sgeW91ciBJVCBkZXBhcnRtZW50XG5cbjQuIFlvdSB3aWxsIGdldCBhIHNpZ25lZCBDUlMtQ2VydGlmaWNhdGVcbiAgICBZb3Ugd2lsbCBnZXQgYSBzaWduZWQgQ1NSLUNlcnRpZmlhY2Ugc29tZXRoaW5nIGxpa2UgPGNzci1zc2w+LmNlclxuXG5DaGVjayBpZiB0aGUgbWQ1c3VtcyBpcyBjb3JyZWN0LiBOZWVkIHRvIGJlIGVxdWFsXG5cbiNmb3IgcHJpdmF0ZSBLRVlcbm9wZW5zc2wgcnNhIC1ub291dCAtbW9kdWx1cyAtaW4gPHByaXZhdGUtc3NsLWtleT4ucGVtIHwgb3BlbnNzbCBtZDVcbihzdGRpbik9IGY1N2EzYjk4YjA4MGY2ZDM0YzZlMzU0NmJhZGZmYjE0XG5cbiNmb3IgQ1NSLUZpbGVcbm9wZW5zc2wgcmVxIC1ub291dCAtbW9kdWx1cyAtaW4gPGNzci1zc2w+LmNzciB8IG9wZW5zc2wgbWQ1XG4oc3RkaW4pPSBmNTdhM2I5OGIwODBmNmQzNGM2ZTM1NDZiYWRmZmIxNFxuXG4jZm9yIFNpZ25lZCBDZXJ0XG5vcGVuc3NsIHg1MDkgLW5vb3V0IC1tb2R1bHVzIC1pbiA8Y3NyLXNzbD4uY2VyIHwgb3BlbnNzbCBtZDVcbihzdGRpbik9IGY1N2EzYjk4YjA4MGY2ZDM0YzZlMzU0NmJhZGZmYjE0XG5cbiMgZm9yIHdlYnBhZ2VcbmVjaG8gfCBvcGVuc3NsIHNfY2xpZW50IC1zZXJ2ZXJuYW1lIDxOQU1FPiAtY29ubmVjdCA8SE9TVDpQT1JUPiAyPi9kZXYvbnVsbCB8IG9wZW5zc2wgeDUwOSAtbm9vdXQgLWRhdGVzXG5cbiNjaGVjayBkYXRlIGZvciBzc2wtY2xzIGNlcnRcbm9wZW5zc2wgeDUwOSAtZW5kZGF0ZSAtbm9vdXQgLWluIDxjc3Itc3NsPi5jZXJcbm9wZW5zc2wgeDUwOSAtZGF0ZXMgLW5vb3V0IC1pbiA8Y3NyLXNzbD4uY2VyXG4iKSksbWR4KCJoMyIseyJpZCI6ImdyZXAifSwiR1JFUCIpLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSwiZ3JlcCA8dGVybT4gPGZpbGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzZWFyY2ggZm9yIHRlcm0gaW4gZmlsZVxuZ3JlcCAtaSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNpZ25vcmUgY2FzZVxuc3VkbyBncmVwIC1yIDxwYXR0ZXJuPiBwYXRoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzZWFyY2ggZm9yIHBhdHRlcm4gaW4gZmlsZXNcbmdyZXAgLXJudyAnL3BhdGgnIC1lICdwYXR0ZXJuJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjICAgIFxuY2F0IHRlc3RmaWxlIHwgZ3JlcCAtLWNvbG9yPWFsd2F5cyAteiAnaGVsbG8nICAgICAgICAgICAgICAgICAgICNtYXJrIHRoZSB3b3JkIGhlbGxvIHVuZCBzaG93IGFsbCBsaW5lcyB3aXRoIGdyZXBcbiIpKSxtZHgoImgyIix7ImlkIjoidGVzdCJ9LCJ0ZXN0IikpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},null]}