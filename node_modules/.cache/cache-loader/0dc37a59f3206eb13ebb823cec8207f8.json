{"remainingRequest":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit/Documents/endritdemaj.github.io/docs/documentation/linux.md","dependencies":[{"path":"/home/endrit/Documents/endritdemaj.github.io/docs/documentation/linux.md","mtime":1598250104780},{"path":"/home/endrit/Documents/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-linux-md-140.json","mtime":1598207006665},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1598202332903},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1598202332899}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/endrit/Documents/endritdemaj.github.io/docs/documentation/linux.md"],"names":["React","mdx","frontMatter","id","title","sidebar_label","metadata","rightToc","value","children","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"mHACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CAEA,MAAO,MAAMC,CAAAA,WAAW,CAAG,CAC5BC,EAAE,CAAE,iBADwB,CAE5BC,KAAK,CAAE,kBAFqB,CAG5BC,aAAa,CAAE,kBAHa,CAApB,CAKT,MAAO,MAAMC,CAAAA,QAAQ,CAAG,CACtB,gBAAiB,+BADK,CAEtB,KAAM,+BAFgB,CAGtB,iBAAkB,KAHI,CAItB,QAAS,kBAJa,CAKtB,cAAe,8DALO,CAMtB,SAAU,mCANY,CAOtB,YAAa,2DAPS,CAQtB,UAAW,wFARW,CAStB,gBAAiB,kBATK,CAUtB,UAAW,aAVW,CAWtB,WAAY,CACV,QAAS,2BADC,CAEV,YAAa,kCAFH,CAXU,CAetB,OAAQ,CACN,QAAS,mBADH,CAEN,YAAa,4DAFP,CAfc,CAAjB,CAoBL,cAEF,MAAO,MAAMC,CAAAA,QAAQ,CAAG,CAAC,CACvBC,KAAK,CAAE,iBADgB,CAEvBL,EAAE,CAAE,iBAFmB,CAGvBM,QAAQ,CAAE,CAAC,CACTD,KAAK,CAAE,mCADE,CAETL,EAAE,CAAE,iCAFK,CAGTM,QAAQ,CAAE,EAHD,CAAD,CAHa,CAAD,CAAjB,CAUP,KAAMC,CAAAA,WAAW,CAAG,CAClBH,QADkB,CAApB,CAGA,KAAMI,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,CAAoB,CACjCC,UADiC,CAEjC,GAAGC,KAF8B,CAApB,CAGZ,CACD,MAAO,KAAC,SAAD,aAAeJ,WAAf,CAAgCI,KAAhC,EAAuC,UAAU,CAAED,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GAEL,aAAK,8BAAL,CAAmC,kBAAG,UAAU,CAAC,GAAd,EAAsB,CACrD,OAAQ,gCAD6C,CAAtB,EAE5B,iCAF4B,CAAnC,CAE8C,GAF9C,CAFK,CAKL,SAAQ,CACN,KAAM,iBADA,CAAR,CAEK,iBAFL,CALK,CAQL,eAAK,qBAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,EAAiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAjC,CAAL,CARK,CA6FL,SAAQ,CACN,KAAM,iCADA,CAAR,CAEK,mCAFL,CA7FK,CAgGL,eAAK,qBAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,EAAiC;CAAjC,CAAL,CAhGK,CAkGL,aAAK,sBAAL,CAlGK,CAmGL,aAAK;4BAAL,CAnGK,CAqGL,aAAK;UAAL,CArGK,CAuGL,aAAK;iEAAL,CAvGK,CAyGL,aAAK;qCAAL,CAzGK,CA2GL,aAAK;gBAAL,CA3GK,CA6GL,aAAK;2CAAL,CA7GK,CAAP,CAgHD,CAED,CACAD,UAAU,CAACG,cAAX,CAA4B,IAA5B","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'linuxcheatsheet',\n\ttitle: 'Linux Cheatsheat',\n\tsidebar_label: 'Linux Cheatsheat'\n};\nexport const metadata = {\n  \"unversionedId\": \"documentation/linuxcheatsheet\",\n  \"id\": \"documentation/linuxcheatsheet\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Linux Cheatsheat\",\n  \"description\": \"You can write content using GitHub-flavored Markdown syntax.\",\n  \"source\": \"@site/docs/documentation/linux.md\",\n  \"permalink\": \"/endritdemaj.github.io/docs/documentation/linuxcheatsheet\",\n  \"editUrl\": \"https://github.com/facebook/docusaurus/edit/master/website/docs/documentation/linux.md\",\n  \"sidebar_label\": \"Linux Cheatsheat\",\n  \"sidebar\": \"someSidebar\",\n  \"previous\": {\n    \"title\": \"This is Document Number 3\",\n    \"permalink\": \"/endritdemaj.github.io/docs/doc3\"\n  },\n  \"next\": {\n    \"title\": \"Docker Cheatsheat\",\n    \"permalink\": \"/endritdemaj.github.io/docs/documentation/dockercheatsheet\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: 'Markdown Syntax',\n  id: 'markdown-syntax',\n  children: [{\n    value: 'How to mount a new Drive /dev/sdb',\n    id: 'how-to-mount-a-new-drive-devsdb',\n    children: []\n  }]\n}];\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`You can write content using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.github.com/gfm/\"\n      }}>{`GitHub-flavored Markdown syntax`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"markdown-syntax\"\n    }}>{`Markdown Syntax`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`pwd                                                             #print working directory   \nhistory                                                         #show last run commands\nhistory_persistant                                              #show persistant history with timestamp\n<cmd> &                                                         #run <cmd> in background or hit ctrl+Z\nnohup <cmd>                                                     #<cmd> runs even after user logges out\nwatch <cmd>                                                     #tracks output of <cmd> and refreshs every 2 seconds\n<cmd> || <cmd2>                                                 #run <cmd2> when <cmd> has an error\n<cmd> && <cmd2>                                                 #run <cmd2> only when <cmd> was sucessfull\necho $?                                                         #check return value of last run cmd, echo $hallo->hallo\nalisa dir=\"ls\"                                                  #create an alias vor 'ls'. Put that in ~/.bashrc for it to be permanent\necho $PATH                                                      #dir where cmds are looked for\nPATH=\"$PATH:/opt/newFolder                                      #extend $PATH with new folder\ncat file                                                        #catalog file, show in bash\n/etc/bashrc                                                     #global .bashrc file\nman <cmd>                                                       #man page for <cmd>\n/etc or etc                                                     #begining with / is always the absolute path\nls                                                              #list dir\n    Options>                    \n        -l                                                      #long list\n        -a                                                      #list all with hidden\n        -h                                                      #human readable\n        -S                                                      #sort by Size\n        -t                                                      #sort by date\n        -r                                                      #reverse sorting\nmkdir -p                                                        #create dir and parent dir even if the exists\nfind . -iname \"test*.txt\"                                       #search for files in current dir(.) that got the name \"test\" and end with \".txt\" ignore case sensitiv(-i)\nfind . -amin 5                                                  #search for files that got touched in the last 5 mins. +5 files older than 5 mins\nfind . -mmin 5                                                  #that got modified\nfind /path/to/dataset -printf '%s %p\\\\n' | sort -nr | head -50   #list 50 files in that dir ordered by size\nSTDOUT STDERR                                                   #standart output and std error      \nscript1.sh > /tmp/output                                        #write output of script1.sh to the file /tmp/output and override the old content. >> to append\nscript1.sh 2> /tmp/output                                       #write only the errors in it\ncat datei | script2.sh                                          #wirte output in file\nless/more                                                       # like cat but with formating and scrolling\ntail -f                                                         #shows the last lines of a file and follows changes\nstat file                                                       #list information for file\nscreen ls                                                       #like watch\n/bin                                                            #all executabels\nlsof                                                            #-u or -p user und process, who is using the files\nlsblk                                                           #volume info\ngrep <term> <file>                                              #search for term in file\ngrep -i                                                         #ignore case\nColor of cmd                                                    #export PS1=\"\\\\e[0;32m[\\\\u@\\\\h \\\\W]\\\\$ \\\\e[m \"  1 fuer gruen, 2 fuer rot, 3 fuer gelb\n:%s/oldString/newString                                         #find and repleace oldstring with new string in vim. Delimeter can be changed from / to #\napt-get update --allow-unauthenticated                          #\n            or --allow-insecure-repositories   ----             #to allow insicure repos\napt-cache madison gcc                                           #show all versions in repo\nyum downgrade httpd-2.2.3-22.el5                                #downgrade package\nyum --showduplicates list httpd | expand                        #show all versions in repo\nsudo apt list --installed | grep -i cuda                        #list all installed from cuda\nyum list installed | grep nvidia                                #list all installed from nvidia on rhel\nsudo grep -r <pattern> path                                     #search for pattern in files\ngrep -rnw '/path' -e 'pattern'                                  #    \nlsof -i -P -n                                                   #check the listening ports\ntmux                                                            #tool to monitor- split console in windows\n    Options:\n        ctrl-b + %                                              #split vertically\n        ctrl-b + \"                                              #split horizontally\n        ctrl-b and arrows                                       #to move in windows\ntar -xvzf z                                                     #unzip file\ntar -zcf folder.tar.gz folder                                   #zip folder          \n/var/log/*-server-update/latest.log                             #see *-server-update errors\necho user:pass | /usr/sbin/chpasswd                             #change PW of user or with passwd\ncat /etc/sudoers                                                #list sudoers\nchmod 777 datei +R                                              #change permissions Owner Group World\n    Options:\n        0                                                       #No Permissions\n        1                                                       #execute\n        2                                                       #write\n        3                                                       #execute + write\n        4                                                       #read\n        5                                                       #read and execute\n        6                                                       #read + write\n        7                                                       #read + write + execute\nchgrp +R grp datei                                              #change group\nchown                                                           #change owner e.g > chown endrit file\nlshw | cpu                                                      #number of CPU's\nfree -g                                                         #check RAM\nfdisk -l | grep Disk                                            #check Hard drives\nlsblk                                                           #check hard drives\npuppet agent -t --no-noop                                       #run puppet\ndu -s /var/log/* | sort -n | tail -n 50                         #list files in /var/log ordered by size \nswapoff -a && swapon -a                                         #umount and mount swap at runtime\nlsof -nP +L1 grep /tmp/ oder lsof -nP +L1 grep deleted          #check if files are deleted and who is using them (deleted)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"how-to-mount-a-new-drive-devsdb\"\n    }}>{`How to mount a new Drive /dev/sdb`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`#Create new physical device\n`}</code></pre>\n    <p>{`   pvcreate /dev/sdb`}</p>\n    <p>{`   #Create new Volume Group vg_daten1\nvgcreate vg_daten1 /dev/sdb`}</p>\n    <p>{`   #check the new volumes\npvdisplay`}</p>\n    <p>{`   #create new Logical Volume Grpup with 100% from vg_datenq\nlvcreate -n /dev/mapper/vg_daten1-lv_opt_data -l100%VG vg_daten1`}</p>\n    <p>{`   #format the new drive\nmkfs.ext4 /dev/vg_daten1/lv_opt_data`}</p>\n    <p>{`   #create mountpoint\nmkdir /opt/data`}</p>\n    <p>{`   #mount new drive\nmount /dev/vg_daten1/lv_opt_data /opt/data`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}