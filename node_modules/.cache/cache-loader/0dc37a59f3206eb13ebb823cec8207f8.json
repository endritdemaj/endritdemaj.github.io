{"remainingRequest":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit/Documents/endritdemaj.github.io/docs/documentation/linux.md","dependencies":[{"path":"/home/endrit/Documents/endritdemaj.github.io/docs/documentation/linux.md","mtime":1599594774834},{"path":"/home/endrit/Documents/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-linux-md-140.json","mtime":1599202975885},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1598202332903},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1598202332899}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvZW5kcml0L0RvY3VtZW50cy9lbmRyaXRkZW1hai5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyPXtpZDonbGludXhjaGVhdHNoZWV0Jyx0aXRsZTonTGludXggQ2hlYXRzaGVhdCcsc2lkZWJhcl9sYWJlbDonTGludXggQ2hlYXRzaGVhdCd9O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17InVudmVyc2lvbmVkSWQiOiJkb2N1bWVudGF0aW9uL2xpbnV4Y2hlYXRzaGVldCIsImlkIjoiZG9jdW1lbnRhdGlvbi9saW51eGNoZWF0c2hlZXQiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiTGludXggQ2hlYXRzaGVhdCIsImRlc2NyaXB0aW9uIjoicHdkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNwcmludCB3b3JraW5nIGRpcmVjdG9yeSIsInNvdXJjZSI6IkBzaXRlL2RvY3MvZG9jdW1lbnRhdGlvbi9saW51eC5tZCIsInBlcm1hbGluayI6Ii9lbmRyaXRkZW1hai5naXRodWIuaW8vZG9jcy9kb2N1bWVudGF0aW9uL2xpbnV4Y2hlYXRzaGVldCIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZG9jdXNhdXJ1cy9lZGl0L21hc3Rlci93ZWJzaXRlL2RvY3MvZG9jdW1lbnRhdGlvbi9saW51eC5tZCIsInNpZGViYXJfbGFiZWwiOiJMaW51eCBDaGVhdHNoZWF0Iiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJUaGlzIGlzIERvY3VtZW50IE51bWJlciAzIiwicGVybWFsaW5rIjoiL2VuZHJpdGRlbWFqLmdpdGh1Yi5pby9kb2NzL2RvYzMifSwibmV4dCI6eyJ0aXRsZSI6IkRvY2tlciBDaGVhdHNoZWF0IiwicGVybWFsaW5rIjoiL2VuZHJpdGRlbWFqLmdpdGh1Yi5pby9kb2NzL2RvY3VtZW50YXRpb24vZG9ja2VyY2hlYXRzaGVldCJ9fTsvKiBAanN4IG1keCAqL2V4cG9ydCBjb25zdCByaWdodFRvYz1be3ZhbHVlOidIb3cgdG8gbW91bnQgYSBuZXcgRHJpdmUgL2Rldi9zZGInLGlkOidob3ctdG8tbW91bnQtYS1uZXctZHJpdmUtZGV2c2RiJyxjaGlsZHJlbjpbXX1dO2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGBwd2QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50IHdvcmtpbmcgZGlyZWN0b3J5ICAgCmhpc3RvcnkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBsYXN0IHJ1biBjb21tYW5kcwpoaXN0b3J5X3BlcnNpc3RhbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Nob3cgcGVyc2lzdGFudCBoaXN0b3J5IHdpdGggdGltZXN0YW1wCjxjbWQ+ICYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIDxjbWQ+IGluIGJhY2tncm91bmQgb3IgaGl0IGN0cmwrWgpub2h1cCA8Y21kPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIzxjbWQ+IHJ1bnMgZXZlbiBhZnRlciB1c2VyIGxvZ2dlcyBvdXQKd2F0Y2ggPGNtZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0cmFja3Mgb3V0cHV0IG9mIDxjbWQ+IGFuZCByZWZyZXNocyBldmVyeSAyIHNlY29uZHMKPGNtZD4gfHwgPGNtZDI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNydW4gPGNtZDI+IHdoZW4gPGNtZD4gaGFzIGFuIGVycm9yCjxjbWQ+ICYmIDxjbWQyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIDxjbWQyPiBvbmx5IHdoZW4gPGNtZD4gd2FzIHN1Y2Vzc2Z1bGwKZWNobyAkPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayByZXR1cm4gdmFsdWUgb2YgbGFzdCBydW4gY21kLCBlY2hvICRoYWxsby0+aGFsbG8KYWxpc2EgZGlyPSJscyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjcmVhdGUgYW4gYWxpYXMgdm9yICdscycuIFB1dCB0aGF0IGluIH4vLmJhc2hyYyBmb3IgaXQgdG8gYmUgcGVybWFuZW50CmVjaG8gJFBBVEggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZGlyIHdoZXJlIGNtZHMgYXJlIGxvb2tlZCBmb3IKUEFUSD0iJFBBVEg6L29wdC9uZXdGb2xkZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleHRlbmQgJFBBVEggd2l0aCBuZXcgZm9sZGVyCmNhdCBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2F0YWxvZyBmaWxlLCBzaG93IGluIGJhc2gKL2V0Yy9iYXNocmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNnbG9iYWwgLmJhc2hyYyBmaWxlCm1hbiA8Y21kPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbWFuIHBhZ2UgZm9yIDxjbWQ+Ci9ldGMgb3IgZXRjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYmVnaW5pbmcgd2l0aCAvIGlzIGFsd2F5cyB0aGUgYWJzb2x1dGUgcGF0aApscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgZGlyCiAgICBPcHRpb25zPiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgLWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbG9uZyBsaXN0CiAgICAgICAgLWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBhbGwgd2l0aCBoaWRkZW4KICAgICAgICAtaCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNodW1hbiByZWFkYWJsZQogICAgICAgIC1TICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NvcnQgYnkgU2l6ZQogICAgICAgIC10ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NvcnQgYnkgZGF0ZQogICAgICAgIC1yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JldmVyc2Ugc29ydGluZwpta2RpciAtcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NyZWF0ZSBkaXIgYW5kIHBhcmVudCBkaXIgZXZlbiBpZiB0aGUgZXhpc3RzCmZpbmQgLiAtaW5hbWUgInRlc3QqLnR4dCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2VhcmNoIGZvciBmaWxlcyBpbiBjdXJyZW50IGRpciguKSB0aGF0IGdvdCB0aGUgbmFtZSAidGVzdCIgYW5kIGVuZCB3aXRoICIudHh0IiBpZ25vcmUgY2FzZSBzZW5zaXRpdigtaSkKZmluZCAuIC1hbWluIDUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzZWFyY2ggZm9yIGZpbGVzIHRoYXQgZ290IHRvdWNoZWQgaW4gdGhlIGxhc3QgNSBtaW5zLiArNSBmaWxlcyBvbGRlciB0aGFuIDUgbWlucwpmaW5kIC4gLW1taW4gNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RoYXQgZ290IG1vZGlmaWVkCmZpbmQgL3BhdGgvdG8vZGF0YXNldCAtcHJpbnRmICclcyAlcFxcbicgfCBzb3J0IC1uciB8IGhlYWQgLTUwICAgI2xpc3QgNTAgZmlsZXMgaW4gdGhhdCBkaXIgb3JkZXJlZCBieSBzaXplClNURE9VVCBTVERFUlIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3RhbmRhcnQgb3V0cHV0IGFuZCBzdGQgZXJyb3IgICAgICAKc2NyaXB0MS5zaCA+IC90bXAvb3V0cHV0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3cml0ZSBvdXRwdXQgb2Ygc2NyaXB0MS5zaCB0byB0aGUgZmlsZSAvdG1wL291dHB1dCBhbmQgb3ZlcnJpZGUgdGhlIG9sZCBjb250ZW50LiA+PiB0byBhcHBlbmQKc2NyaXB0MS5zaCAyPiAvdG1wL291dHB1dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3cml0ZSBvbmx5IHRoZSBlcnJvcnMgaW4gaXQKY2F0IGRhdGVpIHwgc2NyaXB0Mi5zaCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3aXJ0ZSBvdXRwdXQgaW4gZmlsZQpsZXNzL21vcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBsaWtlIGNhdCBidXQgd2l0aCBmb3JtYXRpbmcgYW5kIHNjcm9sbGluZwp0YWlsIC1mICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Nob3dzIHRoZSBsYXN0IGxpbmVzIG9mIGEgZmlsZSBhbmQgZm9sbG93cyBjaGFuZ2VzCnN0YXQgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBpbmZvcm1hdGlvbiBmb3IgZmlsZQpzY3JlZW4gbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpa2Ugd2F0Y2gKL2JpbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNhbGwgZXhlY3V0YWJlbHMKbHNvZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMtdSBvciAtcCB1c2VyIHVuZCBwcm9jZXNzLCB3aG8gaXMgdXNpbmcgdGhlIGZpbGVzCmxzYmxrICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdm9sdW1lIGluZm8KZ3JlcCA8dGVybT4gPGZpbGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzZWFyY2ggZm9yIHRlcm0gaW4gZmlsZQpncmVwIC1pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2lnbm9yZSBjYXNlCkNvbG9yIG9mIGNtZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZXhwb3J0IFBTMT0iXFxlWzA7MzJtW1xcdUBcXGggXFxXXVxcJCBcXGVbbSAiICAxIGZ1ZXIgZ3J1ZW4sIDIgZnVlciByb3QsIDMgZnVlciBnZWxiCjolcy9vbGRTdHJpbmcvbmV3U3RyaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZmluZCBhbmQgcmVwbGVhY2Ugb2xkc3RyaW5nIHdpdGggbmV3IHN0cmluZyBpbiB2aW0uIERlbGltZXRlciBjYW4gYmUgY2hhbmdlZCBmcm9tIC8gdG8gIwphcHQtZ2V0IHVwZGF0ZSAtLWFsbG93LXVuYXV0aGVudGljYXRlZCAgICAgICAgICAgICAgICAgICAgICAgICAgIwogICAgICAgICAgICBvciAtLWFsbG93LWluc2VjdXJlLXJlcG9zaXRvcmllcyAgIC0tLS0gICAgICAgICAgICAgI3RvIGFsbG93IGluc2ljdXJlIHJlcG9zCmFwdC1jYWNoZSBtYWRpc29uIGdjYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBhbGwgdmVyc2lvbnMgaW4gcmVwbwp5dW0gZG93bmdyYWRlIGh0dHBkLTIuMi4zLTIyLmVsNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Rvd25ncmFkZSBwYWNrYWdlCnl1bSAtLXNob3dkdXBsaWNhdGVzIGxpc3QgaHR0cGQgfCBleHBhbmQgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBhbGwgdmVyc2lvbnMgaW4gcmVwbwpzdWRvIGFwdCBsaXN0IC0taW5zdGFsbGVkIHwgZ3JlcCAtaSBjdWRhICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgYWxsIGluc3RhbGxlZCBmcm9tIGN1ZGEKeXVtIGxpc3QgaW5zdGFsbGVkIHwgZ3JlcCBudmlkaWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IGFsbCBpbnN0YWxsZWQgZnJvbSBudmlkaWEgb24gcmhlbApzdWRvIGdyZXAgLXIgPHBhdHRlcm4+IHBhdGggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NlYXJjaCBmb3IgcGF0dGVybiBpbiBmaWxlcwpncmVwIC1ybncgJy9wYXRoJyAtZSAncGF0dGVybicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAKbHNvZiAtaSAtUCAtbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayB0aGUgbGlzdGVuaW5nIHBvcnRzCnRtdXggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdG9vbCB0byBtb25pdG9yLSBzcGxpdCBjb25zb2xlIGluIHdpbmRvd3MKICAgIE9wdGlvbnM6CiAgICAgICAgY3RybC1iICsgJSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3BsaXQgdmVydGljYWxseQogICAgICAgIGN0cmwtYiArICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NwbGl0IGhvcml6b250YWxseQogICAgICAgIGN0cmwtYiBhbmQgYXJyb3dzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RvIG1vdmUgaW4gd2luZG93cwp0YXIgLXh2emYgeiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3VuemlwIGZpbGUKdGFyIC16Y2YgZm9sZGVyLnRhci5neiBmb2xkZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN6aXAgZm9sZGVyICAgICAgICAgIAovdmFyL2xvZy8qLXNlcnZlci11cGRhdGUvbGF0ZXN0LmxvZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NlZSAqLXNlcnZlci11cGRhdGUgZXJyb3JzCmVjaG8gdXNlcjpwYXNzIHwgL3Vzci9zYmluL2NocGFzc3dkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2hhbmdlIFBXIG9mIHVzZXIgb3Igd2l0aCBwYXNzd2QKY2F0IC9ldGMvc3Vkb2VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IHN1ZG9lcnMKY2htb2QgNzc3IGRhdGVpICtSICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2UgcGVybWlzc2lvbnMgT3duZXIgR3JvdXAgV29ybGQKICAgIE9wdGlvbnM6CiAgICAgICAgMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjTm8gUGVybWlzc2lvbnMKICAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleGVjdXRlCiAgICAgICAgMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUKICAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleGVjdXRlICsgd3JpdGUKICAgICAgICA0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWFkCiAgICAgICAgNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVhZCBhbmQgZXhlY3V0ZQogICAgICAgIDYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlYWQgKyB3cml0ZQogICAgICAgIDcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlYWQgKyB3cml0ZSArIGV4ZWN1dGUKY2hncnAgK1IgZ3JwIGRhdGVpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2UgZ3JvdXAKY2hvd24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2Ugb3duZXIgZS5nID4gY2hvd24gZW5kcml0IGZpbGUKbHNodyB8IGNwdSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNudW1iZXIgb2YgQ1BVJ3MKZnJlZSAtZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayBSQU0KZmRpc2sgLWwgfCBncmVwIERpc2sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayBIYXJkIGRyaXZlcwpsc2JsayAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoZWNrIGhhcmQgZHJpdmVzCnB1cHBldCBhZ2VudCAtdCAtLW5vLW5vb3AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIHB1cHBldApkdSAtcyAvdmFyL2xvZy8qIHwgc29ydCAtbiB8IHRhaWwgLW4gNTAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgZmlsZXMgaW4gL3Zhci9sb2cgb3JkZXJlZCBieSBzaXplIApzd2Fwb2ZmIC1hICYmIHN3YXBvbiAtYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Vtb3VudCBhbmQgbW91bnQgc3dhcCBhdCBydW50aW1lCmxzb2YgLW5QICtMMSBncmVwIC90bXAvIG9kZXIgbHNvZiAtblAgK0wxIGdyZXAgZGVsZXRlZCAgICAgICAgICAjY2hlY2sgaWYgZmlsZXMgYXJlIGRlbGV0ZWQgYW5kIHdobyBpcyB1c2luZyB0aGVtIChkZWxldGVkKQp0cmVlIC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBwcmludCB0cmVlIG9mIHRoZSBjdXJyZW50IGRpcmVjdG9yeQp5dW0gdmVyc2lvbmxvY2sgPHBhY2thZ2UtbmFtZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCmdldGVudCBwYXNzd2QgPFVJRD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdG8gZ2V0IFVzZXJpZCBmcm9tIHVpZApgKSksbWR4KCJoMyIseyJpZCI6Imhvdy10by1tb3VudC1hLW5ldy1kcml2ZS1kZXZzZGIifSxgSG93IHRvIG1vdW50IGEgbmV3IERyaXZlIC9kZXYvc2RiYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGAjQ3JlYXRlIG5ldyBwaHlzaWNhbCBkZXZpY2UKcHZjcmVhdGUgL2Rldi9zZGIKCiNDcmVhdGUgbmV3IFZvbHVtZSBHcm91cCB2Z19kYXRlbjEKdmdjcmVhdGUgdmdfZGF0ZW4xIC9kZXYvc2RiCgojY2hlY2sgdGhlIG5ldyB2b2x1bWVzCnB2ZGlzcGxheQoKI2NyZWF0ZSBuZXcgTG9naWNhbCBWb2x1bWUgR3JwdXAgd2l0aCAxMDAlIGZyb20gdmdfZGF0ZW5xCmx2Y3JlYXRlIC1uIC9kZXYvbWFwcGVyL3ZnX2RhdGVuMS1sdl9vcHRfZGF0YSAtbDEwMCVWRyB2Z19kYXRlbjEKCiNmb3JtYXQgdGhlIG5ldyBkcml2ZQpta2ZzLmV4dDQgL2Rldi92Z19kYXRlbjEvbHZfb3B0X2RhdGEKCiNjcmVhdGUgbW91bnRwb2ludApta2RpciAvb3B0L2RhdGEKCiNtb3VudCBuZXcgZHJpdmUKbW91bnQgL2Rldi92Z19kYXRlbjEvbHZfb3B0X2RhdGEgL29wdC9kYXRhCmApKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},{"version":3,"sources":["/home/endrit/Documents/endritdemaj.github.io/docs/documentation/linux.md"],"names":["React","mdx","frontMatter","id","title","sidebar_label","metadata","rightToc","value","children","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"mHACE,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,KAAoB,eAApB,CAEA,MAAO,MAAMC,CAAAA,WAAW,CAAG,CAC5BC,EAAE,CAAE,iBADwB,CAE5BC,KAAK,CAAE,kBAFqB,CAG5BC,aAAa,CAAE,kBAHa,CAApB,CAKT,MAAO,MAAMC,CAAAA,QAAQ,CAAG,CACtB,gBAAiB,+BADK,CAEtB,KAAM,+BAFgB,CAGtB,iBAAkB,KAHI,CAItB,QAAS,kBAJa,CAKtB,cAAe,0FALO,CAMtB,SAAU,mCANY,CAOtB,YAAa,2DAPS,CAQtB,UAAW,wFARW,CAStB,gBAAiB,kBATK,CAUtB,UAAW,aAVW,CAWtB,WAAY,CACV,QAAS,2BADC,CAEV,YAAa,kCAFH,CAXU,CAetB,OAAQ,CACN,QAAS,mBADH,CAEN,YAAa,4DAFP,CAfc,CAAjB,CAoBL,cAEF,MAAO,MAAMC,CAAAA,QAAQ,CAAG,CAAC,CACvBC,KAAK,CAAE,mCADgB,CAEvBL,EAAE,CAAE,iCAFmB,CAGvBM,QAAQ,CAAE,EAHa,CAAD,CAAjB,CAMP,KAAMC,CAAAA,WAAW,CAAG,CAClBH,QADkB,CAApB,CAGA,KAAMI,CAAAA,SAAS,CAAG,SAAlB,CACA,cAAe,SAASC,CAAAA,UAAT,CAAoB,CACjCC,UADiC,CAEjC,GAAGC,KAF8B,CAApB,CAGZ,CACD,MAAO,KAAC,SAAD,aAAeJ,WAAf,CAAgCI,KAAhC,EAAuC,UAAU,CAAED,UAAnD,CAA+D,OAAO,CAAC,WAAvE,GAEL,eAAK,qBAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,EAAiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAjC,CAAL,CAFK,CA0FL,SAAQ,CACN,KAAM,iCADA,CAAR,CAEK,mCAFL,CA1FK,CA6FL,eAAK,qBAAM,UAAU,CAAC,KAAjB,EAA2B,EAA3B,EAAiC;;;;;;;;;;;;;;;;;;;;CAAjC,CAAL,CA7FK,CAAP,CAmHD,CAED,CACAD,UAAU,CAACG,cAAX,CAA4B,IAA5B","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'linuxcheatsheet',\n\ttitle: 'Linux Cheatsheat',\n\tsidebar_label: 'Linux Cheatsheat'\n};\nexport const metadata = {\n  \"unversionedId\": \"documentation/linuxcheatsheet\",\n  \"id\": \"documentation/linuxcheatsheet\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Linux Cheatsheat\",\n  \"description\": \"pwd                                                             #print working directory\",\n  \"source\": \"@site/docs/documentation/linux.md\",\n  \"permalink\": \"/endritdemaj.github.io/docs/documentation/linuxcheatsheet\",\n  \"editUrl\": \"https://github.com/facebook/docusaurus/edit/master/website/docs/documentation/linux.md\",\n  \"sidebar_label\": \"Linux Cheatsheat\",\n  \"sidebar\": \"someSidebar\",\n  \"previous\": {\n    \"title\": \"This is Document Number 3\",\n    \"permalink\": \"/endritdemaj.github.io/docs/doc3\"\n  },\n  \"next\": {\n    \"title\": \"Docker Cheatsheat\",\n    \"permalink\": \"/endritdemaj.github.io/docs/documentation/dockercheatsheet\"\n  }\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: 'How to mount a new Drive /dev/sdb',\n  id: 'how-to-mount-a-new-drive-devsdb',\n  children: []\n}];\n\nconst layoutProps = {\n  rightToc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <pre><code parentName=\"pre\" {...{}}>{`pwd                                                             #print working directory   \nhistory                                                         #show last run commands\nhistory_persistant                                              #show persistant history with timestamp\n<cmd> &                                                         #run <cmd> in background or hit ctrl+Z\nnohup <cmd>                                                     #<cmd> runs even after user logges out\nwatch <cmd>                                                     #tracks output of <cmd> and refreshs every 2 seconds\n<cmd> || <cmd2>                                                 #run <cmd2> when <cmd> has an error\n<cmd> && <cmd2>                                                 #run <cmd2> only when <cmd> was sucessfull\necho $?                                                         #check return value of last run cmd, echo $hallo->hallo\nalisa dir=\"ls\"                                                  #create an alias vor 'ls'. Put that in ~/.bashrc for it to be permanent\necho $PATH                                                      #dir where cmds are looked for\nPATH=\"$PATH:/opt/newFolder                                      #extend $PATH with new folder\ncat file                                                        #catalog file, show in bash\n/etc/bashrc                                                     #global .bashrc file\nman <cmd>                                                       #man page for <cmd>\n/etc or etc                                                     #begining with / is always the absolute path\nls                                                              #list dir\n    Options>                    \n        -l                                                      #long list\n        -a                                                      #list all with hidden\n        -h                                                      #human readable\n        -S                                                      #sort by Size\n        -t                                                      #sort by date\n        -r                                                      #reverse sorting\nmkdir -p                                                        #create dir and parent dir even if the exists\nfind . -iname \"test*.txt\"                                       #search for files in current dir(.) that got the name \"test\" and end with \".txt\" ignore case sensitiv(-i)\nfind . -amin 5                                                  #search for files that got touched in the last 5 mins. +5 files older than 5 mins\nfind . -mmin 5                                                  #that got modified\nfind /path/to/dataset -printf '%s %p\\\\n' | sort -nr | head -50   #list 50 files in that dir ordered by size\nSTDOUT STDERR                                                   #standart output and std error      \nscript1.sh > /tmp/output                                        #write output of script1.sh to the file /tmp/output and override the old content. >> to append\nscript1.sh 2> /tmp/output                                       #write only the errors in it\ncat datei | script2.sh                                          #wirte output in file\nless/more                                                       # like cat but with formating and scrolling\ntail -f                                                         #shows the last lines of a file and follows changes\nstat file                                                       #list information for file\nscreen ls                                                       #like watch\n/bin                                                            #all executabels\nlsof                                                            #-u or -p user und process, who is using the files\nlsblk                                                           #volume info\ngrep <term> <file>                                              #search for term in file\ngrep -i                                                         #ignore case\nColor of cmd                                                    #export PS1=\"\\\\e[0;32m[\\\\u@\\\\h \\\\W]\\\\$ \\\\e[m \"  1 fuer gruen, 2 fuer rot, 3 fuer gelb\n:%s/oldString/newString                                         #find and repleace oldstring with new string in vim. Delimeter can be changed from / to #\napt-get update --allow-unauthenticated                          #\n            or --allow-insecure-repositories   ----             #to allow insicure repos\napt-cache madison gcc                                           #show all versions in repo\nyum downgrade httpd-2.2.3-22.el5                                #downgrade package\nyum --showduplicates list httpd | expand                        #show all versions in repo\nsudo apt list --installed | grep -i cuda                        #list all installed from cuda\nyum list installed | grep nvidia                                #list all installed from nvidia on rhel\nsudo grep -r <pattern> path                                     #search for pattern in files\ngrep -rnw '/path' -e 'pattern'                                  #    \nlsof -i -P -n                                                   #check the listening ports\ntmux                                                            #tool to monitor- split console in windows\n    Options:\n        ctrl-b + %                                              #split vertically\n        ctrl-b + \"                                              #split horizontally\n        ctrl-b and arrows                                       #to move in windows\ntar -xvzf z                                                     #unzip file\ntar -zcf folder.tar.gz folder                                   #zip folder          \n/var/log/*-server-update/latest.log                             #see *-server-update errors\necho user:pass | /usr/sbin/chpasswd                             #change PW of user or with passwd\ncat /etc/sudoers                                                #list sudoers\nchmod 777 datei +R                                              #change permissions Owner Group World\n    Options:\n        0                                                       #No Permissions\n        1                                                       #execute\n        2                                                       #write\n        3                                                       #execute + write\n        4                                                       #read\n        5                                                       #read and execute\n        6                                                       #read + write\n        7                                                       #read + write + execute\nchgrp +R grp datei                                              #change group\nchown                                                           #change owner e.g > chown endrit file\nlshw | cpu                                                      #number of CPU's\nfree -g                                                         #check RAM\nfdisk -l | grep Disk                                            #check Hard drives\nlsblk                                                           #check hard drives\npuppet agent -t --no-noop                                       #run puppet\ndu -s /var/log/* | sort -n | tail -n 50                         #list files in /var/log ordered by size \nswapoff -a && swapon -a                                         #umount and mount swap at runtime\nlsof -nP +L1 grep /tmp/ oder lsof -nP +L1 grep deleted          #check if files are deleted and who is using them (deleted)\ntree .                                                          # print tree of the current directory\nyum versionlock <package-name>                                  \ngetent passwd <UID>                                             #to get Userid from uid\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"how-to-mount-a-new-drive-devsdb\"\n    }}>{`How to mount a new Drive /dev/sdb`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`#Create new physical device\npvcreate /dev/sdb\n\n#Create new Volume Group vg_daten1\nvgcreate vg_daten1 /dev/sdb\n\n#check the new volumes\npvdisplay\n\n#create new Logical Volume Grpup with 100% from vg_datenq\nlvcreate -n /dev/mapper/vg_daten1-lv_opt_data -l100%VG vg_daten1\n\n#format the new drive\nmkfs.ext4 /dev/vg_daten1/lv_opt_data\n\n#create mountpoint\nmkdir /opt/data\n\n#mount new drive\nmount /dev/vg_daten1/lv_opt_data /opt/data\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}