{"remainingRequest":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit/Documents/endritdemaj.github.io/docs/documentation/kubernetescheatsheet.md","dependencies":[{"path":"/home/endrit/Documents/endritdemaj.github.io/docs/documentation/kubernetescheatsheet.md","mtime":1606065366732},{"path":"/home/endrit/Documents/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-kubernetescheatsheet-md-746.json","mtime":1606848179598},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1598202333047},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1598202332903},{"path":"/home/endrit/Documents/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1598202332899}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}