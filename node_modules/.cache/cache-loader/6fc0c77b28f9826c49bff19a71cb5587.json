{"remainingRequest":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit_demaj/docusaurus/endritdemaj.github.io/docs/documentation/linux.md","dependencies":[{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/docs/documentation/linux.md","mtime":1605815270584},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-linux-md-140.json","mtime":1605815830003},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1605814384336},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1605814384296},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1605814384080},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1605814384088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvZW5kcml0X2RlbWFqL2RvY3VzYXVydXMvZW5kcml0ZGVtYWouZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgUmVhY3QgZnJvbSdyZWFjdCc7aW1wb3J0e21keH1mcm9tJ0BtZHgtanMvcmVhY3QnO2V4cG9ydCBjb25zdCBmcm9udE1hdHRlcj17aWQ6J2xpbnV4Y2hlYXRzaGVldCcsdGl0bGU6J0xpbnV4IENoZWF0c2hlYXQnLHNpZGViYXJfbGFiZWw6J0xpbnV4IENoZWF0c2hlYXQnfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoiZG9jdW1lbnRhdGlvbi9saW51eGNoZWF0c2hlZXQiLCJpZCI6ImRvY3VtZW50YXRpb24vbGludXhjaGVhdHNoZWV0IiwiaXNEb2NzSG9tZVBhZ2UiOmZhbHNlLCJ0aXRsZSI6IkxpbnV4IENoZWF0c2hlYXQiLCJkZXNjcmlwdGlvbiI6InB3ZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcHJpbnQgd29ya2luZyBkaXJlY3RvcnkiLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL2RvY3VtZW50YXRpb24vbGludXgubWQiLCJwZXJtYWxpbmsiOiIvZW5kcml0ZGVtYWouZ2l0aHViLmlvL2RvY3MvZG9jdW1lbnRhdGlvbi9saW51eGNoZWF0c2hlZXQiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RvY3VzYXVydXMvZWRpdC9tYXN0ZXIvd2Vic2l0ZS9kb2NzL2RvY3VtZW50YXRpb24vbGludXgubWQiLCJzaWRlYmFyX2xhYmVsIjoiTGludXggQ2hlYXRzaGVhdCIsInNpZGViYXIiOiJzb21lU2lkZWJhciIsInByZXZpb3VzIjp7InRpdGxlIjoiVGhpcyBpcyBEb2N1bWVudCBOdW1iZXIgMyIsInBlcm1hbGluayI6Ii9lbmRyaXRkZW1hai5naXRodWIuaW8vZG9jcy9kb2MzIn0sIm5leHQiOnsidGl0bGUiOiJEb2NrZXIgQ2hlYXRzaGVhdCIsInBlcm1hbGluayI6Ii9lbmRyaXRkZW1hai5naXRodWIuaW8vZG9jcy9kb2N1bWVudGF0aW9uL2RvY2tlcmNoZWF0c2hlZXQifX07LyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgcmlnaHRUb2M9W3t2YWx1ZTonSG93IHRvIG1vdW50IGEgbmV3IERyaXZlIC9kZXYvc2RiJyxpZDonaG93LXRvLW1vdW50LWEtbmV3LWRyaXZlLWRldnNkYicsY2hpbGRyZW46W119LHt2YWx1ZTonR2VuZXJhdGUgU1NMIENlcnRpZmljYXRlcyBhbmQgZ2V0IHRoZW0gc2lnbmVkJyxpZDonZ2VuZXJhdGUtc3NsLWNlcnRpZmljYXRlcy1hbmQtZ2V0LXRoZW0tc2lnbmVkJyxjaGlsZHJlbjpbXX1dO2NvbnN0IGxheW91dFByb3BzPXtyaWdodFRvY307Y29uc3QgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtjb21wb25lbnRzLC4uLnByb3BzfSl7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLGBwd2QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50IHdvcmtpbmcgZGlyZWN0b3J5ICAgCmhpc3RvcnkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBsYXN0IHJ1biBjb21tYW5kcwpoaXN0b3J5X3BlcnNpc3RhbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Nob3cgcGVyc2lzdGFudCBoaXN0b3J5IHdpdGggdGltZXN0YW1wCjxjbWQ+ICYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIDxjbWQ+IGluIGJhY2tncm91bmQgb3IgaGl0IGN0cmwrWgpub2h1cCA8Y21kPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIzxjbWQ+IHJ1bnMgZXZlbiBhZnRlciB1c2VyIGxvZ2dlcyBvdXQKd2F0Y2ggPGNtZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0cmFja3Mgb3V0cHV0IG9mIDxjbWQ+IGFuZCByZWZyZXNocyBldmVyeSAyIHNlY29uZHMKPGNtZD4gfHwgPGNtZDI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNydW4gPGNtZDI+IHdoZW4gPGNtZD4gaGFzIGFuIGVycm9yCjxjbWQ+ICYmIDxjbWQyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIDxjbWQyPiBvbmx5IHdoZW4gPGNtZD4gd2FzIHN1Y2Vzc2Z1bGwKZWNobyAkPyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayByZXR1cm4gdmFsdWUgb2YgbGFzdCBydW4gY21kLCBlY2hvICRoYWxsby0+aGFsbG8KYWxpc2EgZGlyPSJscyIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjcmVhdGUgYW4gYWxpYXMgdm9yICdscycuIFB1dCB0aGF0IGluIH4vLmJhc2hyYyBmb3IgaXQgdG8gYmUgcGVybWFuZW50CmVjaG8gJFBBVEggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZGlyIHdoZXJlIGNtZHMgYXJlIGxvb2tlZCBmb3IKUEFUSD0iJFBBVEg6L29wdC9uZXdGb2xkZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleHRlbmQgJFBBVEggd2l0aCBuZXcgZm9sZGVyCmNhdCBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2F0YWxvZyBmaWxlLCBzaG93IGluIGJhc2gKL2V0Yy9iYXNocmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNnbG9iYWwgLmJhc2hyYyBmaWxlCm1hbiA8Y21kPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbWFuIHBhZ2UgZm9yIDxjbWQ+Ci9ldGMgb3IgZXRjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYmVnaW5pbmcgd2l0aCAvIGlzIGFsd2F5cyB0aGUgYWJzb2x1dGUgcGF0aApscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgZGlyCiAgICBPcHRpb25zPiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgLWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbG9uZyBsaXN0CiAgICAgICAgLWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBhbGwgd2l0aCBoaWRkZW4KICAgICAgICAtaCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNodW1hbiByZWFkYWJsZQogICAgICAgIC1TICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NvcnQgYnkgU2l6ZQogICAgICAgIC10ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NvcnQgYnkgZGF0ZQogICAgICAgIC1yICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JldmVyc2Ugc29ydGluZwpta2RpciAtcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NyZWF0ZSBkaXIgYW5kIHBhcmVudCBkaXIgZXZlbiBpZiB0aGUgZXhpc3RzCmZpbmQgLiAtaW5hbWUgInRlc3QqLnR4dCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2VhcmNoIGZvciBmaWxlcyBpbiBjdXJyZW50IGRpciguKSB0aGF0IGdvdCB0aGUgbmFtZSAidGVzdCIgYW5kIGVuZCB3aXRoICIudHh0IiBpZ25vcmUgY2FzZSBzZW5zaXRpdigtaSkKZmluZCAuIC1hbWluIDUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzZWFyY2ggZm9yIGZpbGVzIHRoYXQgZ290IHRvdWNoZWQgaW4gdGhlIGxhc3QgNSBtaW5zLiArNSBmaWxlcyBvbGRlciB0aGFuIDUgbWlucwpmaW5kIC4gLW1taW4gNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RoYXQgZ290IG1vZGlmaWVkCmZpbmQgL3BhdGgvdG8vZGF0YXNldCAtcHJpbnRmICclcyAlcFxcbicgfCBzb3J0IC1uciB8IGhlYWQgLTUwICAgI2xpc3QgNTAgZmlsZXMgaW4gdGhhdCBkaXIgb3JkZXJlZCBieSBzaXplClNURE9VVCBTVERFUlIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3RhbmRhcnQgb3V0cHV0IGFuZCBzdGQgZXJyb3IgICAgICAKc2NyaXB0MS5zaCA+IC90bXAvb3V0cHV0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3cml0ZSBvdXRwdXQgb2Ygc2NyaXB0MS5zaCB0byB0aGUgZmlsZSAvdG1wL291dHB1dCBhbmQgb3ZlcnJpZGUgdGhlIG9sZCBjb250ZW50LiA+PiB0byBhcHBlbmQKc2NyaXB0MS5zaCAyPiAvdG1wL291dHB1dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3cml0ZSBvbmx5IHRoZSBlcnJvcnMgaW4gaXQKY2F0IGRhdGVpIHwgc2NyaXB0Mi5zaCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3aXJ0ZSBvdXRwdXQgaW4gZmlsZQpsZXNzL21vcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBsaWtlIGNhdCBidXQgd2l0aCBmb3JtYXRpbmcgYW5kIHNjcm9sbGluZwp0YWlsIC1mICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Nob3dzIHRoZSBsYXN0IGxpbmVzIG9mIGEgZmlsZSBhbmQgZm9sbG93cyBjaGFuZ2VzCnN0YXQgZmlsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBpbmZvcm1hdGlvbiBmb3IgZmlsZQpzY3JlZW4gbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpa2Ugd2F0Y2gKL2JpbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNhbGwgZXhlY3V0YWJlbHMKbHNvZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMtdSBvciAtcCB1c2VyIHVuZCBwcm9jZXNzLCB3aG8gaXMgdXNpbmcgdGhlIGZpbGVzCmxzYmxrICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdm9sdW1lIGluZm8KZ3JlcCA8dGVybT4gPGZpbGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzZWFyY2ggZm9yIHRlcm0gaW4gZmlsZQpncmVwIC1pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2lnbm9yZSBjYXNlCkNvbG9yIG9mIGNtZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZXhwb3J0IFBTMT0iXFxlWzA7MzJtW1xcdUBcXGggXFxXXVxcJCBcXGVbbSAiICAxIGZ1ZXIgZ3J1ZW4sIDIgZnVlciByb3QsIDMgZnVlciBnZWxiCjolcy9vbGRTdHJpbmcvbmV3U3RyaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZmluZCBhbmQgcmVwbGVhY2Ugb2xkc3RyaW5nIHdpdGggbmV3IHN0cmluZyBpbiB2aW0uIERlbGltZXRlciBjYW4gYmUgY2hhbmdlZCBmcm9tIC8gdG8gIwphcHQtZ2V0IHVwZGF0ZSAtLWFsbG93LXVuYXV0aGVudGljYXRlZCAgICAgICAgICAgICAgICAgICAgICAgICAgIwogICAgICAgICAgICBvciAtLWFsbG93LWluc2VjdXJlLXJlcG9zaXRvcmllcyAgIC0tLS0gICAgICAgICAgICAgI3RvIGFsbG93IGluc2ljdXJlIHJlcG9zCmFwdC1jYWNoZSBtYWRpc29uIGdjYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBhbGwgdmVyc2lvbnMgaW4gcmVwbwp5dW0gZG93bmdyYWRlIGh0dHBkLTIuMi4zLTIyLmVsNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Rvd25ncmFkZSBwYWNrYWdlCnl1bSAtLXNob3dkdXBsaWNhdGVzIGxpc3QgaHR0cGQgfCBleHBhbmQgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBhbGwgdmVyc2lvbnMgaW4gcmVwbwpzdWRvIGFwdCBsaXN0IC0taW5zdGFsbGVkIHwgZ3JlcCAtaSBjdWRhICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgYWxsIGluc3RhbGxlZCBmcm9tIGN1ZGEKeXVtIGxpc3QgaW5zdGFsbGVkIHwgZ3JlcCBudmlkaWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IGFsbCBpbnN0YWxsZWQgZnJvbSBudmlkaWEgb24gcmhlbApzdWRvIGdyZXAgLXIgPHBhdHRlcm4+IHBhdGggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NlYXJjaCBmb3IgcGF0dGVybiBpbiBmaWxlcwpncmVwIC1ybncgJy9wYXRoJyAtZSAncGF0dGVybicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAKbHNvZiAtaSAtUCAtbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayB0aGUgbGlzdGVuaW5nIHBvcnRzCnRtdXggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdG9vbCB0byBtb25pdG9yLSBzcGxpdCBjb25zb2xlIGluIHdpbmRvd3MKICAgIE9wdGlvbnM6CiAgICAgICAgY3RybC1iICsgJSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc3BsaXQgdmVydGljYWxseQogICAgICAgIGN0cmwtYiArICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NwbGl0IGhvcml6b250YWxseQogICAgICAgIGN0cmwtYiBhbmQgYXJyb3dzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RvIG1vdmUgaW4gd2luZG93cwp0YXIgLXh2emYgeiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3VuemlwIGZpbGUKdGFyIC16Y2YgZm9sZGVyLnRhci5neiBmb2xkZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN6aXAgZm9sZGVyICAgICAgICAgIAovdmFyL2xvZy8qLXNlcnZlci11cGRhdGUvbGF0ZXN0LmxvZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NlZSAqLXNlcnZlci11cGRhdGUgZXJyb3JzCmVjaG8gdXNlcjpwYXNzIHwgL3Vzci9zYmluL2NocGFzc3dkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2hhbmdlIFBXIG9mIHVzZXIgb3Igd2l0aCBwYXNzd2QKY2F0IC9ldGMvc3Vkb2VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IHN1ZG9lcnMKY2htb2QgNzc3IGRhdGVpICtSICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2UgcGVybWlzc2lvbnMgT3duZXIgR3JvdXAgV29ybGQKICAgIE9wdGlvbnM6CiAgICAgICAgMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjTm8gUGVybWlzc2lvbnMKICAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleGVjdXRlCiAgICAgICAgMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUKICAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleGVjdXRlICsgd3JpdGUKICAgICAgICA0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWFkCiAgICAgICAgNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVhZCBhbmQgZXhlY3V0ZQogICAgICAgIDYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlYWQgKyB3cml0ZQogICAgICAgIDcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlYWQgKyB3cml0ZSArIGV4ZWN1dGUKY2hncnAgK1IgZ3JwIGRhdGVpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2UgZ3JvdXAKY2hvd24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2Ugb3duZXIgZS5nID4gY2hvd24gZW5kcml0IGZpbGUKbHNodyB8IGNwdSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNudW1iZXIgb2YgQ1BVJ3MKZnJlZSAtZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayBSQU0KZmRpc2sgLWwgfCBncmVwIERpc2sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayBIYXJkIGRyaXZlcwpsc2JsayAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoZWNrIGhhcmQgZHJpdmVzCnB1cHBldCBhZ2VudCAtdCAtLW5vLW5vb3AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIHB1cHBldApkdSAtcyAvdmFyL2xvZy8qIHwgc29ydCAtbiB8IHRhaWwgLW4gNTAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgZmlsZXMgaW4gL3Zhci9sb2cgb3JkZXJlZCBieSBzaXplIApzd2Fwb2ZmIC1hICYmIHN3YXBvbiAtYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Vtb3VudCBhbmQgbW91bnQgc3dhcCBhdCBydW50aW1lCmxzb2YgLW5QICtMMSBncmVwIC90bXAvIG9kZXIgbHNvZiAtblAgK0wxIGdyZXAgZGVsZXRlZCAgICAgICAgICAjY2hlY2sgaWYgZmlsZXMgYXJlIGRlbGV0ZWQgYW5kIHdobyBpcyB1c2luZyB0aGVtIChkZWxldGVkKQp0cmVlIC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBwcmludCB0cmVlIG9mIHRoZSBjdXJyZW50IGRpcmVjdG9yeQp5dW0gdmVyc2lvbmxvY2sgPHBhY2thZ2UtbmFtZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCmdldGVudCBwYXNzd2QgPFVJRD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdG8gZ2V0IFVzZXJpZCBmcm9tIHVpZApjYXQgdGVzdGZpbGUgfCBncmVwIC0tY29sb3I9YWx3YXlzIC16ICdoZWxsbycgICAgICAgICAgICAgICAgICAgI21hcmsgdGhlIHdvcmQgaGVsbG8gdW5kIHNob3cgYWxsIGxpbmVzIHdpdGggZ3JlcApjaGF0dHIgK2kgPGZpbGVuYW1lPiAgICAgICAgICAgICAgICAgICAgICAgICNNYWtlIGEgZmlsZSB1bmNoYW5nZWFibGUgdW11dGFibGUgPGNoYXR0ciAtaT4gdG8gdGFrZSB0aGF0IGJhY2sKYCkpLG1keCgiaDMiLHsiaWQiOiJob3ctdG8tbW91bnQtYS1uZXctZHJpdmUtZGV2c2RiIn0sYEhvdyB0byBtb3VudCBhIG5ldyBEcml2ZSAvZGV2L3NkYmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHt9KSxgI0NyZWF0ZSBuZXcgcGh5c2ljYWwgZGV2aWNlCnB2Y3JlYXRlIC9kZXYvc2RiCgojQ3JlYXRlIG5ldyBWb2x1bWUgR3JvdXAgdmdfZGF0ZW4xCnZnY3JlYXRlIHZnX2RhdGVuMSAvZGV2L3NkYgoKI2NoZWNrIHRoZSBuZXcgdm9sdW1lcwpwdmRpc3BsYXkKCiNjcmVhdGUgbmV3IExvZ2ljYWwgVm9sdW1lIEdycHVwIHdpdGggMTAwJSBmcm9tIHZnX2RhdGVucQpsdmNyZWF0ZSAtbiAvZGV2L21hcHBlci92Z19kYXRlbjEtbHZfb3B0X2RhdGEgLWwxMDAlVkcgdmdfZGF0ZW4xCgojZm9ybWF0IHRoZSBuZXcgZHJpdmUKbWtmcy5leHQ0IC9kZXYvdmdfZGF0ZW4xL2x2X29wdF9kYXRhCgojY3JlYXRlIG1vdW50cG9pbnQKbWtkaXIgL29wdC9kYXRhCgojbW91bnQgbmV3IGRyaXZlCm1vdW50IC9kZXYvdmdfZGF0ZW4xL2x2X29wdF9kYXRhIC9vcHQvZGF0YQpgKSksbWR4KCJoMyIseyJpZCI6ImdlbmVyYXRlLXNzbC1jZXJ0aWZpY2F0ZXMtYW5kLWdldC10aGVtLXNpZ25lZCJ9LGBHZW5lcmF0ZSBTU0wgQ2VydGlmaWNhdGVzIGFuZCBnZXQgdGhlbSBzaWduZWRgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7fSksYDEuIGdlbmVyYXRlIHByaXZhdGUga2V5CiRvcGVuc3NsIHJlcSAteDUwOSAtbm9kZXMgLWRheXMgNzMwIC1uZXdrZXkgcnNhOjIwNDggLWtleW91dCA8cHJpdmF0ZS1zc2wta2V5Pi5wZW0KCjIuIGdlbmVyYXRlIENTUiB3aXRoIHRoYXQgcHJpdmF0ZSBrZXkKJG9wZW5zc2wgcmVxIC1uZXcgLWtleSA8cHJpdmF0ZS1zc2wta2V5Pi5wZW0gLXNoYTI1NiAtbm9kZXMgIC1vdXQgPGNzci1zc2w+LmNzcgoKMy4gcmVxdWVzdCBzaWduZWQgQ1NSCiAgICBHbyB0byBBU0sgeW91ciBJVCBkZXBhcnRtZW50Cgo0LiBZb3Ugd2lsbCBnZXQgYSBzaWduZWQgQ1JTLUNlcnRpZmljYXRlCiAgICBZb3Ugd2lsbCBnZXQgYSBzaWduZWQgQ1NSLUNlcnRpZmlhY2Ugc29tZXRoaW5nIGxpa2UgPGNzci1zc2w+LmNlcgoKQ2hlY2sgaWYgdGhlIG1kNXN1bXMgaXMgY29ycmVjdC4gTmVlZCB0byBiZSBlcXVhbAoKI2ZvciBwcml2YXRlIEtFWQpvcGVuc3NsIHJzYSAtbm9vdXQgLW1vZHVsdXMgLWluIDxwcml2YXRlLXNzbC1rZXk+LnBlbSB8IG9wZW5zc2wgbWQ1CihzdGRpbik9IGY1N2EzYjk4YjA4MGY2ZDM0YzZlMzU0NmJhZGZmYjE0CgojZm9yIENTUi1GaWxlCm9wZW5zc2wgcmVxIC1ub291dCAtbW9kdWx1cyAtaW4gPGNzci1zc2w+LmNzciB8IG9wZW5zc2wgbWQ1CihzdGRpbik9IGY1N2EzYjk4YjA4MGY2ZDM0YzZlMzU0NmJhZGZmYjE0CgojZm9yIFNpZ25lZCBDZXJ0Cm9wZW5zc2wgeDUwOSAtbm9vdXQgLW1vZHVsdXMgLWluIGNzcl9kb21pbm90Nzxjc3Itc3NsPi5jZXIgfCBvcGVuc3NsIG1kNQooc3RkaW4pPSBmNTdhM2I5OGIwODBmNmQzNGM2ZTM1NDZiYWRmZmIxNApgKSkpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},null]}