{"remainingRequest":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit_demaj/docusaurus/endritdemaj.github.io/docs/documentation/linux.md","dependencies":[{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/docs/documentation/linux.md","mtime":1606989304119},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-linux-md-140.json","mtime":1606991362838},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1605814384336},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1605814384296},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1605814384080},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1605814384088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}