{"remainingRequest":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/babel-loader/lib/index.js??ref--11-1!/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/home/endrit_demaj/docusaurus/endritdemaj.github.io/docs/documentation/linux.md","dependencies":[{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/docs/documentation/linux.md","mtime":1606218779051},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/.docusaurus/docusaurus-plugin-content-docs/site-docs-documentation-linux-md-140.json","mtime":1606333695889},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1605814384336},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/babel-loader/lib/index.js","mtime":1605814384296},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1605814384080},{"path":"/home/endrit_demaj/docusaurus/endritdemaj.github.io/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1605814384088}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL2hvbWUvZW5kcml0X2RlbWFqL2RvY3VzYXVydXMvZW5kcml0ZGVtYWouZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzIjtpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSIvaG9tZS9lbmRyaXRfZGVtYWovZG9jdXNhdXJ1cy9lbmRyaXRkZW1hai5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiO2ltcG9ydCBSZWFjdCBmcm9tJ3JlYWN0JztpbXBvcnR7bWR4fWZyb20nQG1keC1qcy9yZWFjdCc7ZXhwb3J0IHZhciBmcm9udE1hdHRlcj17aWQ6J2xpbnV4Y2hlYXRzaGVldCcsdGl0bGU6J0xpbnV4IENoZWF0c2hlYXQnLHNpZGViYXJfbGFiZWw6J0xpbnV4IENoZWF0c2hlYXQnfTtleHBvcnQgdmFyIG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6ImRvY3VtZW50YXRpb24vbGludXhjaGVhdHNoZWV0IiwiaWQiOiJkb2N1bWVudGF0aW9uL2xpbnV4Y2hlYXRzaGVldCIsImlzRG9jc0hvbWVQYWdlIjpmYWxzZSwidGl0bGUiOiJMaW51eCBDaGVhdHNoZWF0IiwiZGVzY3JpcHRpb24iOiJwd2QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50IHdvcmtpbmcgZGlyZWN0b3J5Iiwic291cmNlIjoiQHNpdGUvZG9jcy9kb2N1bWVudGF0aW9uL2xpbnV4Lm1kIiwicGVybWFsaW5rIjoiL2VuZHJpdGRlbWFqLmdpdGh1Yi5pby9kb2NzL2RvY3VtZW50YXRpb24vbGludXhjaGVhdHNoZWV0IiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kb2N1c2F1cnVzL2VkaXQvbWFzdGVyL3dlYnNpdGUvZG9jcy9kb2N1bWVudGF0aW9uL2xpbnV4Lm1kIiwic2lkZWJhcl9sYWJlbCI6IkxpbnV4IENoZWF0c2hlYXQiLCJzaWRlYmFyIjoic29tZVNpZGViYXIiLCJwcmV2aW91cyI6eyJ0aXRsZSI6IlRoaXMgaXMgRG9jdW1lbnQgTnVtYmVyIDMiLCJwZXJtYWxpbmsiOiIvZW5kcml0ZGVtYWouZ2l0aHViLmlvL2RvY3MvZG9jMyJ9LCJuZXh0Ijp7InRpdGxlIjoiRG9ja2VyIENoZWF0c2hlYXQiLCJwZXJtYWxpbmsiOiIvZW5kcml0ZGVtYWouZ2l0aHViLmlvL2RvY3MvZG9jdW1lbnRhdGlvbi9kb2NrZXJjaGVhdHNoZWV0In19Oy8qIEBqc3ggbWR4ICovZXhwb3J0IHZhciByaWdodFRvYz1be3ZhbHVlOidIb3cgdG8gbW91bnQgYSBuZXcgRHJpdmUgL2Rldi9zZGInLGlkOidob3ctdG8tbW91bnQtYS1uZXctZHJpdmUtZGV2c2RiJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidHZW5lcmF0ZSBTU0wgQ2VydGlmaWNhdGVzIGFuZCBnZXQgdGhlbSBzaWduZWQnLGlkOidnZW5lcmF0ZS1zc2wtY2VydGlmaWNhdGVzLWFuZC1nZXQtdGhlbS1zaWduZWQnLGNoaWxkcmVuOltdfV07dmFyIGxheW91dFByb3BzPXtyaWdodFRvYzpyaWdodFRvY307dmFyIE1EWExheW91dD0id3JhcHBlciI7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKXt2YXIgY29tcG9uZW50cz1fcmVmLmNvbXBvbmVudHMscHJvcHM9X29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZixbImNvbXBvbmVudHMiXSk7cmV0dXJuIG1keChNRFhMYXlvdXQsX2V4dGVuZHMoe30sbGF5b3V0UHJvcHMscHJvcHMse2NvbXBvbmVudHM6Y29tcG9uZW50cyxtZHhUeXBlOiJNRFhMYXlvdXQifSksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCJwd2QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3ByaW50IHdvcmtpbmcgZGlyZWN0b3J5ICAgXG5oaXN0b3J5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3Nob3cgbGFzdCBydW4gY29tbWFuZHNcbmhpc3RvcnlfcGVyc2lzdGFudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBwZXJzaXN0YW50IGhpc3Rvcnkgd2l0aCB0aW1lc3RhbXBcbjxjbWQ+ICYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcnVuIDxjbWQ+IGluIGJhY2tncm91bmQgb3IgaGl0IGN0cmwrWlxubm9odXAgPGNtZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICM8Y21kPiBydW5zIGV2ZW4gYWZ0ZXIgdXNlciBsb2dnZXMgb3V0XG53YXRjaCA8Y21kPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RyYWNrcyBvdXRwdXQgb2YgPGNtZD4gYW5kIHJlZnJlc2hzIGV2ZXJ5IDIgc2Vjb25kc1xuPGNtZD4gfHwgPGNtZDI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNydW4gPGNtZDI+IHdoZW4gPGNtZD4gaGFzIGFuIGVycm9yXG48Y21kPiAmJiA8Y21kMj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3J1biA8Y21kMj4gb25seSB3aGVuIDxjbWQ+IHdhcyBzdWNlc3NmdWxsXG5lY2hvICQ/ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoZWNrIHJldHVybiB2YWx1ZSBvZiBsYXN0IHJ1biBjbWQsIGVjaG8gJGhhbGxvLT5oYWxsb1xuYWxpc2EgZGlyPVwibHNcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NyZWF0ZSBhbiBhbGlhcyB2b3IgJ2xzJy4gUHV0IHRoYXQgaW4gfi8uYmFzaHJjIGZvciBpdCB0byBiZSBwZXJtYW5lbnRcbmVjaG8gJFBBVEggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZGlyIHdoZXJlIGNtZHMgYXJlIGxvb2tlZCBmb3JcblBBVEg9XCIkUEFUSDovb3B0L25ld0ZvbGRlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2V4dGVuZCAkUEFUSCB3aXRoIG5ldyBmb2xkZXJcbmNhdCBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2F0YWxvZyBmaWxlLCBzaG93IGluIGJhc2hcbi9ldGMvYmFzaHJjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZ2xvYmFsIC5iYXNocmMgZmlsZVxubWFuIDxjbWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNtYW4gcGFnZSBmb3IgPGNtZD5cbi9ldGMgb3IgZXRjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYmVnaW5pbmcgd2l0aCAvIGlzIGFsd2F5cyB0aGUgYWJzb2x1dGUgcGF0aFxubHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IGRpclxuICAgIE9wdGlvbnM+ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgLWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbG9uZyBsaXN0XG4gICAgICAgIC1hICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgYWxsIHdpdGggaGlkZGVuXG4gICAgICAgIC1oICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2h1bWFuIHJlYWRhYmxlXG4gICAgICAgIC1TICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NvcnQgYnkgU2l6ZVxuICAgICAgICAtdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzb3J0IGJ5IGRhdGVcbiAgICAgICAgLXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmV2ZXJzZSBzb3J0aW5nXG5ta2RpciAtcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NyZWF0ZSBkaXIgYW5kIHBhcmVudCBkaXIgZXZlbiBpZiB0aGUgZXhpc3RzXG5maW5kIC4gLWluYW1lIFwidGVzdCoudHh0XCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2VhcmNoIGZvciBmaWxlcyBpbiBjdXJyZW50IGRpciguKSB0aGF0IGdvdCB0aGUgbmFtZSBcInRlc3RcIiBhbmQgZW5kIHdpdGggXCIudHh0XCIgaWdub3JlIGNhc2Ugc2Vuc2l0aXYoLWkpXG5maW5kIC4gLWFtaW4gNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NlYXJjaCBmb3IgZmlsZXMgdGhhdCBnb3QgdG91Y2hlZCBpbiB0aGUgbGFzdCA1IG1pbnMuICs1IGZpbGVzIG9sZGVyIHRoYW4gNSBtaW5zXG5maW5kIC4gLW1taW4gNSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3RoYXQgZ290IG1vZGlmaWVkXG5maW5kIC9wYXRoL3RvL2RhdGFzZXQgLXByaW50ZiAnJXMgJXBcXG4nIHwgc29ydCAtbnIgfCBoZWFkIC01MCAgICNsaXN0IDUwIGZpbGVzIGluIHRoYXQgZGlyIG9yZGVyZWQgYnkgc2l6ZVxuU1RET1VUIFNUREVSUiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzdGFuZGFydCBvdXRwdXQgYW5kIHN0ZCBlcnJvciAgICAgIFxuc2NyaXB0MS5zaCA+IC90bXAvb3V0cHV0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3cml0ZSBvdXRwdXQgb2Ygc2NyaXB0MS5zaCB0byB0aGUgZmlsZSAvdG1wL291dHB1dCBhbmQgb3ZlcnJpZGUgdGhlIG9sZCBjb250ZW50LiA+PiB0byBhcHBlbmRcbnNjcmlwdDEuc2ggMj4gL3RtcC9vdXRwdXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjd3JpdGUgb25seSB0aGUgZXJyb3JzIGluIGl0XG5jYXQgZGF0ZWkgfCBzY3JpcHQyLnNoICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3dpcnRlIG91dHB1dCBpbiBmaWxlXG5sZXNzL21vcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBsaWtlIGNhdCBidXQgd2l0aCBmb3JtYXRpbmcgYW5kIHNjcm9sbGluZ1xudGFpbCAtZiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzaG93cyB0aGUgbGFzdCBsaW5lcyBvZiBhIGZpbGUgYW5kIGZvbGxvd3MgY2hhbmdlc1xuc3RhdCBmaWxlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IGluZm9ybWF0aW9uIGZvciBmaWxlXG5zY3JlZW4gbHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpa2Ugd2F0Y2hcbi9iaW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjYWxsIGV4ZWN1dGFiZWxzXG5sc29mICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIy11IG9yIC1wIHVzZXIgdW5kIHByb2Nlc3MsIHdobyBpcyB1c2luZyB0aGUgZmlsZXNcbmxzYmxrICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdm9sdW1lIGluZm9cbmdyZXAgPHRlcm0+IDxmaWxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2VhcmNoIGZvciB0ZXJtIGluIGZpbGVcbmdyZXAgLWkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjaWdub3JlIGNhc2VcbkNvbG9yIG9mIGNtZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZXhwb3J0IFBTMT1cIlxcZVswOzMybVtcXHVAXFxoIFxcV11cXCQgXFxlW20gXCIgIDEgZnVlciBncnVlbiwgMiBmdWVyIHJvdCwgMyBmdWVyIGdlbGJcbjolcy9vbGRTdHJpbmcvbmV3U3RyaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZmluZCBhbmQgcmVwbGVhY2Ugb2xkc3RyaW5nIHdpdGggbmV3IHN0cmluZyBpbiB2aW0uIERlbGltZXRlciBjYW4gYmUgY2hhbmdlZCBmcm9tIC8gdG8gI1xuYXB0LWdldCB1cGRhdGUgLS1hbGxvdy11bmF1dGhlbnRpY2F0ZWQgICAgICAgICAgICAgICAgICAgICAgICAgICNcbiAgICAgICAgICAgIG9yIC0tYWxsb3ctaW5zZWN1cmUtcmVwb3NpdG9yaWVzICAgLS0tLSAgICAgICAgICAgICAjdG8gYWxsb3cgaW5zaWN1cmUgcmVwb3NcbmFwdC1jYWNoZSBtYWRpc29uIGdjYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2hvdyBhbGwgdmVyc2lvbnMgaW4gcmVwb1xueXVtIGRvd25ncmFkZSBodHRwZC0yLjIuMy0yMi5lbDUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNkb3duZ3JhZGUgcGFja2FnZVxueXVtIC0tc2hvd2R1cGxpY2F0ZXMgbGlzdCBodHRwZCB8IGV4cGFuZCAgICAgICAgICAgICAgICAgICAgICAgICNzaG93IGFsbCB2ZXJzaW9ucyBpbiByZXBvXG5zdWRvIGFwdCBsaXN0IC0taW5zdGFsbGVkIHwgZ3JlcCAtaSBjdWRhICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgYWxsIGluc3RhbGxlZCBmcm9tIGN1ZGFcbnl1bSBsaXN0IGluc3RhbGxlZCB8IGdyZXAgbnZpZGlhICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbGlzdCBhbGwgaW5zdGFsbGVkIGZyb20gbnZpZGlhIG9uIHJoZWxcbnN1ZG8gZ3JlcCAtciA8cGF0dGVybj4gcGF0aCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjc2VhcmNoIGZvciBwYXR0ZXJuIGluIGZpbGVzXG5ncmVwIC1ybncgJy9wYXRoJyAtZSAncGF0dGVybicgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyAgICBcbmxzb2YgLWkgLVAgLW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2hlY2sgdGhlIGxpc3RlbmluZyBwb3J0c1xudG11eCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0b29sIHRvIG1vbml0b3ItIHNwbGl0IGNvbnNvbGUgaW4gd2luZG93c1xuICAgIE9wdGlvbnM6XG4gICAgICAgIGN0cmwtYiArICUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NwbGl0IHZlcnRpY2FsbHlcbiAgICAgICAgY3RybC1iICsgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3NwbGl0IGhvcml6b250YWxseVxuICAgICAgICBjdHJsLWIgYW5kIGFycm93cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0byBtb3ZlIGluIHdpbmRvd3NcbnRhciAteHZ6ZiB6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdW56aXAgZmlsZVxudGFyIC16Y2YgZm9sZGVyLnRhci5neiBmb2xkZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN6aXAgZm9sZGVyICAgICAgICAgIFxuL3Zhci9sb2cvKi1zZXJ2ZXItdXBkYXRlL2xhdGVzdC5sb2cgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNzZWUgKi1zZXJ2ZXItdXBkYXRlIGVycm9yc1xuZWNobyB1c2VyOnBhc3MgfCAvdXNyL3NiaW4vY2hwYXNzd2QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2UgUFcgb2YgdXNlciBvciB3aXRoIHBhc3N3ZFxuY2F0IC9ldGMvc3Vkb2VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNsaXN0IHN1ZG9lcnNcbmNobW9kIDc3NyBkYXRlaSArUiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2hhbmdlIHBlcm1pc3Npb25zIE93bmVyIEdyb3VwIFdvcmxkXG4gICAgT3B0aW9uczpcbiAgICAgICAgMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjTm8gUGVybWlzc2lvbnNcbiAgICAgICAgMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjZXhlY3V0ZVxuICAgICAgICAyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN3cml0ZVxuICAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNleGVjdXRlICsgd3JpdGVcbiAgICAgICAgNCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjcmVhZFxuICAgICAgICA1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWFkIGFuZCBleGVjdXRlXG4gICAgICAgIDYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI3JlYWQgKyB3cml0ZVxuICAgICAgICA3ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNyZWFkICsgd3JpdGUgKyBleGVjdXRlXG5jaGdycCArUiBncnAgZGF0ZWkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoYW5nZSBncm91cFxuY2hvd24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGFuZ2Ugb3duZXIgZS5nID4gY2hvd24gZW5kcml0IGZpbGVcbmxzaHcgfCBjcHUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjbnVtYmVyIG9mIENQVSdzXG5mcmVlIC1nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2NoZWNrIFJBTVxuZmRpc2sgLWwgfCBncmVwIERpc2sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayBIYXJkIGRyaXZlc1xubHNibGsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjaGVjayBoYXJkIGRyaXZlc1xucHVwcGV0IGFnZW50IC10IC0tbm8tbm9vcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNydW4gcHVwcGV0XG5kdSAtcyAvdmFyL2xvZy8qIHwgc29ydCAtbiB8IHRhaWwgLW4gNTAgICAgICAgICAgICAgICAgICAgICAgICAgI2xpc3QgZmlsZXMgaW4gL3Zhci9sb2cgb3JkZXJlZCBieSBzaXplIFxuc3dhcG9mZiAtYSAmJiBzd2Fwb24gLWEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN1bW91bnQgYW5kIG1vdW50IHN3YXAgYXQgcnVudGltZVxubHNvZiAtblAgK0wxIGdyZXAgL3RtcC8gb2RlciBsc29mIC1uUCArTDEgZ3JlcCBkZWxldGVkICAgICAgICAgICNjaGVjayBpZiBmaWxlcyBhcmUgZGVsZXRlZCBhbmQgd2hvIGlzIHVzaW5nIHRoZW0gKGRlbGV0ZWQpXG50cmVlIC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBwcmludCB0cmVlIG9mIHRoZSBjdXJyZW50IGRpcmVjdG9yeVxueXVtIHZlcnNpb25sb2NrIDxwYWNrYWdlLW5hbWU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZ2V0ZW50IHBhc3N3ZCA8VUlEPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0byBnZXQgVXNlcmlkIGZyb20gdWlkXG5jYXQgdGVzdGZpbGUgfCBncmVwIC0tY29sb3I9YWx3YXlzIC16ICdoZWxsbycgICAgICAgICAgICAgICAgICAgI21hcmsgdGhlIHdvcmQgaGVsbG8gdW5kIHNob3cgYWxsIGxpbmVzIHdpdGggZ3JlcFxuY2hhdHRyICtpIDxmaWxlbmFtZT4gICAgICAgICAgICAgICAgICAgICAgICAjTWFrZSBhIGZpbGUgdW5jaGFuZ2VhYmxlIHVtdXRhYmxlIDxjaGF0dHIgLWk+IHRvIHRha2UgdGhhdCBiYWNrXG4iKSksbWR4KCJoMyIseyJpZCI6Imhvdy10by1tb3VudC1hLW5ldy1kcml2ZS1kZXZzZGIifSwiSG93IHRvIG1vdW50IGEgbmV3IERyaXZlIC9kZXYvc2RiIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIjQ3JlYXRlIG5ldyBwaHlzaWNhbCBkZXZpY2VcbnB2Y3JlYXRlIC9kZXYvc2RiXG5cbiNDcmVhdGUgbmV3IFZvbHVtZSBHcm91cCB2Z19kYXRlbjFcbnZnY3JlYXRlIHZnX2RhdGVuMSAvZGV2L3NkYlxuXG4jY2hlY2sgdGhlIG5ldyB2b2x1bWVzXG5wdmRpc3BsYXlcblxuI2NyZWF0ZSBuZXcgTG9naWNhbCBWb2x1bWUgR3JwdXAgd2l0aCAxMDAlIGZyb20gdmdfZGF0ZW5xXG5sdmNyZWF0ZSAtbiAvZGV2L21hcHBlci92Z19kYXRlbjEtbHZfb3B0X2RhdGEgLWwxMDAlVkcgdmdfZGF0ZW4xXG5cbiNmb3JtYXQgdGhlIG5ldyBkcml2ZVxubWtmcy5leHQ0IC9kZXYvdmdfZGF0ZW4xL2x2X29wdF9kYXRhXG5cbiNjcmVhdGUgbW91bnRwb2ludFxubWtkaXIgL29wdC9kYXRhXG5cbiNtb3VudCBuZXcgZHJpdmVcbm1vdW50IC9kZXYvdmdfZGF0ZW4xL2x2X29wdF9kYXRhIC9vcHQvZGF0YVxuIikpLG1keCgiaDMiLHsiaWQiOiJnZW5lcmF0ZS1zc2wtY2VydGlmaWNhdGVzLWFuZC1nZXQtdGhlbS1zaWduZWQifSwiR2VuZXJhdGUgU1NMIENlcnRpZmljYXRlcyBhbmQgZ2V0IHRoZW0gc2lnbmVkIiksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0se30pLCIxLiBnZW5lcmF0ZSBwcml2YXRlIGtleVxuJG9wZW5zc2wgcmVxIC14NTA5IC1ub2RlcyAtZGF5cyA3MzAgLW5ld2tleSByc2E6MjA0OCAta2V5b3V0IDxwcml2YXRlLXNzbC1rZXk+LnBlbVxuXG4yLiBnZW5lcmF0ZSBDU1Igd2l0aCB0aGF0IHByaXZhdGUga2V5XG4jZG9udCBmb3JnZXQgdGhlIFdpbGRjYXJkcyBpZiB1c2luZyBzdWJkb21haW5zXG4kb3BlbnNzbCByZXEgLW5ldyAta2V5IDxwcml2YXRlLXNzbC1rZXk+LnBlbSAtc2hhMjU2IC1ub2RlcyAgLW91dCA8Y3NyLXNzbD4uY3NyXG5cbjMuIHJlcXVlc3Qgc2lnbmVkIENTUlxuICAgIEdvIHRvIEFTSyB5b3VyIElUIGRlcGFydG1lbnRcblxuNC4gWW91IHdpbGwgZ2V0IGEgc2lnbmVkIENSUy1DZXJ0aWZpY2F0ZVxuICAgIFlvdSB3aWxsIGdldCBhIHNpZ25lZCBDU1ItQ2VydGlmaWFjZSBzb21ldGhpbmcgbGlrZSA8Y3NyLXNzbD4uY2VyXG5cbkNoZWNrIGlmIHRoZSBtZDVzdW1zIGlzIGNvcnJlY3QuIE5lZWQgdG8gYmUgZXF1YWxcblxuI2ZvciBwcml2YXRlIEtFWVxub3BlbnNzbCByc2EgLW5vb3V0IC1tb2R1bHVzIC1pbiA8cHJpdmF0ZS1zc2wta2V5Pi5wZW0gfCBvcGVuc3NsIG1kNVxuKHN0ZGluKT0gZjU3YTNiOThiMDgwZjZkMzRjNmUzNTQ2YmFkZmZiMTRcblxuI2ZvciBDU1ItRmlsZVxub3BlbnNzbCByZXEgLW5vb3V0IC1tb2R1bHVzIC1pbiA8Y3NyLXNzbD4uY3NyIHwgb3BlbnNzbCBtZDVcbihzdGRpbik9IGY1N2EzYjk4YjA4MGY2ZDM0YzZlMzU0NmJhZGZmYjE0XG5cbiNmb3IgU2lnbmVkIENlcnRcbm9wZW5zc2wgeDUwOSAtbm9vdXQgLW1vZHVsdXMgLWluIGNzcl9kb21pbm90Nzxjc3Itc3NsPi5jZXIgfCBvcGVuc3NsIG1kNVxuKHN0ZGluKT0gZjU3YTNiOThiMDgwZjZkMzRjNmUzNTQ2YmFkZmZiMTRcbiIpKSk7fTtNRFhDb250ZW50LmlzTURYQ29tcG9uZW50PXRydWU7"},null]}