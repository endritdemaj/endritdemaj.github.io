{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{57:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"frontMatter\",(function(){return i})),n.d(t,\"metadata\",(function(){return s})),n.d(t,\"rightToc\",(function(){return l})),n.d(t,\"default\",(function(){return d}));var r=n(2),a=n(6),o=(n(0),n(91)),i={id:\"linuxcheatsheet\",title:\"Linux Cheatsheat\",sidebar_label:\"Linux Cheatsheat\"},s={unversionedId:\"documentation/linuxcheatsheet\",id:\"documentation/linuxcheatsheet\",isDocsHomePage:!1,title:\"Linux Cheatsheat\",description:\"pwd                                                             #print working directory\",source:\"@site/docs/documentation/linux.md\",permalink:\"/endritdemaj.github.io/docs/documentation/linuxcheatsheet\",editUrl:\"https://github.com/facebook/docusaurus/edit/master/website/docs/documentation/linux.md\",sidebar_label:\"Linux Cheatsheat\",sidebar:\"someSidebar\",previous:{title:\"This is Document Number 3\",permalink:\"/endritdemaj.github.io/docs/doc3\"},next:{title:\"Docker Cheatsheat\",permalink:\"/endritdemaj.github.io/docs/documentation/dockercheatsheet\"}},l=[{value:\"How to mount a new Drive /dev/sdb\",id:\"how-to-mount-a-new-drive-devsdb\",children:[]},{value:\"Generate SSL Certificates and get them signed\",id:\"generate-ssl-certificates-and-get-them-signed\",children:[]},{value:\"GREP\",id:\"grep\",children:[]},{value:\"test\",id:\"test\",children:[]}],c={rightToc:l};function d(e){var t=e.components,n=Object(a.a)(e,[\"components\"]);return Object(o.b)(\"wrapper\",Object(r.a)({},c,n,{components:t,mdxType:\"MDXLayout\"}),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),'pwd                                                             #print working directory   \\nhistory                                                         #show last run commands\\nhistory_persistant                                              #show persistant history with timestamp\\n<cmd> &                                                         #run <cmd> in background or hit ctrl+Z\\nnohup <cmd>                                                     #<cmd> runs even after user logges out\\nwatch <cmd>                                                     #tracks output of <cmd> and refreshs every 2 seconds\\n<cmd> || <cmd2>                                                 #run <cmd2> when <cmd> has an error\\n<cmd> && <cmd2>                                                 #run <cmd2> only when <cmd> was sucessfull\\necho $?                                                         #check return value of last run cmd, echo $hallo->hallo\\nalisa dir=\"ls\"                                                  #create an alias vor \\'ls\\'. Put that in ~/.bashrc for it to be permanent\\necho $PATH                                                      #dir where cmds are looked for\\nPATH=\"$PATH:/opt/newFolder                                      #extend $PATH with new folder\\ncat file                                                        #catalog file, show in bash\\n/etc/bashrc                                                     #global .bashrc file\\nman <cmd>                                                       #man page for <cmd>\\n/etc or etc                                                     #begining with / is always the absolute path\\nls                                                              #list dir\\n    Options>                    \\n        -l                                                      #long list\\n        -a                                                      #list all with hidden\\n        -h                                                      #human readable\\n        -S                                                      #sort by Size\\n        -t                                                      #sort by date\\n        -r                                                      #reverse sorting\\nmkdir -p                                                        #create dir and parent dir even if the exists\\nfind . -iname \"test*.txt\"                                       #search for files in current dir(.) that got the name \"test\" and end with \".txt\" ignore case sensitiv(-i)\\nfind . -amin 5                                                  #search for files that got touched in the last 5 mins. +5 files older than 5 mins\\nfind . -mmin 5                                                  #that got modified\\nfind /path/to/dataset -printf \\'%s %p\\\\n\\' | sort -nr | head -50   #list 50 files in that dir ordered by size\\nSTDOUT STDERR                                                   #standart output and std error      \\nscript1.sh > /tmp/output                                        #write output of script1.sh to the file /tmp/output and override the old content. >> to append\\nscript1.sh 2> /tmp/output                                       #write only the errors in it\\ncat datei | script2.sh                                          #wirte output in file\\nless/more                                                       # like cat but with formating and scrolling\\ntail -f                                                         #shows the last lines of a file and follows changes\\nstat file                                                       #list information for file\\nscreen ls                                                       #like watch\\n/bin                                                            #all executabels\\nlsof                                                            #-u or -p user und process, who is using the files\\nlsblk                                                           #volume info\\n\\nColor of cmd                                                    #export PS1=\"\\\\e[0;32m[\\\\u@\\\\h \\\\W]\\\\$ \\\\e[m \"  1 fuer gruen, 2 fuer rot, 3 fuer gelb\\n:%s/oldString/newString                                         #find and repleace oldstring with new string in vim. Delimeter can be changed from / to #\\napt-get update --allow-unauthenticated                          #\\n            or --allow-insecure-repositories   ----             #to allow insicure repos\\napt-cache madison gcc                                           #show all versions in repo\\nyum downgrade httpd-2.2.3-22.el5                                #downgrade package\\nyum --showduplicates list httpd | expand                        #show all versions in repo\\nsudo apt list --installed | grep -i cuda                        #list all installed from cuda\\nyum list installed | grep nvidia                                #list all installed from nvidia on rhel\\nlsof -i -P -n                                                   #check the listening ports\\ntmux                                                            #tool to monitor- split console in windows\\n    Options:\\n        ctrl-b + %                                              #split vertically\\n        ctrl-b + \"                                              #split horizontally\\n        ctrl-b and arrows                                       #to move in windows\\ntar -xvzf z                                                     #unzip file\\ntar -zcf folder.tar.gz folder                                   #zip folder          \\n/var/log/*-server-update/latest.log                             #see *-server-update errors\\necho user:pass | /usr/sbin/chpasswd                             #change PW of user or with passwd\\ncat /etc/sudoers                                                #list sudoers\\nchmod 777 datei +R                                              #change permissions Owner Group World\\n    Options:\\n        0                                                       #No Permissions\\n        1                                                       #execute\\n        2                                                       #write\\n        3                                                       #execute + write\\n        4                                                       #read\\n        5                                                       #read and execute\\n        6                                                       #read + write\\n        7                                                       #read + write + execute\\nchgrp +R grp datei                                              #change group\\nchown                                                           #change owner e.g > chown endrit file\\nlshw | cpu                                                      #number of CPU\\'s\\nfree -g                                                         #check RAM\\nfdisk -l | grep Disk                                            #check Hard drives\\nlsblk                                                           #check hard drives\\npuppet agent -t --no-noop                                       #run puppet\\ndu -s /var/log/* | sort -n | tail -n 50                         #list files in /var/log ordered by size \\nswapoff -a && swapon -a                                         #umount and mount swap at runtime\\nlsof -nP +L1 grep /tmp/ oder lsof -nP +L1 grep deleted          #check if files are deleted and who is using them (deleted)\\ntree .                                                          # print tree of the current directory\\nyum versionlock <package-name>                                  \\ngetent passwd <UID>                                             #to get Userid from uid\\nchattr +i <filename>                        #Make a file unchangeable umutable <chattr -i> to take that back\\n')),Object(o.b)(\"h3\",{id:\"how-to-mount-a-new-drive-devsdb\"},\"How to mount a new Drive /dev/sdb\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),\"#Create new physical device\\npvcreate /dev/sdb\\n\\n#Create new Volume Group vg_daten1\\nvgcreate vg_daten1 /dev/sdb\\n\\n#check the new volumes\\npvdisplay\\n\\n#create new Logical Volume Grpup with 100% from vg_datenq\\nlvcreate -n /dev/mapper/vg_daten1-lv_opt_data -l100%VG vg_daten1\\n\\n#format the new drive\\nmkfs.ext4 /dev/vg_daten1/lv_opt_data\\n\\n#create mountpoint\\nmkdir /opt/data\\n\\n#mount new drive\\nmount /dev/vg_daten1/lv_opt_data /opt/data\\n\")),Object(o.b)(\"h3\",{id:\"generate-ssl-certificates-and-get-them-signed\"},\"Generate SSL Certificates and get them signed\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),\"1. generate private key\\n$openssl req -x509 -nodes -days 730 -newkey rsa:2048 -keyout <private-ssl-key>.pem\\n\\n2. generate CSR with that private key\\n#dont forget the Wildcards if using subdomains\\n$openssl req -new -key <private-ssl-key>.pem -sha256 -nodes  -out <csr-ssl>.csr\\n\\n3. request signed CSR\\n    Go to ASK your IT department\\n\\n4. You will get a signed CRS-Certificate\\n    You will get a signed CSR-Certifiace something like <csr-ssl>.cer\\n\\nCheck if the md5sums is correct. Need to be equal\\n\\n#for private KEY\\nopenssl rsa -noout -modulus -in <private-ssl-key>.pem | openssl md5\\n(stdin)= f57a3b98b080f6d34c6e3546badffb14\\n\\n#for CSR-File\\nopenssl req -noout -modulus -in <csr-ssl>.csr | openssl md5\\n(stdin)= f57a3b98b080f6d34c6e3546badffb14\\n\\n#for Signed Cert\\nopenssl x509 -noout -modulus -in <csr-ssl>.cer | openssl md5\\n(stdin)= f57a3b98b080f6d34c6e3546badffb14\\n\\n# for webpage\\necho | openssl s_client -servername <NAME> -connect <HOST:PORT> 2>/dev/null | openssl x509 -noout -dates\\n\\n#check date for ssl-cls cert\\nopenssl x509 -enddate -noout -in <csr-ssl>.cer\\nopenssl x509 -dates -noout -in <csr-ssl>.cer\\n\")),Object(o.b)(\"h3\",{id:\"grep\"},\"GREP\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),\"grep <term> <file>                                              #search for term in file\\ngrep -i                                                         #ignore case\\nsudo grep -r <pattern> path                                     #search for pattern in files\\ngrep -rnw '/path' -e 'pattern'                                  #    \\ncat testfile | grep --color=always -z 'hello'                   #mark the word hello und show all lines with grep\\ni *\\ngrep -ir <pattern> *                                               #search recursively for <pattern> in all files in current path\\n\")),Object(o.b)(\"h2\",{id:\"test\"},\"test\"))}d.isMDXComponent=!0},91:function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return u})),n.d(t,\"b\",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),d=function(e){var t=a.a.useContext(c),n=t;return e&&(n=\"function\"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:\"code\",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),u=d(n),h=r,m=u[\"\".concat(i,\".\").concat(h)]||u[h]||p[h]||o;return n?a.a.createElement(m,s(s({ref:t},c),{},{components:n})):a.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if(\"string\"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType=\"string\"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}h.displayName=\"MDXCreateElement\"}}]);","extractedComments":[]}