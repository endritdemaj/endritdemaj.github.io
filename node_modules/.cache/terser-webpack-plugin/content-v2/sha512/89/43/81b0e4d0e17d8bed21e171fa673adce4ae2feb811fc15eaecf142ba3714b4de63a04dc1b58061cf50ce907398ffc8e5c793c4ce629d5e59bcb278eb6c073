{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{66:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"frontMatter\",(function(){return c})),t.d(n,\"metadata\",(function(){return i})),t.d(n,\"rightToc\",(function(){return d})),t.d(n,\"default\",(function(){return s}));var r=t(2),a=t(6),o=(t(0),t(89)),c={id:\"dockercheatsheet\",title:\"Docker Cheatsheat\",sidebar_label:\"Docker Cheatsheat\"},i={unversionedId:\"documentation/dockercheatsheet\",id:\"documentation/dockercheatsheet\",isDocsHomePage:!1,title:\"Docker Cheatsheat\",description:\"You can write content using GitHub-flavored Markdown syntax.\",source:\"@site/docs/documentation/dockercheatsheet.md\",permalink:\"/endritdemaj.github.io/docs/documentation/dockercheatsheet\",editUrl:\"https://github.com/facebook/docusaurus/edit/master/website/docs/documentation/dockercheatsheet.md\",sidebar_label:\"Docker Cheatsheat\",sidebar:\"someSidebar\",previous:{title:\"Linux Cheatsheat\",permalink:\"/endritdemaj.github.io/docs/documentation/linuxcheatsheet\"},next:{title:\"IBM Tivoli Storage Manager (TSM) Cheatsheat\",permalink:\"/endritdemaj.github.io/docs/documentation/tivolicheatsheet\"}},d=[{value:\"Docker Editions\",id:\"docker-editions\",children:[]},{value:\"General\",id:\"general\",children:[]},{value:\"Intro\",id:\"intro\",children:[]},{value:\"General\",id:\"general-1\",children:[]},{value:\"Networking\",id:\"networking\",children:[{value:\"Docker Networks: DNS\",id:\"docker-networks-dns\",children:[]}]}],l={rightToc:d};function s(e){var n=e.components,t=Object(a.a)(e,[\"components\"]);return Object(o.b)(\"wrapper\",Object(r.a)({},l,t,{components:n,mdxType:\"MDXLayout\"}),Object(o.b)(\"p\",null,\"You can write content using \",Object(o.b)(\"a\",Object(r.a)({parentName:\"p\"},{href:\"https://github.github.com/gfm/\"}),\"GitHub-flavored Markdown syntax\"),\".\"),Object(o.b)(\"h2\",{id:\"docker-editions\"},\"Docker Editions\"),Object(o.b)(\"ul\",null,Object(o.b)(\"li\",{parentName:\"ul\"},'Docker is no longer just a \"Container runtime\"'),Object(o.b)(\"li\",{parentName:\"ul\"},\"Dokcer moves fast, it mattes how you install it\"),Object(o.b)(\"li\",{parentName:\"ul\"},\"Docker CE (Community Edtion)\"),Object(o.b)(\"li\",{parentName:\"ul\"},\"Three major types of instlals: Direct, Mac/Win, Cloud\"),Object(o.b)(\"li\",{parentName:\"ul\"},\"Linux(different per distro) (don't use default package)\")),Object(o.b)(\"h2\",{id:\"general\"},\"General\"),Object(o.b)(\"p\",null,\"Image is all the binaries of a container, scripts sources and so on\\nA Container is a running instance of that image\"),Object(o.b)(\"h2\",{id:\"intro\"},\"Intro\"),Object(o.b)(\"p\",null,\"what is happening in 'docker container run' \"),Object(o.b)(\"ol\",null,Object(o.b)(\"li\",{parentName:\"ol\"},\"Looks for that image locally in image chache, doesnt find anything\"),Object(o.b)(\"li\",{parentName:\"ol\"},\"then looks in remote image repository\"),Object(o.b)(\"li\",{parentName:\"ol\"},\"downloads the latest version\"),Object(o.b)(\"li\",{parentName:\"ol\"},\"creates new container absed on that images\"),Object(o.b)(\"li\",{parentName:\"ol\"},\"gices it a virtual IP on a pricate network inside a container\"),Object(o.b)(\"li\",{parentName:\"ol\"},\"opens up port 80 on host and forward to port 80 in contianer\"),Object(o.b)(\"li\",{parentName:\"ol\"},\"starts container by using CMD in dockerfile\")),Object(o.b)(\"h1\",{id:\"cheatsheet\"},\"Cheatsheet\"),Object(o.b)(\"h2\",{id:\"general-1\"},\"General\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),\"docker version                                      #shows the version of docker client(CLI) and docker engine (systemd-deamon)\\ndocker info                                         #general info expanded e.g running contianers etc.\\ndocker <managemend command> <command>               #docker cointainer run\\ndocke ps                                            #list all running container. -a list all containers\\ndocker top <container id>                           #list processes inside a running container\\nps aux                                              #show processer running inside a docker container too without hiding it\\ndocker container inspect                            #details of the container\\ndocker container stats                              #stats of all container\\n\")),Object(o.b)(\"h2\",{id:\"networking\"},\"Networking\"),Object(o.b)(\"p\",null,Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"<bridge(docker0)>\"),\" is the default network that routes to the Host Network Interface\",Object(o.b)(\"br\",{parentName:\"p\"}),\"\\n\",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"<host>\"),\" it gains performance by skipping virutal networks but sacrifices security of container model. Basically it is direkt on the Host\",Object(o.b)(\"br\",{parentName:\"p\"}),\"\\n\",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"<none>\"),\" is not atached to anything\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),\"docker network ls                                   #List all docker networks\\ndocker network inspect                              #inspect what we are doing\\ndocker network create --driver                      #create a new network\\ndocker network connect                              #atach a network to a container\\ndocker network disconnect                           #detach a network from a container\\n\")),Object(o.b)(\"p\",null,\"Create a new Network using the default \",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"<bridge>\"),\" driver. If we need another driver, we have to specify it with \",Object(o.b)(\"inlineCode\",{parentName:\"p\"},\"<--driver>\")),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),'$docker network create my_app_net^C\\n#list them\\n$docker network ls\\nNETWORK ID          NAME                DRIVER              SCOPE\\n8d2dc7348d3d        bridge              bridge              local\\n9afc2ba4f278        host                host                local\\ncd18d7f432a3        my_app_net          bridge              local\\na0c8590e5ace        none                null                local\\n\\n$docker network inspect my_app_net \\n[\\n    {\\n        \"Name\": \"my_app_net\",\\n        \"Id\": \"cd18d7f432a34a979e9f4ae81b5c0be389cd65760fec4168f32c778ff05594ad\",\\n        \"Created\": \"2020-08-23T19:59:17.646091944+02:00\",\\n        \"Scope\": \"local\",\\n        \"Driver\": \"bridge\",\\n        \"EnableIPv6\": false,\\n        \"IPAM\": {\\n            \"Driver\": \"default\",\\n            \"Options\": {},\\n            \"Config\": [\\n                {\\n                    \"Subnet\": \"172.18.0.0/16\",\\n                    \"Gateway\": \"172.18.0.1\"\\n                }\\n            ]\\n        },\\n        \"Internal\": false,\\n        \"Attachable\": false,\\n        \"Ingress\": false,\\n        \"ConfigFrom\": {\\n            \"Network\": \"\"\\n        },\\n        \"ConfigOnly\": false,\\n        \"Containers\": {},\\n        \"Options\": {},\\n        \"Labels\": {}\\n    }\\n]\\n')),Object(o.b)(\"p\",null,\"To run  a container on a specific network we can do this:\"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),\"$docker container run -d --name new_nginx --network my_app_net nginx\\n444869e57cfbd60d237d7c6e5ce792dfa78626d41546e6528c6c4b9460b05e53\\n\")),Object(o.b)(\"p\",null,\"If we inspect our network, we can see this: \"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),'$docker network inspect my_app_net \\n[\\n    {\\n        \"Name\": \"my_app_net\",\\n        \"Id\": \"cd18d7f432a34a979e9f4ae81b5c0be389cd65760fec4168f32c778ff05594ad\",\\n        \"Created\": \"2020-08-23T19:59:17.646091944+02:00\",\\n        \"Scope\": \"local\",\\n        \"Driver\": \"bridge\",\\n        \"EnableIPv6\": false,\\n        \"IPAM\": {\\n            \"Driver\": \"default\",\\n            \"Options\": {},\\n            \"Config\": [\\n                {\\n                    \"Subnet\": \"172.18.0.0/16\",\\n                    \"Gateway\": \"172.18.0.1\"\\n                }\\n            ]\\n        },\\n        \"Internal\": false,\\n        \"Attachable\": false,\\n        \"Ingress\": false,\\n        \"ConfigFrom\": {\\n            \"Network\": \"\"\\n        },\\n        \"ConfigOnly\": false,\\n        \"Containers\": {\\n            \"444869e57cfbd60d237d7c6e5ce792dfa78626d41546e6528c6c4b9460b05e53\": {\\n                \"Name\": \"new_nginx\",\\n                \"EndpointID\": \"e33e1489899ddfcfe36cbf06406561e3d2a17ad4a03a966d68ef9bd52192e47f\",\\n                \"MacAddress\": \"02:42:ac:12:00:02\",\\n                \"IPv4Address\": \"172.18.0.2/16\",\\n                \"IPv6Address\": \"\"\\n            }\\n        },__\\n        \"Options\": {},\\n        \"Labels\": {}\\n    }\\n]\\n')),Object(o.b)(\"p\",null,\"If we want to connect an existing container to a network we have to run the following  \"),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),\"docker network connect <containerid> <networkid>\\n\")),Object(o.b)(\"h3\",{id:\"docker-networks-dns\"},\"Docker Networks: DNS\"),Object(o.b)(\"p\",null,\"In the world where containers changes from second  to second we cant rely on IPAddresses. Since its to dynamic\\nThere is a build in solution for this and that is \",Object(o.b)(\"strong\",{parentName:\"p\"},\"DNS-Naming\")),Object(o.b)(\"pre\",null,Object(o.b)(\"code\",Object(r.a)({parentName:\"pre\"},{}),\"docker container run -d --name my_container_name \\n\")))}s.isMDXComponent=!0},89:function(e,n,t){\"use strict\";t.d(n,\"a\",(function(){return b})),t.d(n,\"b\",(function(){return f}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),s=function(e){var n=a.a.useContext(l),t=n;return e&&(t=\"function\"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=s(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:\"code\",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=d(e,[\"components\",\"mdxType\",\"originalType\",\"parentName\"]),b=s(t),u=r,f=b[\"\".concat(c,\".\").concat(u)]||b[u]||p[u]||o;return t?a.a.createElement(f,i(i({ref:n},l),{},{components:t})):a.a.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if(\"string\"==typeof e||r){var o=t.length,c=new Array(o);c[0]=u;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType=\"string\"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=t[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}u.displayName=\"MDXCreateElement\"}}]);","extractedComments":[]}